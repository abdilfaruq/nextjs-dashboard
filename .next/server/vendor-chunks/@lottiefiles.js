"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@lottiefiles";
exports.ids = ["vendor-chunks/@lottiefiles"];
exports.modules = {

/***/ "(ssr)/./node_modules/@lottiefiles/react-lottie-player/dist/lottie-react.esm.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@lottiefiles/react-lottie-player/dist/lottie-react.esm.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Controls: () => (/* binding */ Controls),\n/* harmony export */   Player: () => (/* binding */ Player),\n/* harmony export */   PlayerEvent: () => (/* binding */ PlayerEvent),\n/* harmony export */   PlayerState: () => (/* binding */ PlayerState),\n/* harmony export */   Seeker: () => (/* binding */ Seeker),\n/* harmony export */   parseSrc: () => (/* binding */ parseSrc)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\n\n/*! *****************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */ var extendStatics = function(t, e) {\n    return (extendStatics = Object.setPrototypeOf || ({\n        __proto__: []\n    }) instanceof Array && function(t, e) {\n        t.__proto__ = e;\n    } || function(t, e) {\n        for(var r in e)Object.prototype.hasOwnProperty.call(e, r) && (t[r] = e[r]);\n    })(t, e);\n};\nfunction __extends(t, e) {\n    if (\"function\" != typeof e && null !== e) throw new TypeError(\"Class extends value \" + String(e) + \" is not a constructor or null\");\n    function r() {\n        this.constructor = t;\n    }\n    extendStatics(t, e), t.prototype = null === e ? Object.create(e) : (r.prototype = e.prototype, new r);\n}\nvar __assign = function() {\n    return (__assign = Object.assign || function(t) {\n        for(var e, r = 1, i = arguments.length; r < i; r++)for(var a in e = arguments[r])Object.prototype.hasOwnProperty.call(e, a) && (t[a] = e[a]);\n        return t;\n    }).apply(this, arguments);\n};\nfunction __rest(t, e) {\n    var r = {};\n    for(var i in t)Object.prototype.hasOwnProperty.call(t, i) && e.indexOf(i) < 0 && (r[i] = t[i]);\n    if (null != t && \"function\" == typeof Object.getOwnPropertySymbols) {\n        var a = 0;\n        for(i = Object.getOwnPropertySymbols(t); a < i.length; a++)e.indexOf(i[a]) < 0 && Object.prototype.propertyIsEnumerable.call(t, i[a]) && (r[i[a]] = t[i[a]]);\n    }\n    return r;\n}\nfunction __decorate(t, e, r, i) {\n    var a, s = arguments.length, n = s < 3 ? e : null === i ? i = Object.getOwnPropertyDescriptor(e, r) : i;\n    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.decorate) n = Reflect.decorate(t, e, r, i);\n    else for(var o = t.length - 1; o >= 0; o--)(a = t[o]) && (n = (s < 3 ? a(n) : s > 3 ? a(e, r, n) : a(e, r)) || n);\n    return s > 3 && n && Object.defineProperty(e, r, n), n;\n}\nfunction __param(t, e) {\n    return function(r, i) {\n        e(r, i, t);\n    };\n}\nfunction __metadata(t, e) {\n    if (\"object\" == typeof Reflect && \"function\" == typeof Reflect.metadata) return Reflect.metadata(t, e);\n}\nfunction __awaiter(t, e, r, i) {\n    return new (r || (r = Promise))(function(a, s) {\n        function n(t) {\n            try {\n                h(i.next(t));\n            } catch (t) {\n                s(t);\n            }\n        }\n        function o(t) {\n            try {\n                h(i.throw(t));\n            } catch (t) {\n                s(t);\n            }\n        }\n        function h(t) {\n            var e;\n            t.done ? a(t.value) : (e = t.value, e instanceof r ? e : new r(function(t) {\n                t(e);\n            })).then(n, o);\n        }\n        h((i = i.apply(t, e || [])).next());\n    });\n}\nfunction __generator(t, e) {\n    var r, i, a, s, n = {\n        label: 0,\n        sent: function() {\n            if (1 & a[0]) throw a[1];\n            return a[1];\n        },\n        trys: [],\n        ops: []\n    };\n    return s = {\n        next: o(0),\n        throw: o(1),\n        return: o(2)\n    }, \"function\" == typeof Symbol && (s[Symbol.iterator] = function() {\n        return this;\n    }), s;\n    function o(s) {\n        return function(o) {\n            return function(s) {\n                if (r) throw new TypeError(\"Generator is already executing.\");\n                for(; n;)try {\n                    if (r = 1, i && (a = 2 & s[0] ? i.return : s[0] ? i.throw || ((a = i.return) && a.call(i), 0) : i.next) && !(a = a.call(i, s[1])).done) return a;\n                    switch(i = 0, a && (s = [\n                        2 & s[0],\n                        a.value\n                    ]), s[0]){\n                        case 0:\n                        case 1:\n                            a = s;\n                            break;\n                        case 4:\n                            return n.label++, {\n                                value: s[1],\n                                done: !1\n                            };\n                        case 5:\n                            n.label++, i = s[1], s = [\n                                0\n                            ];\n                            continue;\n                        case 7:\n                            s = n.ops.pop(), n.trys.pop();\n                            continue;\n                        default:\n                            if (!(a = n.trys, (a = a.length > 0 && a[a.length - 1]) || 6 !== s[0] && 2 !== s[0])) {\n                                n = 0;\n                                continue;\n                            }\n                            if (3 === s[0] && (!a || s[1] > a[0] && s[1] < a[3])) {\n                                n.label = s[1];\n                                break;\n                            }\n                            if (6 === s[0] && n.label < a[1]) {\n                                n.label = a[1], a = s;\n                                break;\n                            }\n                            if (a && n.label < a[2]) {\n                                n.label = a[2], n.ops.push(s);\n                                break;\n                            }\n                            a[2] && n.ops.pop(), n.trys.pop();\n                            continue;\n                    }\n                    s = e.call(t, n);\n                } catch (t) {\n                    s = [\n                        6,\n                        t\n                    ], i = 0;\n                } finally{\n                    r = a = 0;\n                }\n                if (5 & s[0]) throw s[1];\n                return {\n                    value: s[0] ? s[1] : void 0,\n                    done: !0\n                };\n            }([\n                s,\n                o\n            ]);\n        };\n    }\n}\nvar __createBinding = Object.create ? function(t, e, r, i) {\n    void 0 === i && (i = r), Object.defineProperty(t, i, {\n        enumerable: !0,\n        get: function() {\n            return e[r];\n        }\n    });\n} : function(t, e, r, i) {\n    void 0 === i && (i = r), t[i] = e[r];\n};\nfunction __exportStar(t, e) {\n    for(var r in t)\"default\" === r || Object.prototype.hasOwnProperty.call(e, r) || __createBinding(e, t, r);\n}\nfunction __values(t) {\n    var e = \"function\" == typeof Symbol && Symbol.iterator, r = e && t[e], i = 0;\n    if (r) return r.call(t);\n    if (t && \"number\" == typeof t.length) return {\n        next: function() {\n            return t && i >= t.length && (t = void 0), {\n                value: t && t[i++],\n                done: !t\n            };\n        }\n    };\n    throw new TypeError(e ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\nfunction __read(t, e) {\n    var r = \"function\" == typeof Symbol && t[Symbol.iterator];\n    if (!r) return t;\n    var i, a, s = r.call(t), n = [];\n    try {\n        for(; (void 0 === e || e-- > 0) && !(i = s.next()).done;)n.push(i.value);\n    } catch (t) {\n        a = {\n            error: t\n        };\n    } finally{\n        try {\n            i && !i.done && (r = s.return) && r.call(s);\n        } finally{\n            if (a) throw a.error;\n        }\n    }\n    return n;\n}\nfunction __spread() {\n    for(var t = [], e = 0; e < arguments.length; e++)t = t.concat(__read(arguments[e]));\n    return t;\n}\nfunction __spreadArrays() {\n    for(var t = 0, e = 0, r = arguments.length; e < r; e++)t += arguments[e].length;\n    var i = Array(t), a = 0;\n    for(e = 0; e < r; e++)for(var s = arguments[e], n = 0, o = s.length; n < o; n++, a++)i[a] = s[n];\n    return i;\n}\nfunction __spreadArray(t, e, r) {\n    if (r || 2 === arguments.length) for(var i, a = 0, s = e.length; a < s; a++)!i && a in e || (i || (i = Array.prototype.slice.call(e, 0, a)), i[a] = e[a]);\n    return t.concat(i || Array.prototype.slice.call(e));\n}\nfunction __await(t) {\n    return this instanceof __await ? (this.v = t, this) : new __await(t);\n}\nfunction __asyncGenerator(t, e, r) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var i, a = r.apply(t, e || []), s = [];\n    return i = {}, n(\"next\"), n(\"throw\"), n(\"return\"), i[Symbol.asyncIterator] = function() {\n        return this;\n    }, i;\n    function n(t) {\n        a[t] && (i[t] = function(e) {\n            return new Promise(function(r, i) {\n                s.push([\n                    t,\n                    e,\n                    r,\n                    i\n                ]) > 1 || o(t, e);\n            });\n        });\n    }\n    function o(t, e) {\n        try {\n            (r = a[t](e)).value instanceof __await ? Promise.resolve(r.value.v).then(h, l) : p(s[0][2], r);\n        } catch (t) {\n            p(s[0][3], t);\n        }\n        var r;\n    }\n    function h(t) {\n        o(\"next\", t);\n    }\n    function l(t) {\n        o(\"throw\", t);\n    }\n    function p(t, e) {\n        t(e), s.shift(), s.length && o(s[0][0], s[0][1]);\n    }\n}\nfunction __asyncDelegator(t) {\n    var e, r;\n    return e = {}, i(\"next\"), i(\"throw\", function(t) {\n        throw t;\n    }), i(\"return\"), e[Symbol.iterator] = function() {\n        return this;\n    }, e;\n    function i(i, a) {\n        e[i] = t[i] ? function(e) {\n            return (r = !r) ? {\n                value: __await(t[i](e)),\n                done: \"return\" === i\n            } : a ? a(e) : e;\n        } : a;\n    }\n}\nfunction __asyncValues(t) {\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n    var e, r = t[Symbol.asyncIterator];\n    return r ? r.call(t) : (t = \"function\" == typeof __values ? __values(t) : t[Symbol.iterator](), e = {}, i(\"next\"), i(\"throw\"), i(\"return\"), e[Symbol.asyncIterator] = function() {\n        return this;\n    }, e);\n    function i(r) {\n        e[r] = t[r] && function(e) {\n            return new Promise(function(i, a) {\n                (function(t, e, r, i) {\n                    Promise.resolve(i).then(function(e) {\n                        t({\n                            value: e,\n                            done: r\n                        });\n                    }, e);\n                })(i, a, (e = t[r](e)).done, e.value);\n            });\n        };\n    }\n}\nfunction __makeTemplateObject(t, e) {\n    return Object.defineProperty ? Object.defineProperty(t, \"raw\", {\n        value: e\n    }) : t.raw = e, t;\n}\nvar __setModuleDefault = Object.create ? function(t, e) {\n    Object.defineProperty(t, \"default\", {\n        enumerable: !0,\n        value: e\n    });\n} : function(t, e) {\n    t.default = e;\n};\nfunction __importStar(t) {\n    if (t && t.__esModule) return t;\n    var e = {};\n    if (null != t) for(var r in t)\"default\" !== r && Object.prototype.hasOwnProperty.call(t, r) && __createBinding(e, t, r);\n    return __setModuleDefault(e, t), e;\n}\nfunction __importDefault(t) {\n    return t && t.__esModule ? t : {\n        default: t\n    };\n}\nfunction __classPrivateFieldGet(t, e, r, i) {\n    if (\"a\" === r && !i) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (\"function\" == typeof e ? t !== e || !i : !e.has(t)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return \"m\" === r ? i : \"a\" === r ? i.call(t) : i ? i.value : e.get(t);\n}\nfunction __classPrivateFieldSet(t, e, r, i, a) {\n    if (\"m\" === i) throw new TypeError(\"Private method is not writable\");\n    if (\"a\" === i && !a) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (\"function\" == typeof e ? t !== e || !a : !e.has(t)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return \"a\" === i ? a.call(t, r) : a ? a.value = r : e.set(t, r), r;\n}\nvar commonjsGlobal = \"undefined\" != typeof globalThis ? globalThis :  false ? 0 : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : {};\nfunction unwrapExports(t) {\n    return t && t.__esModule && Object.prototype.hasOwnProperty.call(t, \"default\") ? t.default : t;\n}\nfunction createCommonjsModule(t, e) {\n    return t(e = {\n        exports: {}\n    }, e.exports), e.exports;\n}\nfunction getCjsExportFromNamespace(t) {\n    return t && t.default || t;\n}\nfunction commonjsRequire() {\n    throw new Error(\"Dynamic requires are not currently supported by @rollup/plugin-commonjs\");\n}\nvar lottie = createCommonjsModule(function(module, exports) {\n    \"undefined\" != typeof navigator && function(t, e) {\n        module.exports = e();\n    }(0, function() {\n        var svgNS = \"http://www.w3.org/2000/svg\", locationHref = \"\", _useWebWorker = !1, initialDefaultFrame = -999999, setWebWorker = function(t) {\n            _useWebWorker = !!t;\n        }, getWebWorker = function() {\n            return _useWebWorker;\n        }, setLocationHref = function(t) {\n            locationHref = t;\n        }, getLocationHref = function() {\n            return locationHref;\n        };\n        function createTag(t) {\n            return document.createElement(t);\n        }\n        function extendPrototype(t, e) {\n            var r, i, a = t.length;\n            for(r = 0; r < a; r += 1)for(var s in i = t[r].prototype)Object.prototype.hasOwnProperty.call(i, s) && (e.prototype[s] = i[s]);\n        }\n        function getDescriptor(t, e) {\n            return Object.getOwnPropertyDescriptor(t, e);\n        }\n        function createProxyFunction(t) {\n            function e() {}\n            return e.prototype = t, e;\n        }\n        var audioControllerFactory = function() {\n            function t(t) {\n                this.audios = [], this.audioFactory = t, this._volume = 1, this._isMuted = !1;\n            }\n            return t.prototype = {\n                addAudio: function(t) {\n                    this.audios.push(t);\n                },\n                pause: function() {\n                    var t, e = this.audios.length;\n                    for(t = 0; t < e; t += 1)this.audios[t].pause();\n                },\n                resume: function() {\n                    var t, e = this.audios.length;\n                    for(t = 0; t < e; t += 1)this.audios[t].resume();\n                },\n                setRate: function(t) {\n                    var e, r = this.audios.length;\n                    for(e = 0; e < r; e += 1)this.audios[e].setRate(t);\n                },\n                createAudio: function(t) {\n                    return this.audioFactory ? this.audioFactory(t) : window.Howl ? new window.Howl({\n                        src: [\n                            t\n                        ]\n                    }) : {\n                        isPlaying: !1,\n                        play: function() {\n                            this.isPlaying = !0;\n                        },\n                        seek: function() {\n                            this.isPlaying = !1;\n                        },\n                        playing: function() {},\n                        rate: function() {},\n                        setVolume: function() {}\n                    };\n                },\n                setAudioFactory: function(t) {\n                    this.audioFactory = t;\n                },\n                setVolume: function(t) {\n                    this._volume = t, this._updateVolume();\n                },\n                mute: function() {\n                    this._isMuted = !0, this._updateVolume();\n                },\n                unmute: function() {\n                    this._isMuted = !1, this._updateVolume();\n                },\n                getVolume: function() {\n                    return this._volume;\n                },\n                _updateVolume: function() {\n                    var t, e = this.audios.length;\n                    for(t = 0; t < e; t += 1)this.audios[t].volume(this._volume * (this._isMuted ? 0 : 1));\n                }\n            }, function() {\n                return new t;\n            };\n        }(), createTypedArray = function() {\n            function t(t, e) {\n                var r, i = 0, a = [];\n                switch(t){\n                    case \"int16\":\n                    case \"uint8c\":\n                        r = 1;\n                        break;\n                    default:\n                        r = 1.1;\n                }\n                for(i = 0; i < e; i += 1)a.push(r);\n                return a;\n            }\n            return \"function\" == typeof Uint8ClampedArray && \"function\" == typeof Float32Array ? function(e, r) {\n                return \"float32\" === e ? new Float32Array(r) : \"int16\" === e ? new Int16Array(r) : \"uint8c\" === e ? new Uint8ClampedArray(r) : t(e, r);\n            } : t;\n        }();\n        function createSizedArray(t) {\n            return Array.apply(null, {\n                length: t\n            });\n        }\n        function _typeof$6(t) {\n            return (_typeof$6 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(t) {\n                return typeof t;\n            } : function(t) {\n                return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n            })(t);\n        }\n        var subframeEnabled = !0, expressionsPlugin = null, expressionsInterfaces = null, idPrefix$1 = \"\", isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent), _shouldRoundValues = !1, bmPow = Math.pow, bmSqrt = Math.sqrt, bmFloor = Math.floor, bmMax = Math.max, bmMin = Math.min, BMMath = {};\n        function ProjectInterface$1() {\n            return {};\n        }\n        !function() {\n            var t, e = [\n                \"abs\",\n                \"acos\",\n                \"acosh\",\n                \"asin\",\n                \"asinh\",\n                \"atan\",\n                \"atanh\",\n                \"atan2\",\n                \"ceil\",\n                \"cbrt\",\n                \"expm1\",\n                \"clz32\",\n                \"cos\",\n                \"cosh\",\n                \"exp\",\n                \"floor\",\n                \"fround\",\n                \"hypot\",\n                \"imul\",\n                \"log\",\n                \"log1p\",\n                \"log2\",\n                \"log10\",\n                \"max\",\n                \"min\",\n                \"pow\",\n                \"random\",\n                \"round\",\n                \"sign\",\n                \"sin\",\n                \"sinh\",\n                \"sqrt\",\n                \"tan\",\n                \"tanh\",\n                \"trunc\",\n                \"E\",\n                \"LN10\",\n                \"LN2\",\n                \"LOG10E\",\n                \"LOG2E\",\n                \"PI\",\n                \"SQRT1_2\",\n                \"SQRT2\"\n            ], r = e.length;\n            for(t = 0; t < r; t += 1)BMMath[e[t]] = Math[e[t]];\n        }(), BMMath.random = Math.random, BMMath.abs = function(t) {\n            if (\"object\" === _typeof$6(t) && t.length) {\n                var e, r = createSizedArray(t.length), i = t.length;\n                for(e = 0; e < i; e += 1)r[e] = Math.abs(t[e]);\n                return r;\n            }\n            return Math.abs(t);\n        };\n        var defaultCurveSegments = 150, degToRads = Math.PI / 180, roundCorner = .5519;\n        function roundValues(t) {\n            _shouldRoundValues = !!t;\n        }\n        function bmRnd(t) {\n            return _shouldRoundValues ? Math.round(t) : t;\n        }\n        function styleDiv(t) {\n            t.style.position = \"absolute\", t.style.top = 0, t.style.left = 0, t.style.display = \"block\", t.style.transformOrigin = \"0 0\", t.style.webkitTransformOrigin = \"0 0\", t.style.backfaceVisibility = \"visible\", t.style.webkitBackfaceVisibility = \"visible\", t.style.transformStyle = \"preserve-3d\", t.style.webkitTransformStyle = \"preserve-3d\", t.style.mozTransformStyle = \"preserve-3d\";\n        }\n        function BMEnterFrameEvent(t, e, r, i) {\n            this.type = t, this.currentTime = e, this.totalTime = r, this.direction = i < 0 ? -1 : 1;\n        }\n        function BMCompleteEvent(t, e) {\n            this.type = t, this.direction = e < 0 ? -1 : 1;\n        }\n        function BMCompleteLoopEvent(t, e, r, i) {\n            this.type = t, this.currentLoop = r, this.totalLoops = e, this.direction = i < 0 ? -1 : 1;\n        }\n        function BMSegmentStartEvent(t, e, r) {\n            this.type = t, this.firstFrame = e, this.totalFrames = r;\n        }\n        function BMDestroyEvent(t, e) {\n            this.type = t, this.target = e;\n        }\n        function BMRenderFrameErrorEvent(t, e) {\n            this.type = \"renderFrameError\", this.nativeError = t, this.currentTime = e;\n        }\n        function BMConfigErrorEvent(t) {\n            this.type = \"configError\", this.nativeError = t;\n        }\n        function BMAnimationConfigErrorEvent(t, e) {\n            this.type = t, this.nativeError = e;\n        }\n        var createElementID = (_count = 0, function() {\n            return idPrefix$1 + \"__lottie_element_\" + (_count += 1);\n        }), _count;\n        function HSVtoRGB(t, e, r) {\n            var i, a, s, n, o, h, l, p;\n            switch(h = r * (1 - e), l = r * (1 - (o = 6 * t - (n = Math.floor(6 * t))) * e), p = r * (1 - (1 - o) * e), n % 6){\n                case 0:\n                    i = r, a = p, s = h;\n                    break;\n                case 1:\n                    i = l, a = r, s = h;\n                    break;\n                case 2:\n                    i = h, a = r, s = p;\n                    break;\n                case 3:\n                    i = h, a = l, s = r;\n                    break;\n                case 4:\n                    i = p, a = h, s = r;\n                    break;\n                case 5:\n                    i = r, a = h, s = l;\n            }\n            return [\n                i,\n                a,\n                s\n            ];\n        }\n        function RGBtoHSV(t, e, r) {\n            var i, a = Math.max(t, e, r), s = Math.min(t, e, r), n = a - s, o = 0 === a ? 0 : n / a, h = a / 255;\n            switch(a){\n                case s:\n                    i = 0;\n                    break;\n                case t:\n                    i = e - r + n * (e < r ? 6 : 0), i /= 6 * n;\n                    break;\n                case e:\n                    i = r - t + 2 * n, i /= 6 * n;\n                    break;\n                case r:\n                    i = t - e + 4 * n, i /= 6 * n;\n            }\n            return [\n                i,\n                o,\n                h\n            ];\n        }\n        function addSaturationToRGB(t, e) {\n            var r = RGBtoHSV(255 * t[0], 255 * t[1], 255 * t[2]);\n            return r[1] += e, r[1] > 1 ? r[1] = 1 : r[1] <= 0 && (r[1] = 0), HSVtoRGB(r[0], r[1], r[2]);\n        }\n        function addBrightnessToRGB(t, e) {\n            var r = RGBtoHSV(255 * t[0], 255 * t[1], 255 * t[2]);\n            return r[2] += e, r[2] > 1 ? r[2] = 1 : r[2] < 0 && (r[2] = 0), HSVtoRGB(r[0], r[1], r[2]);\n        }\n        function addHueToRGB(t, e) {\n            var r = RGBtoHSV(255 * t[0], 255 * t[1], 255 * t[2]);\n            return r[0] += e / 360, r[0] > 1 ? r[0] -= 1 : r[0] < 0 && (r[0] += 1), HSVtoRGB(r[0], r[1], r[2]);\n        }\n        var rgbToHex = function() {\n            var t, e, r = [];\n            for(t = 0; t < 256; t += 1)e = t.toString(16), r[t] = 1 === e.length ? \"0\" + e : e;\n            return function(t, e, i) {\n                return t < 0 && (t = 0), e < 0 && (e = 0), i < 0 && (i = 0), \"#\" + r[t] + r[e] + r[i];\n            };\n        }(), setSubframeEnabled = function(t) {\n            subframeEnabled = !!t;\n        }, getSubframeEnabled = function() {\n            return subframeEnabled;\n        }, setExpressionsPlugin = function(t) {\n            expressionsPlugin = t;\n        }, getExpressionsPlugin = function() {\n            return expressionsPlugin;\n        }, setExpressionInterfaces = function(t) {\n            expressionsInterfaces = t;\n        }, getExpressionInterfaces = function() {\n            return expressionsInterfaces;\n        }, setDefaultCurveSegments = function(t) {\n            defaultCurveSegments = t;\n        }, getDefaultCurveSegments = function() {\n            return defaultCurveSegments;\n        }, setIdPrefix = function(t) {\n            idPrefix$1 = t;\n        }, getIdPrefix = function() {\n            return idPrefix$1;\n        };\n        function createNS(t) {\n            return document.createElementNS(svgNS, t);\n        }\n        function _typeof$5(t) {\n            return (_typeof$5 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(t) {\n                return typeof t;\n            } : function(t) {\n                return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n            })(t);\n        }\n        var dataManager = function() {\n            var t, e, r = 1, i = [], a = {\n                onmessage: function() {},\n                postMessage: function(e) {\n                    t({\n                        data: e\n                    });\n                }\n            }, s = {\n                postMessage: function(t) {\n                    a.onmessage({\n                        data: t\n                    });\n                }\n            };\n            function n() {\n                e || ((e = function(e) {\n                    if (window.Worker && window.Blob && getWebWorker()) {\n                        var r = new Blob([\n                            \"var _workerSelf = self; self.onmessage = \",\n                            e.toString()\n                        ], {\n                            type: \"text/javascript\"\n                        }), i = URL.createObjectURL(r);\n                        return new Worker(i);\n                    }\n                    return t = e, a;\n                }(function(t) {\n                    if (s.dataManager || (s.dataManager = function() {\n                        function t(a, s) {\n                            var n, o, h, l, p, c, m = a.length;\n                            for(o = 0; o < m; o += 1)if (\"ks\" in (n = a[o]) && !n.completed) {\n                                if (n.completed = !0, n.hasMask) {\n                                    var d = n.masksProperties;\n                                    for(l = d.length, h = 0; h < l; h += 1)if (d[h].pt.k.i) i(d[h].pt.k);\n                                    else for(c = d[h].pt.k.length, p = 0; p < c; p += 1)d[h].pt.k[p].s && i(d[h].pt.k[p].s[0]), d[h].pt.k[p].e && i(d[h].pt.k[p].e[0]);\n                                }\n                                0 === n.ty ? (n.layers = e(n.refId, s), t(n.layers, s)) : 4 === n.ty ? r(n.shapes) : 5 === n.ty && f(n);\n                            }\n                        }\n                        function e(t, e) {\n                            var r = function(t, e) {\n                                for(var r = 0, i = e.length; r < i;){\n                                    if (e[r].id === t) return e[r];\n                                    r += 1;\n                                }\n                                return null;\n                            }(t, e);\n                            return r ? r.layers.__used ? JSON.parse(JSON.stringify(r.layers)) : (r.layers.__used = !0, r.layers) : null;\n                        }\n                        function r(t) {\n                            var e, a, s;\n                            for(e = t.length - 1; e >= 0; e -= 1)if (\"sh\" === t[e].ty) if (t[e].ks.k.i) i(t[e].ks.k);\n                            else for(s = t[e].ks.k.length, a = 0; a < s; a += 1)t[e].ks.k[a].s && i(t[e].ks.k[a].s[0]), t[e].ks.k[a].e && i(t[e].ks.k[a].e[0]);\n                            else \"gr\" === t[e].ty && r(t[e].it);\n                        }\n                        function i(t) {\n                            var e, r = t.i.length;\n                            for(e = 0; e < r; e += 1)t.i[e][0] += t.v[e][0], t.i[e][1] += t.v[e][1], t.o[e][0] += t.v[e][0], t.o[e][1] += t.v[e][1];\n                        }\n                        function a(t, e) {\n                            var r = e ? e.split(\".\") : [\n                                100,\n                                100,\n                                100\n                            ];\n                            return t[0] > r[0] || !(r[0] > t[0]) && (t[1] > r[1] || !(r[1] > t[1]) && (t[2] > r[2] || !(r[2] > t[2]) && null));\n                        }\n                        var s, n = function() {\n                            var t = [\n                                4,\n                                4,\n                                14\n                            ];\n                            function e(t) {\n                                var e, r, i, a = t.length;\n                                for(e = 0; e < a; e += 1)5 === t[e].ty && (r = t[e], i = void 0, i = r.t.d, r.t.d = {\n                                    k: [\n                                        {\n                                            s: i,\n                                            t: 0\n                                        }\n                                    ]\n                                });\n                            }\n                            return function(r) {\n                                if (a(t, r.v) && (e(r.layers), r.assets)) {\n                                    var i, s = r.assets.length;\n                                    for(i = 0; i < s; i += 1)r.assets[i].layers && e(r.assets[i].layers);\n                                }\n                            };\n                        }(), o = (s = [\n                            4,\n                            7,\n                            99\n                        ], function(t) {\n                            if (t.chars && !a(s, t.v)) {\n                                var e, i = t.chars.length;\n                                for(e = 0; e < i; e += 1){\n                                    var n = t.chars[e];\n                                    n.data && n.data.shapes && (r(n.data.shapes), n.data.ip = 0, n.data.op = 99999, n.data.st = 0, n.data.sr = 1, n.data.ks = {\n                                        p: {\n                                            k: [\n                                                0,\n                                                0\n                                            ],\n                                            a: 0\n                                        },\n                                        s: {\n                                            k: [\n                                                100,\n                                                100\n                                            ],\n                                            a: 0\n                                        },\n                                        a: {\n                                            k: [\n                                                0,\n                                                0\n                                            ],\n                                            a: 0\n                                        },\n                                        r: {\n                                            k: 0,\n                                            a: 0\n                                        },\n                                        o: {\n                                            k: 100,\n                                            a: 0\n                                        }\n                                    }, t.chars[e].t || (n.data.shapes.push({\n                                        ty: \"no\"\n                                    }), n.data.shapes[0].it.push({\n                                        p: {\n                                            k: [\n                                                0,\n                                                0\n                                            ],\n                                            a: 0\n                                        },\n                                        s: {\n                                            k: [\n                                                100,\n                                                100\n                                            ],\n                                            a: 0\n                                        },\n                                        a: {\n                                            k: [\n                                                0,\n                                                0\n                                            ],\n                                            a: 0\n                                        },\n                                        r: {\n                                            k: 0,\n                                            a: 0\n                                        },\n                                        o: {\n                                            k: 100,\n                                            a: 0\n                                        },\n                                        sk: {\n                                            k: 0,\n                                            a: 0\n                                        },\n                                        sa: {\n                                            k: 0,\n                                            a: 0\n                                        },\n                                        ty: \"tr\"\n                                    })));\n                                }\n                            }\n                        }), h = function() {\n                            var t = [\n                                5,\n                                7,\n                                15\n                            ];\n                            function e(t) {\n                                var e, r, i, a = t.length;\n                                for(e = 0; e < a; e += 1)5 === t[e].ty && (r = t[e], i = void 0, \"number\" == typeof (i = r.t.p).a && (i.a = {\n                                    a: 0,\n                                    k: i.a\n                                }), \"number\" == typeof i.p && (i.p = {\n                                    a: 0,\n                                    k: i.p\n                                }), \"number\" == typeof i.r && (i.r = {\n                                    a: 0,\n                                    k: i.r\n                                }));\n                            }\n                            return function(r) {\n                                if (a(t, r.v) && (e(r.layers), r.assets)) {\n                                    var i, s = r.assets.length;\n                                    for(i = 0; i < s; i += 1)r.assets[i].layers && e(r.assets[i].layers);\n                                }\n                            };\n                        }(), l = function() {\n                            var t = [\n                                4,\n                                1,\n                                9\n                            ];\n                            function e(t) {\n                                var r, i, a, s = t.length;\n                                for(r = 0; r < s; r += 1)if (\"gr\" === t[r].ty) e(t[r].it);\n                                else if (\"fl\" === t[r].ty || \"st\" === t[r].ty) if (t[r].c.k && t[r].c.k[0].i) for(a = t[r].c.k.length, i = 0; i < a; i += 1)t[r].c.k[i].s && (t[r].c.k[i].s[0] /= 255, t[r].c.k[i].s[1] /= 255, t[r].c.k[i].s[2] /= 255, t[r].c.k[i].s[3] /= 255), t[r].c.k[i].e && (t[r].c.k[i].e[0] /= 255, t[r].c.k[i].e[1] /= 255, t[r].c.k[i].e[2] /= 255, t[r].c.k[i].e[3] /= 255);\n                                else t[r].c.k[0] /= 255, t[r].c.k[1] /= 255, t[r].c.k[2] /= 255, t[r].c.k[3] /= 255;\n                            }\n                            function r(t) {\n                                var r, i = t.length;\n                                for(r = 0; r < i; r += 1)4 === t[r].ty && e(t[r].shapes);\n                            }\n                            return function(e) {\n                                if (a(t, e.v) && (r(e.layers), e.assets)) {\n                                    var i, s = e.assets.length;\n                                    for(i = 0; i < s; i += 1)e.assets[i].layers && r(e.assets[i].layers);\n                                }\n                            };\n                        }(), p = function() {\n                            var t = [\n                                4,\n                                4,\n                                18\n                            ];\n                            function e(t) {\n                                var r, i, a;\n                                for(r = t.length - 1; r >= 0; r -= 1)if (\"sh\" === t[r].ty) if (t[r].ks.k.i) t[r].ks.k.c = t[r].closed;\n                                else for(a = t[r].ks.k.length, i = 0; i < a; i += 1)t[r].ks.k[i].s && (t[r].ks.k[i].s[0].c = t[r].closed), t[r].ks.k[i].e && (t[r].ks.k[i].e[0].c = t[r].closed);\n                                else \"gr\" === t[r].ty && e(t[r].it);\n                            }\n                            function r(t) {\n                                var r, i, a, s, n, o, h = t.length;\n                                for(i = 0; i < h; i += 1){\n                                    if ((r = t[i]).hasMask) {\n                                        var l = r.masksProperties;\n                                        for(s = l.length, a = 0; a < s; a += 1)if (l[a].pt.k.i) l[a].pt.k.c = l[a].cl;\n                                        else for(o = l[a].pt.k.length, n = 0; n < o; n += 1)l[a].pt.k[n].s && (l[a].pt.k[n].s[0].c = l[a].cl), l[a].pt.k[n].e && (l[a].pt.k[n].e[0].c = l[a].cl);\n                                    }\n                                    4 === r.ty && e(r.shapes);\n                                }\n                            }\n                            return function(e) {\n                                if (a(t, e.v) && (r(e.layers), e.assets)) {\n                                    var i, s = e.assets.length;\n                                    for(i = 0; i < s; i += 1)e.assets[i].layers && r(e.assets[i].layers);\n                                }\n                            };\n                        }();\n                        function f(t) {\n                            0 === t.t.a.length && t.t.p;\n                        }\n                        var c = {\n                            completeData: function(r) {\n                                r.__complete || (l(r), n(r), o(r), h(r), p(r), t(r.layers, r.assets), function(r, i) {\n                                    if (r) {\n                                        var a = 0, s = r.length;\n                                        for(a = 0; a < s; a += 1)1 === r[a].t && (r[a].data.layers = e(r[a].data.refId, i), t(r[a].data.layers, i));\n                                    }\n                                }(r.chars, r.assets), r.__complete = !0);\n                            }\n                        };\n                        return c.checkColors = l, c.checkChars = o, c.checkPathProperties = h, c.checkShapes = p, c.completeLayers = t, c;\n                    }()), s.assetLoader || (s.assetLoader = function() {\n                        function t(t) {\n                            var e = t.getResponseHeader(\"content-type\");\n                            return e && \"json\" === t.responseType && -1 !== e.indexOf(\"json\") || t.response && \"object\" === _typeof$5(t.response) ? t.response : t.response && \"string\" == typeof t.response ? JSON.parse(t.response) : t.responseText ? JSON.parse(t.responseText) : null;\n                        }\n                        return {\n                            load: function(e, r, i, a) {\n                                var s, n = new XMLHttpRequest;\n                                try {\n                                    n.responseType = \"json\";\n                                } catch (t) {}\n                                n.onreadystatechange = function() {\n                                    if (4 === n.readyState) if (200 === n.status) s = t(n), i(s);\n                                    else try {\n                                        s = t(n), i(s);\n                                    } catch (t) {\n                                        a && a(t);\n                                    }\n                                };\n                                try {\n                                    n.open([\n                                        \"G\",\n                                        \"E\",\n                                        \"T\"\n                                    ].join(\"\"), e, !0);\n                                } catch (t) {\n                                    n.open([\n                                        \"G\",\n                                        \"E\",\n                                        \"T\"\n                                    ].join(\"\"), r + \"/\" + e, !0);\n                                }\n                                n.send();\n                            }\n                        };\n                    }()), \"loadAnimation\" === t.data.type) s.assetLoader.load(t.data.path, t.data.fullPath, function(e) {\n                        s.dataManager.completeData(e), s.postMessage({\n                            id: t.data.id,\n                            payload: e,\n                            status: \"success\"\n                        });\n                    }, function() {\n                        s.postMessage({\n                            id: t.data.id,\n                            status: \"error\"\n                        });\n                    });\n                    else if (\"complete\" === t.data.type) {\n                        var e = t.data.animation;\n                        s.dataManager.completeData(e), s.postMessage({\n                            id: t.data.id,\n                            payload: e,\n                            status: \"success\"\n                        });\n                    } else \"loadData\" === t.data.type && s.assetLoader.load(t.data.path, t.data.fullPath, function(e) {\n                        s.postMessage({\n                            id: t.data.id,\n                            payload: e,\n                            status: \"success\"\n                        });\n                    }, function() {\n                        s.postMessage({\n                            id: t.data.id,\n                            status: \"error\"\n                        });\n                    });\n                })).onmessage = function(t) {\n                    var e = t.data, r = e.id, a = i[r];\n                    i[r] = null, \"success\" === e.status ? a.onComplete(e.payload) : a.onError && a.onError();\n                });\n            }\n            function o(t, e) {\n                var a = \"processId_\" + (r += 1);\n                return i[a] = {\n                    onComplete: t,\n                    onError: e\n                }, a;\n            }\n            return {\n                loadAnimation: function(t, r, i) {\n                    n();\n                    var a = o(r, i);\n                    e.postMessage({\n                        type: \"loadAnimation\",\n                        path: t,\n                        fullPath: window.location.origin + window.location.pathname,\n                        id: a\n                    });\n                },\n                loadData: function(t, r, i) {\n                    n();\n                    var a = o(r, i);\n                    e.postMessage({\n                        type: \"loadData\",\n                        path: t,\n                        fullPath: window.location.origin + window.location.pathname,\n                        id: a\n                    });\n                },\n                completeAnimation: function(t, r, i) {\n                    n();\n                    var a = o(r, i);\n                    e.postMessage({\n                        type: \"complete\",\n                        animation: t,\n                        id: a\n                    });\n                }\n            };\n        }(), ImagePreloader = function() {\n            var t = function() {\n                var t = createTag(\"canvas\");\n                t.width = 1, t.height = 1;\n                var e = t.getContext(\"2d\");\n                return e.fillStyle = \"rgba(0,0,0,0)\", e.fillRect(0, 0, 1, 1), t;\n            }();\n            function e() {\n                this.loadedAssets += 1, this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages && this.imagesLoadedCb && this.imagesLoadedCb(null);\n            }\n            function r() {\n                this.loadedFootagesCount += 1, this.loadedAssets === this.totalImages && this.loadedFootagesCount === this.totalFootages && this.imagesLoadedCb && this.imagesLoadedCb(null);\n            }\n            function i(t, e, r) {\n                var i = \"\";\n                if (t.e) i = t.p;\n                else if (e) {\n                    var a = t.p;\n                    -1 !== a.indexOf(\"images/\") && (a = a.split(\"/\")[1]), i = e + a;\n                } else i = r, i += t.u ? t.u : \"\", i += t.p;\n                return i;\n            }\n            function a(t) {\n                var e = 0, r = setInterval((function() {\n                    (t.getBBox().width || e > 500) && (this._imageLoaded(), clearInterval(r)), e += 1;\n                }).bind(this), 50);\n            }\n            function s(t) {\n                var e = {\n                    assetData: t\n                }, r = i(t, this.assetsPath, this.path);\n                return dataManager.loadData(r, (function(t) {\n                    e.img = t, this._footageLoaded();\n                }).bind(this), (function() {\n                    e.img = {}, this._footageLoaded();\n                }).bind(this)), e;\n            }\n            function n() {\n                this._imageLoaded = e.bind(this), this._footageLoaded = r.bind(this), this.testImageLoaded = a.bind(this), this.createFootageData = s.bind(this), this.assetsPath = \"\", this.path = \"\", this.totalImages = 0, this.totalFootages = 0, this.loadedAssets = 0, this.loadedFootagesCount = 0, this.imagesLoadedCb = null, this.images = [];\n            }\n            return n.prototype = {\n                loadAssets: function(t, e) {\n                    var r;\n                    this.imagesLoadedCb = e;\n                    var i = t.length;\n                    for(r = 0; r < i; r += 1)t[r].layers || (t[r].t && \"seq\" !== t[r].t ? 3 === t[r].t && (this.totalFootages += 1, this.images.push(this.createFootageData(t[r]))) : (this.totalImages += 1, this.images.push(this._createImageData(t[r]))));\n                },\n                setAssetsPath: function(t) {\n                    this.assetsPath = t || \"\";\n                },\n                setPath: function(t) {\n                    this.path = t || \"\";\n                },\n                loadedImages: function() {\n                    return this.totalImages === this.loadedAssets;\n                },\n                loadedFootages: function() {\n                    return this.totalFootages === this.loadedFootagesCount;\n                },\n                destroy: function() {\n                    this.imagesLoadedCb = null, this.images.length = 0;\n                },\n                getAsset: function(t) {\n                    for(var e = 0, r = this.images.length; e < r;){\n                        if (this.images[e].assetData === t) return this.images[e].img;\n                        e += 1;\n                    }\n                    return null;\n                },\n                createImgData: function(e) {\n                    var r = i(e, this.assetsPath, this.path), a = createTag(\"img\");\n                    a.crossOrigin = \"anonymous\", a.addEventListener(\"load\", this._imageLoaded, !1), a.addEventListener(\"error\", (function() {\n                        s.img = t, this._imageLoaded();\n                    }).bind(this), !1), a.src = r;\n                    var s = {\n                        img: a,\n                        assetData: e\n                    };\n                    return s;\n                },\n                createImageData: function(e) {\n                    var r = i(e, this.assetsPath, this.path), a = createNS(\"image\");\n                    isSafari ? this.testImageLoaded(a) : a.addEventListener(\"load\", this._imageLoaded, !1), a.addEventListener(\"error\", (function() {\n                        s.img = t, this._imageLoaded();\n                    }).bind(this), !1), a.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", r), this._elementHelper.append ? this._elementHelper.append(a) : this._elementHelper.appendChild(a);\n                    var s = {\n                        img: a,\n                        assetData: e\n                    };\n                    return s;\n                },\n                imageLoaded: e,\n                footageLoaded: r,\n                setCacheType: function(t, e) {\n                    \"svg\" === t ? (this._elementHelper = e, this._createImageData = this.createImageData.bind(this)) : this._createImageData = this.createImgData.bind(this);\n                }\n            }, n;\n        }();\n        function BaseEvent() {}\n        BaseEvent.prototype = {\n            triggerEvent: function(t, e) {\n                if (this._cbs[t]) for(var r = this._cbs[t], i = 0; i < r.length; i += 1)r[i](e);\n            },\n            addEventListener: function(t, e) {\n                return this._cbs[t] || (this._cbs[t] = []), this._cbs[t].push(e), (function() {\n                    this.removeEventListener(t, e);\n                }).bind(this);\n            },\n            removeEventListener: function(t, e) {\n                if (e) {\n                    if (this._cbs[t]) {\n                        for(var r = 0, i = this._cbs[t].length; r < i;)this._cbs[t][r] === e && (this._cbs[t].splice(r, 1), r -= 1, i -= 1), r += 1;\n                        this._cbs[t].length || (this._cbs[t] = null);\n                    }\n                } else this._cbs[t] = null;\n            }\n        };\n        var markerParser = function() {\n            function t(t) {\n                for(var e, r = t.split(\"\\r\\n\"), i = {}, a = 0, s = 0; s < r.length; s += 1)2 === (e = r[s].split(\":\")).length && (i[e[0]] = e[1].trim(), a += 1);\n                if (0 === a) throw new Error;\n                return i;\n            }\n            return function(e) {\n                for(var r = [], i = 0; i < e.length; i += 1){\n                    var a = e[i], s = {\n                        time: a.tm,\n                        duration: a.dr\n                    };\n                    try {\n                        s.payload = JSON.parse(e[i].cm);\n                    } catch (r) {\n                        try {\n                            s.payload = t(e[i].cm);\n                        } catch (t) {\n                            s.payload = {\n                                name: e[i].cm\n                            };\n                        }\n                    }\n                    r.push(s);\n                }\n                return r;\n            };\n        }(), ProjectInterface = function() {\n            function t(t) {\n                this.compositions.push(t);\n            }\n            return function() {\n                function e(t) {\n                    for(var e = 0, r = this.compositions.length; e < r;){\n                        if (this.compositions[e].data && this.compositions[e].data.nm === t) return this.compositions[e].prepareFrame && this.compositions[e].data.xt && this.compositions[e].prepareFrame(this.currentFrame), this.compositions[e].compInterface;\n                        e += 1;\n                    }\n                    return null;\n                }\n                return e.compositions = [], e.currentFrame = 0, e.registerComposition = t, e;\n            };\n        }(), renderers = {}, registerRenderer = function(t, e) {\n            renderers[t] = e;\n        };\n        function getRenderer(t) {\n            return renderers[t];\n        }\n        function _typeof$4(t) {\n            return (_typeof$4 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(t) {\n                return typeof t;\n            } : function(t) {\n                return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n            })(t);\n        }\n        var AnimationItem = function() {\n            this._cbs = [], this.name = \"\", this.path = \"\", this.isLoaded = !1, this.currentFrame = 0, this.currentRawFrame = 0, this.firstFrame = 0, this.totalFrames = 0, this.frameRate = 0, this.frameMult = 0, this.playSpeed = 1, this.playDirection = 1, this.playCount = 0, this.animationData = {}, this.assets = [], this.isPaused = !0, this.autoplay = !1, this.loop = !0, this.renderer = null, this.animationID = createElementID(), this.assetsPath = \"\", this.timeCompleted = 0, this.segmentPos = 0, this.isSubframeEnabled = getSubframeEnabled(), this.segments = [], this._idle = !0, this._completedLoop = !1, this.projectInterface = ProjectInterface(), this.imagePreloader = new ImagePreloader, this.audioController = audioControllerFactory(), this.markers = [], this.configAnimation = this.configAnimation.bind(this), this.onSetupError = this.onSetupError.bind(this), this.onSegmentComplete = this.onSegmentComplete.bind(this), this.drawnFrameEvent = new BMEnterFrameEvent(\"drawnFrame\", 0, 0, 0);\n        };\n        extendPrototype([\n            BaseEvent\n        ], AnimationItem), AnimationItem.prototype.setParams = function(t) {\n            (t.wrapper || t.container) && (this.wrapper = t.wrapper || t.container);\n            var e = \"svg\";\n            t.animType ? e = t.animType : t.renderer && (e = t.renderer);\n            var r = getRenderer(e);\n            this.renderer = new r(this, t.rendererSettings), this.imagePreloader.setCacheType(e, this.renderer.globalData.defs), this.renderer.setProjectInterface(this.projectInterface), this.animType = e, \"\" === t.loop || null === t.loop || void 0 === t.loop || !0 === t.loop ? this.loop = !0 : !1 === t.loop ? this.loop = !1 : this.loop = parseInt(t.loop, 10), this.autoplay = !(\"autoplay\" in t) || t.autoplay, this.name = t.name ? t.name : \"\", this.autoloadSegments = !Object.prototype.hasOwnProperty.call(t, \"autoloadSegments\") || t.autoloadSegments, this.assetsPath = t.assetsPath, this.initialSegment = t.initialSegment, t.audioFactory && this.audioController.setAudioFactory(t.audioFactory), t.animationData ? this.setupAnimation(t.animationData) : t.path && (-1 !== t.path.lastIndexOf(\"\\\\\") ? this.path = t.path.substr(0, t.path.lastIndexOf(\"\\\\\") + 1) : this.path = t.path.substr(0, t.path.lastIndexOf(\"/\") + 1), this.fileName = t.path.substr(t.path.lastIndexOf(\"/\") + 1), this.fileName = this.fileName.substr(0, this.fileName.lastIndexOf(\".json\")), dataManager.loadAnimation(t.path, this.configAnimation, this.onSetupError));\n        }, AnimationItem.prototype.onSetupError = function() {\n            this.trigger(\"data_failed\");\n        }, AnimationItem.prototype.setupAnimation = function(t) {\n            dataManager.completeAnimation(t, this.configAnimation);\n        }, AnimationItem.prototype.setData = function(t, e) {\n            e && \"object\" !== _typeof$4(e) && (e = JSON.parse(e));\n            var r = {\n                wrapper: t,\n                animationData: e\n            }, i = t.attributes;\n            r.path = i.getNamedItem(\"data-animation-path\") ? i.getNamedItem(\"data-animation-path\").value : i.getNamedItem(\"data-bm-path\") ? i.getNamedItem(\"data-bm-path\").value : i.getNamedItem(\"bm-path\") ? i.getNamedItem(\"bm-path\").value : \"\", r.animType = i.getNamedItem(\"data-anim-type\") ? i.getNamedItem(\"data-anim-type\").value : i.getNamedItem(\"data-bm-type\") ? i.getNamedItem(\"data-bm-type\").value : i.getNamedItem(\"bm-type\") ? i.getNamedItem(\"bm-type\").value : i.getNamedItem(\"data-bm-renderer\") ? i.getNamedItem(\"data-bm-renderer\").value : i.getNamedItem(\"bm-renderer\") ? i.getNamedItem(\"bm-renderer\").value : \"canvas\";\n            var a = i.getNamedItem(\"data-anim-loop\") ? i.getNamedItem(\"data-anim-loop\").value : i.getNamedItem(\"data-bm-loop\") ? i.getNamedItem(\"data-bm-loop\").value : i.getNamedItem(\"bm-loop\") ? i.getNamedItem(\"bm-loop\").value : \"\";\n            \"false\" === a ? r.loop = !1 : \"true\" === a ? r.loop = !0 : \"\" !== a && (r.loop = parseInt(a, 10));\n            var s = i.getNamedItem(\"data-anim-autoplay\") ? i.getNamedItem(\"data-anim-autoplay\").value : i.getNamedItem(\"data-bm-autoplay\") ? i.getNamedItem(\"data-bm-autoplay\").value : !i.getNamedItem(\"bm-autoplay\") || i.getNamedItem(\"bm-autoplay\").value;\n            r.autoplay = \"false\" !== s, r.name = i.getNamedItem(\"data-name\") ? i.getNamedItem(\"data-name\").value : i.getNamedItem(\"data-bm-name\") ? i.getNamedItem(\"data-bm-name\").value : i.getNamedItem(\"bm-name\") ? i.getNamedItem(\"bm-name\").value : \"\", \"false\" === (i.getNamedItem(\"data-anim-prerender\") ? i.getNamedItem(\"data-anim-prerender\").value : i.getNamedItem(\"data-bm-prerender\") ? i.getNamedItem(\"data-bm-prerender\").value : i.getNamedItem(\"bm-prerender\") ? i.getNamedItem(\"bm-prerender\").value : \"\") && (r.prerender = !1), this.setParams(r);\n        }, AnimationItem.prototype.includeLayers = function(t) {\n            t.op > this.animationData.op && (this.animationData.op = t.op, this.totalFrames = Math.floor(t.op - this.animationData.ip));\n            var e, r, i = this.animationData.layers, a = i.length, s = t.layers, n = s.length;\n            for(r = 0; r < n; r += 1)for(e = 0; e < a;){\n                if (i[e].id === s[r].id) {\n                    i[e] = s[r];\n                    break;\n                }\n                e += 1;\n            }\n            if ((t.chars || t.fonts) && (this.renderer.globalData.fontManager.addChars(t.chars), this.renderer.globalData.fontManager.addFonts(t.fonts, this.renderer.globalData.defs)), t.assets) for(a = t.assets.length, e = 0; e < a; e += 1)this.animationData.assets.push(t.assets[e]);\n            this.animationData.__complete = !1, dataManager.completeAnimation(this.animationData, this.onSegmentComplete);\n        }, AnimationItem.prototype.onSegmentComplete = function(t) {\n            this.animationData = t;\n            var e = getExpressionsPlugin();\n            e && e.initExpressions(this), this.loadNextSegment();\n        }, AnimationItem.prototype.loadNextSegment = function() {\n            var t = this.animationData.segments;\n            if (!t || 0 === t.length || !this.autoloadSegments) return this.trigger(\"data_ready\"), void (this.timeCompleted = this.totalFrames);\n            var e = t.shift();\n            this.timeCompleted = e.time * this.frameRate;\n            var r = this.path + this.fileName + \"_\" + this.segmentPos + \".json\";\n            this.segmentPos += 1, dataManager.loadData(r, this.includeLayers.bind(this), (function() {\n                this.trigger(\"data_failed\");\n            }).bind(this));\n        }, AnimationItem.prototype.loadSegments = function() {\n            this.animationData.segments || (this.timeCompleted = this.totalFrames), this.loadNextSegment();\n        }, AnimationItem.prototype.imagesLoaded = function() {\n            this.trigger(\"loaded_images\"), this.checkLoaded();\n        }, AnimationItem.prototype.preloadImages = function() {\n            this.imagePreloader.setAssetsPath(this.assetsPath), this.imagePreloader.setPath(this.path), this.imagePreloader.loadAssets(this.animationData.assets, this.imagesLoaded.bind(this));\n        }, AnimationItem.prototype.configAnimation = function(t) {\n            if (this.renderer) try {\n                this.animationData = t, this.initialSegment ? (this.totalFrames = Math.floor(this.initialSegment[1] - this.initialSegment[0]), this.firstFrame = Math.round(this.initialSegment[0])) : (this.totalFrames = Math.floor(this.animationData.op - this.animationData.ip), this.firstFrame = Math.round(this.animationData.ip)), this.renderer.configAnimation(t), t.assets || (t.assets = []), this.assets = this.animationData.assets, this.frameRate = this.animationData.fr, this.frameMult = this.animationData.fr / 1e3, this.renderer.searchExtraCompositions(t.assets), this.markers = markerParser(t.markers || []), this.trigger(\"config_ready\"), this.preloadImages(), this.loadSegments(), this.updaFrameModifier(), this.waitForFontsLoaded(), this.isPaused && this.audioController.pause();\n            } catch (t) {\n                this.triggerConfigError(t);\n            }\n        }, AnimationItem.prototype.waitForFontsLoaded = function() {\n            this.renderer && (this.renderer.globalData.fontManager.isLoaded ? this.checkLoaded() : setTimeout(this.waitForFontsLoaded.bind(this), 20));\n        }, AnimationItem.prototype.checkLoaded = function() {\n            if (!this.isLoaded && this.renderer.globalData.fontManager.isLoaded && (this.imagePreloader.loadedImages() || \"canvas\" !== this.renderer.rendererType) && this.imagePreloader.loadedFootages()) {\n                this.isLoaded = !0;\n                var t = getExpressionsPlugin();\n                t && t.initExpressions(this), this.renderer.initItems(), setTimeout((function() {\n                    this.trigger(\"DOMLoaded\");\n                }).bind(this), 0), this.gotoFrame(), this.autoplay && this.play();\n            }\n        }, AnimationItem.prototype.resize = function(t, e) {\n            var r = \"number\" == typeof t ? t : void 0, i = \"number\" == typeof e ? e : void 0;\n            this.renderer.updateContainerSize(r, i);\n        }, AnimationItem.prototype.setSubframe = function(t) {\n            this.isSubframeEnabled = !!t;\n        }, AnimationItem.prototype.gotoFrame = function() {\n            this.currentFrame = this.isSubframeEnabled ? this.currentRawFrame : ~~this.currentRawFrame, this.timeCompleted !== this.totalFrames && this.currentFrame > this.timeCompleted && (this.currentFrame = this.timeCompleted), this.trigger(\"enterFrame\"), this.renderFrame(), this.trigger(\"drawnFrame\");\n        }, AnimationItem.prototype.renderFrame = function() {\n            if (!1 !== this.isLoaded && this.renderer) try {\n                this.renderer.renderFrame(this.currentFrame + this.firstFrame);\n            } catch (t) {\n                this.triggerRenderFrameError(t);\n            }\n        }, AnimationItem.prototype.play = function(t) {\n            t && this.name !== t || !0 === this.isPaused && (this.isPaused = !1, this.trigger(\"_pause\"), this.audioController.resume(), this._idle && (this._idle = !1, this.trigger(\"_active\")));\n        }, AnimationItem.prototype.pause = function(t) {\n            t && this.name !== t || !1 === this.isPaused && (this.isPaused = !0, this.trigger(\"_play\"), this._idle = !0, this.trigger(\"_idle\"), this.audioController.pause());\n        }, AnimationItem.prototype.togglePause = function(t) {\n            t && this.name !== t || (!0 === this.isPaused ? this.play() : this.pause());\n        }, AnimationItem.prototype.stop = function(t) {\n            t && this.name !== t || (this.pause(), this.playCount = 0, this._completedLoop = !1, this.setCurrentRawFrameValue(0));\n        }, AnimationItem.prototype.getMarkerData = function(t) {\n            for(var e, r = 0; r < this.markers.length; r += 1)if ((e = this.markers[r]).payload && e.payload.name === t) return e;\n            return null;\n        }, AnimationItem.prototype.goToAndStop = function(t, e, r) {\n            if (!r || this.name === r) {\n                var i = Number(t);\n                if (isNaN(i)) {\n                    var a = this.getMarkerData(t);\n                    a && this.goToAndStop(a.time, !0);\n                } else e ? this.setCurrentRawFrameValue(t) : this.setCurrentRawFrameValue(t * this.frameModifier);\n                this.pause();\n            }\n        }, AnimationItem.prototype.goToAndPlay = function(t, e, r) {\n            if (!r || this.name === r) {\n                var i = Number(t);\n                if (isNaN(i)) {\n                    var a = this.getMarkerData(t);\n                    a && (a.duration ? this.playSegments([\n                        a.time,\n                        a.time + a.duration\n                    ], !0) : this.goToAndStop(a.time, !0));\n                } else this.goToAndStop(i, e, r);\n                this.play();\n            }\n        }, AnimationItem.prototype.advanceTime = function(t) {\n            if (!0 !== this.isPaused && !1 !== this.isLoaded) {\n                var e = this.currentRawFrame + t * this.frameModifier, r = !1;\n                e >= this.totalFrames - 1 && this.frameModifier > 0 ? this.loop && this.playCount !== this.loop ? e >= this.totalFrames ? (this.playCount += 1, this.checkSegments(e % this.totalFrames) || (this.setCurrentRawFrameValue(e % this.totalFrames), this._completedLoop = !0, this.trigger(\"loopComplete\"))) : this.setCurrentRawFrameValue(e) : this.checkSegments(e > this.totalFrames ? e % this.totalFrames : 0) || (r = !0, e = this.totalFrames - 1) : e < 0 ? this.checkSegments(e % this.totalFrames) || (!this.loop || this.playCount-- <= 0 && !0 !== this.loop ? (r = !0, e = 0) : (this.setCurrentRawFrameValue(this.totalFrames + e % this.totalFrames), this._completedLoop ? this.trigger(\"loopComplete\") : this._completedLoop = !0)) : this.setCurrentRawFrameValue(e), r && (this.setCurrentRawFrameValue(e), this.pause(), this.trigger(\"complete\"));\n            }\n        }, AnimationItem.prototype.adjustSegment = function(t, e) {\n            this.playCount = 0, t[1] < t[0] ? (this.frameModifier > 0 && (this.playSpeed < 0 ? this.setSpeed(-this.playSpeed) : this.setDirection(-1)), this.totalFrames = t[0] - t[1], this.timeCompleted = this.totalFrames, this.firstFrame = t[1], this.setCurrentRawFrameValue(this.totalFrames - .001 - e)) : t[1] > t[0] && (this.frameModifier < 0 && (this.playSpeed < 0 ? this.setSpeed(-this.playSpeed) : this.setDirection(1)), this.totalFrames = t[1] - t[0], this.timeCompleted = this.totalFrames, this.firstFrame = t[0], this.setCurrentRawFrameValue(.001 + e)), this.trigger(\"segmentStart\");\n        }, AnimationItem.prototype.setSegment = function(t, e) {\n            var r = -1;\n            this.isPaused && (this.currentRawFrame + this.firstFrame < t ? r = t : this.currentRawFrame + this.firstFrame > e && (r = e - t)), this.firstFrame = t, this.totalFrames = e - t, this.timeCompleted = this.totalFrames, -1 !== r && this.goToAndStop(r, !0);\n        }, AnimationItem.prototype.playSegments = function(t, e) {\n            if (e && (this.segments.length = 0), \"object\" === _typeof$4(t[0])) {\n                var r, i = t.length;\n                for(r = 0; r < i; r += 1)this.segments.push(t[r]);\n            } else this.segments.push(t);\n            this.segments.length && e && this.adjustSegment(this.segments.shift(), 0), this.isPaused && this.play();\n        }, AnimationItem.prototype.resetSegments = function(t) {\n            this.segments.length = 0, this.segments.push([\n                this.animationData.ip,\n                this.animationData.op\n            ]), t && this.checkSegments(0);\n        }, AnimationItem.prototype.checkSegments = function(t) {\n            return !!this.segments.length && (this.adjustSegment(this.segments.shift(), t), !0);\n        }, AnimationItem.prototype.destroy = function(t) {\n            t && this.name !== t || !this.renderer || (this.renderer.destroy(), this.imagePreloader.destroy(), this.trigger(\"destroy\"), this._cbs = null, this.onEnterFrame = null, this.onLoopComplete = null, this.onComplete = null, this.onSegmentStart = null, this.onDestroy = null, this.renderer = null, this.renderer = null, this.imagePreloader = null, this.projectInterface = null);\n        }, AnimationItem.prototype.setCurrentRawFrameValue = function(t) {\n            this.currentRawFrame = t, this.gotoFrame();\n        }, AnimationItem.prototype.setSpeed = function(t) {\n            this.playSpeed = t, this.updaFrameModifier();\n        }, AnimationItem.prototype.setDirection = function(t) {\n            this.playDirection = t < 0 ? -1 : 1, this.updaFrameModifier();\n        }, AnimationItem.prototype.setLoop = function(t) {\n            this.loop = t;\n        }, AnimationItem.prototype.setVolume = function(t, e) {\n            e && this.name !== e || this.audioController.setVolume(t);\n        }, AnimationItem.prototype.getVolume = function() {\n            return this.audioController.getVolume();\n        }, AnimationItem.prototype.mute = function(t) {\n            t && this.name !== t || this.audioController.mute();\n        }, AnimationItem.prototype.unmute = function(t) {\n            t && this.name !== t || this.audioController.unmute();\n        }, AnimationItem.prototype.updaFrameModifier = function() {\n            this.frameModifier = this.frameMult * this.playSpeed * this.playDirection, this.audioController.setRate(this.playSpeed * this.playDirection);\n        }, AnimationItem.prototype.getPath = function() {\n            return this.path;\n        }, AnimationItem.prototype.getAssetsPath = function(t) {\n            var e = \"\";\n            if (t.e) e = t.p;\n            else if (this.assetsPath) {\n                var r = t.p;\n                -1 !== r.indexOf(\"images/\") && (r = r.split(\"/\")[1]), e = this.assetsPath + r;\n            } else e = this.path, e += t.u ? t.u : \"\", e += t.p;\n            return e;\n        }, AnimationItem.prototype.getAssetData = function(t) {\n            for(var e = 0, r = this.assets.length; e < r;){\n                if (t === this.assets[e].id) return this.assets[e];\n                e += 1;\n            }\n            return null;\n        }, AnimationItem.prototype.hide = function() {\n            this.renderer.hide();\n        }, AnimationItem.prototype.show = function() {\n            this.renderer.show();\n        }, AnimationItem.prototype.getDuration = function(t) {\n            return t ? this.totalFrames : this.totalFrames / this.frameRate;\n        }, AnimationItem.prototype.updateDocumentData = function(t, e, r) {\n            try {\n                this.renderer.getElementByPath(t).updateDocumentData(e, r);\n            } catch (t) {}\n        }, AnimationItem.prototype.trigger = function(t) {\n            if (this._cbs && this._cbs[t]) switch(t){\n                case \"enterFrame\":\n                    this.triggerEvent(t, new BMEnterFrameEvent(t, this.currentFrame, this.totalFrames, this.frameModifier));\n                    break;\n                case \"drawnFrame\":\n                    this.drawnFrameEvent.currentTime = this.currentFrame, this.drawnFrameEvent.totalTime = this.totalFrames, this.drawnFrameEvent.direction = this.frameModifier, this.triggerEvent(t, this.drawnFrameEvent);\n                    break;\n                case \"loopComplete\":\n                    this.triggerEvent(t, new BMCompleteLoopEvent(t, this.loop, this.playCount, this.frameMult));\n                    break;\n                case \"complete\":\n                    this.triggerEvent(t, new BMCompleteEvent(t, this.frameMult));\n                    break;\n                case \"segmentStart\":\n                    this.triggerEvent(t, new BMSegmentStartEvent(t, this.firstFrame, this.totalFrames));\n                    break;\n                case \"destroy\":\n                    this.triggerEvent(t, new BMDestroyEvent(t, this));\n                    break;\n                default:\n                    this.triggerEvent(t);\n            }\n            \"enterFrame\" === t && this.onEnterFrame && this.onEnterFrame.call(this, new BMEnterFrameEvent(t, this.currentFrame, this.totalFrames, this.frameMult)), \"loopComplete\" === t && this.onLoopComplete && this.onLoopComplete.call(this, new BMCompleteLoopEvent(t, this.loop, this.playCount, this.frameMult)), \"complete\" === t && this.onComplete && this.onComplete.call(this, new BMCompleteEvent(t, this.frameMult)), \"segmentStart\" === t && this.onSegmentStart && this.onSegmentStart.call(this, new BMSegmentStartEvent(t, this.firstFrame, this.totalFrames)), \"destroy\" === t && this.onDestroy && this.onDestroy.call(this, new BMDestroyEvent(t, this));\n        }, AnimationItem.prototype.triggerRenderFrameError = function(t) {\n            var e = new BMRenderFrameErrorEvent(t, this.currentFrame);\n            this.triggerEvent(\"error\", e), this.onError && this.onError.call(this, e);\n        }, AnimationItem.prototype.triggerConfigError = function(t) {\n            var e = new BMConfigErrorEvent(t, this.currentFrame);\n            this.triggerEvent(\"error\", e), this.onError && this.onError.call(this, e);\n        };\n        var animationManager = function() {\n            var t = {}, e = [], r = 0, i = 0, a = 0, s = !0, n = !1;\n            function o(t) {\n                for(var r = 0, a = t.target; r < i;)e[r].animation === a && (e.splice(r, 1), r -= 1, i -= 1, a.isPaused || p()), r += 1;\n            }\n            function h(t, r) {\n                if (!t) return null;\n                for(var a = 0; a < i;){\n                    if (e[a].elem === t && null !== e[a].elem) return e[a].animation;\n                    a += 1;\n                }\n                var s = new AnimationItem;\n                return f(s, t), s.setData(t, r), s;\n            }\n            function l() {\n                a += 1, d();\n            }\n            function p() {\n                a -= 1;\n            }\n            function f(t, r) {\n                t.addEventListener(\"destroy\", o), t.addEventListener(\"_active\", l), t.addEventListener(\"_idle\", p), e.push({\n                    elem: r,\n                    animation: t\n                }), i += 1;\n            }\n            function c(t) {\n                var o, h = t - r;\n                for(o = 0; o < i; o += 1)e[o].animation.advanceTime(h);\n                r = t, a && !n ? window.requestAnimationFrame(c) : s = !0;\n            }\n            function m(t) {\n                r = t, window.requestAnimationFrame(c);\n            }\n            function d() {\n                !n && a && s && (window.requestAnimationFrame(m), s = !1);\n            }\n            return t.registerAnimation = h, t.loadAnimation = function(t) {\n                var e = new AnimationItem;\n                return f(e, null), e.setParams(t), e;\n            }, t.setSpeed = function(t, r) {\n                var a;\n                for(a = 0; a < i; a += 1)e[a].animation.setSpeed(t, r);\n            }, t.setDirection = function(t, r) {\n                var a;\n                for(a = 0; a < i; a += 1)e[a].animation.setDirection(t, r);\n            }, t.play = function(t) {\n                var r;\n                for(r = 0; r < i; r += 1)e[r].animation.play(t);\n            }, t.pause = function(t) {\n                var r;\n                for(r = 0; r < i; r += 1)e[r].animation.pause(t);\n            }, t.stop = function(t) {\n                var r;\n                for(r = 0; r < i; r += 1)e[r].animation.stop(t);\n            }, t.togglePause = function(t) {\n                var r;\n                for(r = 0; r < i; r += 1)e[r].animation.togglePause(t);\n            }, t.searchAnimations = function(t, e, r) {\n                var i, a = [].concat([].slice.call(document.getElementsByClassName(\"lottie\")), [].slice.call(document.getElementsByClassName(\"bodymovin\"))), s = a.length;\n                for(i = 0; i < s; i += 1)r && a[i].setAttribute(\"data-bm-type\", r), h(a[i], t);\n                if (e && 0 === s) {\n                    r || (r = \"svg\");\n                    var n = document.getElementsByTagName(\"body\")[0];\n                    n.innerText = \"\";\n                    var o = createTag(\"div\");\n                    o.style.width = \"100%\", o.style.height = \"100%\", o.setAttribute(\"data-bm-type\", r), n.appendChild(o), h(o, t);\n                }\n            }, t.resize = function() {\n                var t;\n                for(t = 0; t < i; t += 1)e[t].animation.resize();\n            }, t.goToAndStop = function(t, r, a) {\n                var s;\n                for(s = 0; s < i; s += 1)e[s].animation.goToAndStop(t, r, a);\n            }, t.destroy = function(t) {\n                var r;\n                for(r = i - 1; r >= 0; r -= 1)e[r].animation.destroy(t);\n            }, t.freeze = function() {\n                n = !0;\n            }, t.unfreeze = function() {\n                n = !1, d();\n            }, t.setVolume = function(t, r) {\n                var a;\n                for(a = 0; a < i; a += 1)e[a].animation.setVolume(t, r);\n            }, t.mute = function(t) {\n                var r;\n                for(r = 0; r < i; r += 1)e[r].animation.mute(t);\n            }, t.unmute = function(t) {\n                var r;\n                for(r = 0; r < i; r += 1)e[r].animation.unmute(t);\n            }, t.getRegisteredAnimations = function() {\n                var t, r = e.length, i = [];\n                for(t = 0; t < r; t += 1)i.push(e[t].animation);\n                return i;\n            }, t;\n        }(), BezierFactory = function() {\n            var t = {\n                getBezierEasing: function(t, r, i, a, s) {\n                    var n = s || (\"bez_\" + t + \"_\" + r + \"_\" + i + \"_\" + a).replace(/\\./g, \"p\");\n                    if (e[n]) return e[n];\n                    var o = new h([\n                        t,\n                        r,\n                        i,\n                        a\n                    ]);\n                    return e[n] = o, o;\n                }\n            }, e = {};\n            var r = \"function\" == typeof Float32Array;\n            function i(t, e) {\n                return 1 - 3 * e + 3 * t;\n            }\n            function a(t, e) {\n                return 3 * e - 6 * t;\n            }\n            function s(t) {\n                return 3 * t;\n            }\n            function n(t, e, r) {\n                return ((i(e, r) * t + a(e, r)) * t + s(e)) * t;\n            }\n            function o(t, e, r) {\n                return 3 * i(e, r) * t * t + 2 * a(e, r) * t + s(e);\n            }\n            function h(t) {\n                this._p = t, this._mSampleValues = r ? new Float32Array(11) : new Array(11), this._precomputed = !1, this.get = this.get.bind(this);\n            }\n            return h.prototype = {\n                get: function(t) {\n                    var e = this._p[0], r = this._p[1], i = this._p[2], a = this._p[3];\n                    return this._precomputed || this._precompute(), e === r && i === a ? t : 0 === t ? 0 : 1 === t ? 1 : n(this._getTForX(t), r, a);\n                },\n                _precompute: function() {\n                    var t = this._p[0], e = this._p[1], r = this._p[2], i = this._p[3];\n                    this._precomputed = !0, t === e && r === i || this._calcSampleValues();\n                },\n                _calcSampleValues: function() {\n                    for(var t = this._p[0], e = this._p[2], r = 0; r < 11; ++r)this._mSampleValues[r] = n(.1 * r, t, e);\n                },\n                _getTForX: function(t) {\n                    for(var e = this._p[0], r = this._p[2], i = this._mSampleValues, a = 0, s = 1; 10 !== s && i[s] <= t; ++s)a += .1;\n                    var h = a + .1 * ((t - i[--s]) / (i[s + 1] - i[s])), l = o(h, e, r);\n                    return l >= .001 ? function(t, e, r, i) {\n                        for(var a = 0; a < 4; ++a){\n                            var s = o(e, r, i);\n                            if (0 === s) return e;\n                            e -= (n(e, r, i) - t) / s;\n                        }\n                        return e;\n                    }(t, h, e, r) : 0 === l ? h : function(t, e, r, i, a) {\n                        var s, o, h = 0;\n                        do {\n                            (s = n(o = e + (r - e) / 2, i, a) - t) > 0 ? r = o : e = o;\n                        }while (Math.abs(s) > 1e-7 && ++h < 10);\n                        return o;\n                    }(t, a, a + .1, e, r);\n                }\n            }, t;\n        }(), pooling = {\n            double: function(t) {\n                return t.concat(createSizedArray(t.length));\n            }\n        }, poolFactory = function(t, e, r) {\n            var i = 0, a = t, s = createSizedArray(a);\n            return {\n                newElement: function() {\n                    return i ? s[i -= 1] : e();\n                },\n                release: function(t) {\n                    i === a && (s = pooling.double(s), a *= 2), r && r(t), s[i] = t, i += 1;\n                }\n            };\n        }, bezierLengthPool = poolFactory(8, function() {\n            return {\n                addedLength: 0,\n                percents: createTypedArray(\"float32\", getDefaultCurveSegments()),\n                lengths: createTypedArray(\"float32\", getDefaultCurveSegments())\n            };\n        }), segmentsLengthPool = poolFactory(8, function() {\n            return {\n                lengths: [],\n                totalLength: 0\n            };\n        }, function(t) {\n            var e, r = t.lengths.length;\n            for(e = 0; e < r; e += 1)bezierLengthPool.release(t.lengths[e]);\n            t.lengths.length = 0;\n        });\n        function bezFunction() {\n            var t = Math;\n            function e(t, e, r, i, a, s) {\n                var n = t * i + e * a + r * s - a * i - s * t - r * e;\n                return n > -.001 && n < .001;\n            }\n            var r = function(t, e, r, i) {\n                var a, s, n, o, h, l, p = getDefaultCurveSegments(), f = 0, c = [], m = [], d = bezierLengthPool.newElement();\n                for(n = r.length, a = 0; a < p; a += 1){\n                    for(h = a / (p - 1), l = 0, s = 0; s < n; s += 1)o = bmPow(1 - h, 3) * t[s] + 3 * bmPow(1 - h, 2) * h * r[s] + 3 * (1 - h) * bmPow(h, 2) * i[s] + bmPow(h, 3) * e[s], c[s] = o, null !== m[s] && (l += bmPow(c[s] - m[s], 2)), m[s] = c[s];\n                    l && (f += l = bmSqrt(l)), d.percents[a] = h, d.lengths[a] = f;\n                }\n                return d.addedLength = f, d;\n            };\n            function i(t) {\n                this.segmentLength = 0, this.points = new Array(t);\n            }\n            function a(t, e) {\n                this.partialLength = t, this.point = e;\n            }\n            var s, n = (s = {}, function(t, r, n, o) {\n                var h = (t[0] + \"_\" + t[1] + \"_\" + r[0] + \"_\" + r[1] + \"_\" + n[0] + \"_\" + n[1] + \"_\" + o[0] + \"_\" + o[1]).replace(/\\./g, \"p\");\n                if (!s[h]) {\n                    var l, p, f, c, m, d, u, y = getDefaultCurveSegments(), g = 0, v = null;\n                    2 === t.length && (t[0] !== r[0] || t[1] !== r[1]) && e(t[0], t[1], r[0], r[1], t[0] + n[0], t[1] + n[1]) && e(t[0], t[1], r[0], r[1], r[0] + o[0], r[1] + o[1]) && (y = 2);\n                    var b = new i(y);\n                    for(f = n.length, l = 0; l < y; l += 1){\n                        for(u = createSizedArray(f), m = l / (y - 1), d = 0, p = 0; p < f; p += 1)c = bmPow(1 - m, 3) * t[p] + 3 * bmPow(1 - m, 2) * m * (t[p] + n[p]) + 3 * (1 - m) * bmPow(m, 2) * (r[p] + o[p]) + bmPow(m, 3) * r[p], u[p] = c, null !== v && (d += bmPow(u[p] - v[p], 2));\n                        g += d = bmSqrt(d), b.points[l] = new a(d, u), v = u;\n                    }\n                    b.segmentLength = g, s[h] = b;\n                }\n                return s[h];\n            });\n            function o(t, e) {\n                var r = e.percents, i = e.lengths, a = r.length, s = bmFloor((a - 1) * t), n = t * e.addedLength, o = 0;\n                if (s === a - 1 || 0 === s || n === i[s]) return r[s];\n                for(var h = i[s] > n ? -1 : 1, l = !0; l;)if (i[s] <= n && i[s + 1] > n ? (o = (n - i[s]) / (i[s + 1] - i[s]), l = !1) : s += h, s < 0 || s >= a - 1) {\n                    if (s === a - 1) return r[s];\n                    l = !1;\n                }\n                return r[s] + (r[s + 1] - r[s]) * o;\n            }\n            var h = createTypedArray(\"float32\", 8);\n            return {\n                getSegmentsLength: function(t) {\n                    var e, i = segmentsLengthPool.newElement(), a = t.c, s = t.v, n = t.o, o = t.i, h = t._length, l = i.lengths, p = 0;\n                    for(e = 0; e < h - 1; e += 1)l[e] = r(s[e], s[e + 1], n[e], o[e + 1]), p += l[e].addedLength;\n                    return a && h && (l[e] = r(s[e], s[0], n[e], o[0]), p += l[e].addedLength), i.totalLength = p, i;\n                },\n                getNewSegment: function(e, r, i, a, s, n, l) {\n                    s < 0 ? s = 0 : s > 1 && (s = 1);\n                    var p, f = o(s, l), c = o(n = n > 1 ? 1 : n, l), m = e.length, d = 1 - f, u = 1 - c, y = d * d * d, g = f * d * d * 3, v = f * f * d * 3, b = f * f * f, x = d * d * u, P = f * d * u + d * f * u + d * d * c, E = f * f * u + d * f * c + f * d * c, S = f * f * c, C = d * u * u, _ = f * u * u + d * c * u + d * u * c, A = f * c * u + d * c * c + f * u * c, k = f * c * c, w = u * u * u, T = c * u * u + u * c * u + u * u * c, M = c * c * u + u * c * c + c * u * c, D = c * c * c;\n                    for(p = 0; p < m; p += 1)h[4 * p] = t.round(1e3 * (y * e[p] + g * i[p] + v * a[p] + b * r[p])) / 1e3, h[4 * p + 1] = t.round(1e3 * (x * e[p] + P * i[p] + E * a[p] + S * r[p])) / 1e3, h[4 * p + 2] = t.round(1e3 * (C * e[p] + _ * i[p] + A * a[p] + k * r[p])) / 1e3, h[4 * p + 3] = t.round(1e3 * (w * e[p] + T * i[p] + M * a[p] + D * r[p])) / 1e3;\n                    return h;\n                },\n                getPointInSegment: function(e, r, i, a, s, n) {\n                    var h = o(s, n), l = 1 - h;\n                    return [\n                        t.round(1e3 * (l * l * l * e[0] + (h * l * l + l * h * l + l * l * h) * i[0] + (h * h * l + l * h * h + h * l * h) * a[0] + h * h * h * r[0])) / 1e3,\n                        t.round(1e3 * (l * l * l * e[1] + (h * l * l + l * h * l + l * l * h) * i[1] + (h * h * l + l * h * h + h * l * h) * a[1] + h * h * h * r[1])) / 1e3\n                    ];\n                },\n                buildBezierData: n,\n                pointOnLine2D: e,\n                pointOnLine3D: function(r, i, a, s, n, o, h, l, p) {\n                    if (0 === a && 0 === o && 0 === p) return e(r, i, s, n, h, l);\n                    var f, c = t.sqrt(t.pow(s - r, 2) + t.pow(n - i, 2) + t.pow(o - a, 2)), m = t.sqrt(t.pow(h - r, 2) + t.pow(l - i, 2) + t.pow(p - a, 2)), d = t.sqrt(t.pow(h - s, 2) + t.pow(l - n, 2) + t.pow(p - o, 2));\n                    return (f = c > m ? c > d ? c - m - d : d - m - c : d > m ? d - m - c : m - c - d) > -1e-4 && f < 1e-4;\n                }\n            };\n        }\n        var bez = bezFunction(), PropertyFactory = function() {\n            var t = initialDefaultFrame, e = Math.abs;\n            function r(t, e) {\n                var r, a = this.offsetTime;\n                \"multidimensional\" === this.propType && (r = createTypedArray(\"float32\", this.pv.length));\n                for(var s, n, o, h, l, p, f, c, m, d = e.lastIndex, u = d, y = this.keyframes.length - 1, g = !0; g;){\n                    if (s = this.keyframes[u], n = this.keyframes[u + 1], u === y - 1 && t >= n.t - a) {\n                        s.h && (s = n), d = 0;\n                        break;\n                    }\n                    if (n.t - a > t) {\n                        d = u;\n                        break;\n                    }\n                    u < y - 1 ? u += 1 : (d = 0, g = !1);\n                }\n                o = this.keyframesMetadata[u] || {};\n                var v, b = n.t - a, x = s.t - a;\n                if (s.to) {\n                    o.bezierData || (o.bezierData = bez.buildBezierData(s.s, n.s || s.e, s.to, s.ti));\n                    var P = o.bezierData;\n                    if (t >= b || t < x) {\n                        var E = t >= b ? P.points.length - 1 : 0;\n                        for(l = P.points[E].point.length, h = 0; h < l; h += 1)r[h] = P.points[E].point[h];\n                    } else {\n                        o.__fnct ? m = o.__fnct : (m = BezierFactory.getBezierEasing(s.o.x, s.o.y, s.i.x, s.i.y, s.n).get, o.__fnct = m), p = m((t - x) / (b - x));\n                        var S, C = P.segmentLength * p, _ = e.lastFrame < t && e._lastKeyframeIndex === u ? e._lastAddedLength : 0;\n                        for(c = e.lastFrame < t && e._lastKeyframeIndex === u ? e._lastPoint : 0, g = !0, f = P.points.length; g;){\n                            if (_ += P.points[c].partialLength, 0 === C || 0 === p || c === P.points.length - 1) {\n                                for(l = P.points[c].point.length, h = 0; h < l; h += 1)r[h] = P.points[c].point[h];\n                                break;\n                            }\n                            if (C >= _ && C < _ + P.points[c + 1].partialLength) {\n                                for(S = (C - _) / P.points[c + 1].partialLength, l = P.points[c].point.length, h = 0; h < l; h += 1)r[h] = P.points[c].point[h] + (P.points[c + 1].point[h] - P.points[c].point[h]) * S;\n                                break;\n                            }\n                            c < f - 1 ? c += 1 : g = !1;\n                        }\n                        e._lastPoint = c, e._lastAddedLength = _ - P.points[c].partialLength, e._lastKeyframeIndex = u;\n                    }\n                } else {\n                    var A, k, w, T, M;\n                    if (y = s.s.length, v = n.s || s.e, this.sh && 1 !== s.h) if (t >= b) r[0] = v[0], r[1] = v[1], r[2] = v[2];\n                    else if (t <= x) r[0] = s.s[0], r[1] = s.s[1], r[2] = s.s[2];\n                    else {\n                        !function(t, e) {\n                            var r = e[0], i = e[1], a = e[2], s = e[3], n = Math.atan2(2 * i * s - 2 * r * a, 1 - 2 * i * i - 2 * a * a), o = Math.asin(2 * r * i + 2 * a * s), h = Math.atan2(2 * r * s - 2 * i * a, 1 - 2 * r * r - 2 * a * a);\n                            t[0] = n / degToRads, t[1] = o / degToRads, t[2] = h / degToRads;\n                        }(r, function(t, e, r) {\n                            var i, a, s, n, o, h = [], l = t[0], p = t[1], f = t[2], c = t[3], m = e[0], d = e[1], u = e[2], y = e[3];\n                            (a = l * m + p * d + f * u + c * y) < 0 && (a = -a, m = -m, d = -d, u = -u, y = -y);\n                            1 - a > 1e-6 ? (i = Math.acos(a), s = Math.sin(i), n = Math.sin((1 - r) * i) / s, o = Math.sin(r * i) / s) : (n = 1 - r, o = r);\n                            return h[0] = n * l + o * m, h[1] = n * p + o * d, h[2] = n * f + o * u, h[3] = n * c + o * y, h;\n                        }(i(s.s), i(v), (t - x) / (b - x)));\n                    }\n                    else for(u = 0; u < y; u += 1)1 !== s.h && (t >= b ? p = 1 : t < x ? p = 0 : (s.o.x.constructor === Array ? (o.__fnct || (o.__fnct = []), o.__fnct[u] ? m = o.__fnct[u] : (A = void 0 === s.o.x[u] ? s.o.x[0] : s.o.x[u], k = void 0 === s.o.y[u] ? s.o.y[0] : s.o.y[u], w = void 0 === s.i.x[u] ? s.i.x[0] : s.i.x[u], T = void 0 === s.i.y[u] ? s.i.y[0] : s.i.y[u], m = BezierFactory.getBezierEasing(A, k, w, T).get, o.__fnct[u] = m)) : o.__fnct ? m = o.__fnct : (A = s.o.x, k = s.o.y, w = s.i.x, T = s.i.y, m = BezierFactory.getBezierEasing(A, k, w, T).get, s.keyframeMetadata = m), p = m((t - x) / (b - x)))), v = n.s || s.e, M = 1 === s.h ? s.s[u] : s.s[u] + (v[u] - s.s[u]) * p, \"multidimensional\" === this.propType ? r[u] = M : r = M;\n                }\n                return e.lastIndex = d, r;\n            }\n            function i(t) {\n                var e = t[0] * degToRads, r = t[1] * degToRads, i = t[2] * degToRads, a = Math.cos(e / 2), s = Math.cos(r / 2), n = Math.cos(i / 2), o = Math.sin(e / 2), h = Math.sin(r / 2), l = Math.sin(i / 2);\n                return [\n                    o * h * n + a * s * l,\n                    o * s * n + a * h * l,\n                    a * h * n - o * s * l,\n                    a * s * n - o * h * l\n                ];\n            }\n            function a() {\n                var e = this.comp.renderedFrame - this.offsetTime, r = this.keyframes[0].t - this.offsetTime, i = this.keyframes[this.keyframes.length - 1].t - this.offsetTime;\n                if (!(e === this._caching.lastFrame || this._caching.lastFrame !== t && (this._caching.lastFrame >= i && e >= i || this._caching.lastFrame < r && e < r))) {\n                    this._caching.lastFrame >= e && (this._caching._lastKeyframeIndex = -1, this._caching.lastIndex = 0);\n                    var a = this.interpolateValue(e, this._caching);\n                    this.pv = a;\n                }\n                return this._caching.lastFrame = e, this.pv;\n            }\n            function s(t) {\n                var r;\n                if (\"unidimensional\" === this.propType) r = t * this.mult, e(this.v - r) > 1e-5 && (this.v = r, this._mdf = !0);\n                else for(var i = 0, a = this.v.length; i < a;)r = t[i] * this.mult, e(this.v[i] - r) > 1e-5 && (this.v[i] = r, this._mdf = !0), i += 1;\n            }\n            function n() {\n                if (this.elem.globalData.frameId !== this.frameId && this.effectsSequence.length) if (this.lock) this.setVValue(this.pv);\n                else {\n                    var t;\n                    this.lock = !0, this._mdf = this._isFirstFrame;\n                    var e = this.effectsSequence.length, r = this.kf ? this.pv : this.data.k;\n                    for(t = 0; t < e; t += 1)r = this.effectsSequence[t](r);\n                    this.setVValue(r), this._isFirstFrame = !1, this.lock = !1, this.frameId = this.elem.globalData.frameId;\n                }\n            }\n            function o(t) {\n                this.effectsSequence.push(t), this.container.addDynamicProperty(this);\n            }\n            function h(t, e, r, i) {\n                this.propType = \"unidimensional\", this.mult = r || 1, this.data = e, this.v = r ? e.k * r : e.k, this.pv = e.k, this._mdf = !1, this.elem = t, this.container = i, this.comp = t.comp, this.k = !1, this.kf = !1, this.vel = 0, this.effectsSequence = [], this._isFirstFrame = !0, this.getValue = n, this.setVValue = s, this.addEffect = o;\n            }\n            function l(t, e, r, i) {\n                var a;\n                this.propType = \"multidimensional\", this.mult = r || 1, this.data = e, this._mdf = !1, this.elem = t, this.container = i, this.comp = t.comp, this.k = !1, this.kf = !1, this.frameId = -1;\n                var h = e.k.length;\n                for(this.v = createTypedArray(\"float32\", h), this.pv = createTypedArray(\"float32\", h), this.vel = createTypedArray(\"float32\", h), a = 0; a < h; a += 1)this.v[a] = e.k[a] * this.mult, this.pv[a] = e.k[a];\n                this._isFirstFrame = !0, this.effectsSequence = [], this.getValue = n, this.setVValue = s, this.addEffect = o;\n            }\n            function p(e, i, h, l) {\n                this.propType = \"unidimensional\", this.keyframes = i.k, this.keyframesMetadata = [], this.offsetTime = e.data.st, this.frameId = -1, this._caching = {\n                    lastFrame: t,\n                    lastIndex: 0,\n                    value: 0,\n                    _lastKeyframeIndex: -1\n                }, this.k = !0, this.kf = !0, this.data = i, this.mult = h || 1, this.elem = e, this.container = l, this.comp = e.comp, this.v = t, this.pv = t, this._isFirstFrame = !0, this.getValue = n, this.setVValue = s, this.interpolateValue = r, this.effectsSequence = [\n                    a.bind(this)\n                ], this.addEffect = o;\n            }\n            function f(e, i, h, l) {\n                var p;\n                this.propType = \"multidimensional\";\n                var f, c, m, d, u = i.k.length;\n                for(p = 0; p < u - 1; p += 1)i.k[p].to && i.k[p].s && i.k[p + 1] && i.k[p + 1].s && (f = i.k[p].s, c = i.k[p + 1].s, m = i.k[p].to, d = i.k[p].ti, (2 === f.length && (f[0] !== c[0] || f[1] !== c[1]) && bez.pointOnLine2D(f[0], f[1], c[0], c[1], f[0] + m[0], f[1] + m[1]) && bez.pointOnLine2D(f[0], f[1], c[0], c[1], c[0] + d[0], c[1] + d[1]) || 3 === f.length && (f[0] !== c[0] || f[1] !== c[1] || f[2] !== c[2]) && bez.pointOnLine3D(f[0], f[1], f[2], c[0], c[1], c[2], f[0] + m[0], f[1] + m[1], f[2] + m[2]) && bez.pointOnLine3D(f[0], f[1], f[2], c[0], c[1], c[2], c[0] + d[0], c[1] + d[1], c[2] + d[2])) && (i.k[p].to = null, i.k[p].ti = null), f[0] === c[0] && f[1] === c[1] && 0 === m[0] && 0 === m[1] && 0 === d[0] && 0 === d[1] && (2 === f.length || f[2] === c[2] && 0 === m[2] && 0 === d[2]) && (i.k[p].to = null, i.k[p].ti = null));\n                this.effectsSequence = [\n                    a.bind(this)\n                ], this.data = i, this.keyframes = i.k, this.keyframesMetadata = [], this.offsetTime = e.data.st, this.k = !0, this.kf = !0, this._isFirstFrame = !0, this.mult = h || 1, this.elem = e, this.container = l, this.comp = e.comp, this.getValue = n, this.setVValue = s, this.interpolateValue = r, this.frameId = -1;\n                var y = i.k[0].s.length;\n                for(this.v = createTypedArray(\"float32\", y), this.pv = createTypedArray(\"float32\", y), p = 0; p < y; p += 1)this.v[p] = t, this.pv[p] = t;\n                this._caching = {\n                    lastFrame: t,\n                    lastIndex: 0,\n                    value: createTypedArray(\"float32\", y)\n                }, this.addEffect = o;\n            }\n            return {\n                getProp: function(t, e, r, i, a) {\n                    var s;\n                    if (e.k.length) if (\"number\" == typeof e.k[0]) s = new l(t, e, i, a);\n                    else switch(r){\n                        case 0:\n                            s = new p(t, e, i, a);\n                            break;\n                        case 1:\n                            s = new f(t, e, i, a);\n                    }\n                    else s = new h(t, e, i, a);\n                    return s.effectsSequence.length && a.addDynamicProperty(s), s;\n                }\n            };\n        }();\n        function DynamicPropertyContainer() {}\n        DynamicPropertyContainer.prototype = {\n            addDynamicProperty: function(t) {\n                -1 === this.dynamicProperties.indexOf(t) && (this.dynamicProperties.push(t), this.container.addDynamicProperty(this), this._isAnimated = !0);\n            },\n            iterateDynamicProperties: function() {\n                var t;\n                this._mdf = !1;\n                var e = this.dynamicProperties.length;\n                for(t = 0; t < e; t += 1)this.dynamicProperties[t].getValue(), this.dynamicProperties[t]._mdf && (this._mdf = !0);\n            },\n            initDynamicPropertyContainer: function(t) {\n                this.container = t, this.dynamicProperties = [], this._mdf = !1, this._isAnimated = !1;\n            }\n        };\n        var pointPool = poolFactory(8, function() {\n            return createTypedArray(\"float32\", 2);\n        });\n        function ShapePath() {\n            this.c = !1, this._length = 0, this._maxLength = 8, this.v = createSizedArray(this._maxLength), this.o = createSizedArray(this._maxLength), this.i = createSizedArray(this._maxLength);\n        }\n        ShapePath.prototype.setPathData = function(t, e) {\n            this.c = t, this.setLength(e);\n            for(var r = 0; r < e;)this.v[r] = pointPool.newElement(), this.o[r] = pointPool.newElement(), this.i[r] = pointPool.newElement(), r += 1;\n        }, ShapePath.prototype.setLength = function(t) {\n            for(; this._maxLength < t;)this.doubleArrayLength();\n            this._length = t;\n        }, ShapePath.prototype.doubleArrayLength = function() {\n            this.v = this.v.concat(createSizedArray(this._maxLength)), this.i = this.i.concat(createSizedArray(this._maxLength)), this.o = this.o.concat(createSizedArray(this._maxLength)), this._maxLength *= 2;\n        }, ShapePath.prototype.setXYAt = function(t, e, r, i, a) {\n            var s;\n            switch(this._length = Math.max(this._length, i + 1), this._length >= this._maxLength && this.doubleArrayLength(), r){\n                case \"v\":\n                    s = this.v;\n                    break;\n                case \"i\":\n                    s = this.i;\n                    break;\n                case \"o\":\n                    s = this.o;\n                    break;\n                default:\n                    s = [];\n            }\n            (!s[i] || s[i] && !a) && (s[i] = pointPool.newElement()), s[i][0] = t, s[i][1] = e;\n        }, ShapePath.prototype.setTripleAt = function(t, e, r, i, a, s, n, o) {\n            this.setXYAt(t, e, \"v\", n, o), this.setXYAt(r, i, \"o\", n, o), this.setXYAt(a, s, \"i\", n, o);\n        }, ShapePath.prototype.reverse = function() {\n            var t = new ShapePath;\n            t.setPathData(this.c, this._length);\n            var e = this.v, r = this.o, i = this.i, a = 0;\n            this.c && (t.setTripleAt(e[0][0], e[0][1], i[0][0], i[0][1], r[0][0], r[0][1], 0, !1), a = 1);\n            var s, n = this._length - 1, o = this._length;\n            for(s = a; s < o; s += 1)t.setTripleAt(e[n][0], e[n][1], i[n][0], i[n][1], r[n][0], r[n][1], s, !1), n -= 1;\n            return t;\n        }, ShapePath.prototype.length = function() {\n            return this._length;\n        };\n        var shapePool = (factory = poolFactory(4, function() {\n            return new ShapePath;\n        }, function(t) {\n            var e, r = t._length;\n            for(e = 0; e < r; e += 1)pointPool.release(t.v[e]), pointPool.release(t.i[e]), pointPool.release(t.o[e]), t.v[e] = null, t.i[e] = null, t.o[e] = null;\n            t._length = 0, t.c = !1;\n        }), factory.clone = function(t) {\n            var e, r = factory.newElement(), i = void 0 === t._length ? t.v.length : t._length;\n            for(r.setLength(i), r.c = t.c, e = 0; e < i; e += 1)r.setTripleAt(t.v[e][0], t.v[e][1], t.o[e][0], t.o[e][1], t.i[e][0], t.i[e][1], e);\n            return r;\n        }, factory), factory;\n        function ShapeCollection() {\n            this._length = 0, this._maxLength = 4, this.shapes = createSizedArray(this._maxLength);\n        }\n        ShapeCollection.prototype.addShape = function(t) {\n            this._length === this._maxLength && (this.shapes = this.shapes.concat(createSizedArray(this._maxLength)), this._maxLength *= 2), this.shapes[this._length] = t, this._length += 1;\n        }, ShapeCollection.prototype.releaseShapes = function() {\n            var t;\n            for(t = 0; t < this._length; t += 1)shapePool.release(this.shapes[t]);\n            this._length = 0;\n        };\n        var shapeCollectionPool = (ob = {\n            newShapeCollection: function() {\n                return _length ? pool[_length -= 1] : new ShapeCollection;\n            },\n            release: function(t) {\n                var e, r = t._length;\n                for(e = 0; e < r; e += 1)shapePool.release(t.shapes[e]);\n                t._length = 0, _length === _maxLength && (pool = pooling.double(pool), _maxLength *= 2), pool[_length] = t, _length += 1;\n            }\n        }, _length = 0, _maxLength = 4, pool = createSizedArray(_maxLength), ob), ob, _length, _maxLength, pool, ShapePropertyFactory = function() {\n            function t(t, e, r) {\n                var i, a, s, n, o, h, l, p, f, c = r.lastIndex, m = this.keyframes;\n                if (t < m[0].t - this.offsetTime) i = m[0].s[0], s = !0, c = 0;\n                else if (t >= m[m.length - 1].t - this.offsetTime) i = m[m.length - 1].s ? m[m.length - 1].s[0] : m[m.length - 2].e[0], s = !0;\n                else {\n                    for(var d, u, y, g = c, v = m.length - 1, b = !0; b && (d = m[g], !((u = m[g + 1]).t - this.offsetTime > t));)g < v - 1 ? g += 1 : b = !1;\n                    if (y = this.keyframesMetadata[g] || {}, c = g, !(s = 1 === d.h)) {\n                        if (t >= u.t - this.offsetTime) p = 1;\n                        else if (t < d.t - this.offsetTime) p = 0;\n                        else {\n                            var x;\n                            y.__fnct ? x = y.__fnct : (x = BezierFactory.getBezierEasing(d.o.x, d.o.y, d.i.x, d.i.y).get, y.__fnct = x), p = x((t - (d.t - this.offsetTime)) / (u.t - this.offsetTime - (d.t - this.offsetTime)));\n                        }\n                        a = u.s ? u.s[0] : d.e[0];\n                    }\n                    i = d.s[0];\n                }\n                for(h = e._length, l = i.i[0].length, r.lastIndex = c, n = 0; n < h; n += 1)for(o = 0; o < l; o += 1)f = s ? i.i[n][o] : i.i[n][o] + (a.i[n][o] - i.i[n][o]) * p, e.i[n][o] = f, f = s ? i.o[n][o] : i.o[n][o] + (a.o[n][o] - i.o[n][o]) * p, e.o[n][o] = f, f = s ? i.v[n][o] : i.v[n][o] + (a.v[n][o] - i.v[n][o]) * p, e.v[n][o] = f;\n            }\n            function e() {\n                var t = this.comp.renderedFrame - this.offsetTime, e = this.keyframes[0].t - this.offsetTime, r = this.keyframes[this.keyframes.length - 1].t - this.offsetTime, i = this._caching.lastFrame;\n                return -999999 !== i && (i < e && t < e || i > r && t > r) || (this._caching.lastIndex = i < t ? this._caching.lastIndex : 0, this.interpolateShape(t, this.pv, this._caching)), this._caching.lastFrame = t, this.pv;\n            }\n            function r() {\n                this.paths = this.localShapeCollection;\n            }\n            function i(t) {\n                (function(t, e) {\n                    if (t._length !== e._length || t.c !== e.c) return !1;\n                    var r, i = t._length;\n                    for(r = 0; r < i; r += 1)if (t.v[r][0] !== e.v[r][0] || t.v[r][1] !== e.v[r][1] || t.o[r][0] !== e.o[r][0] || t.o[r][1] !== e.o[r][1] || t.i[r][0] !== e.i[r][0] || t.i[r][1] !== e.i[r][1]) return !1;\n                    return !0;\n                })(this.v, t) || (this.v = shapePool.clone(t), this.localShapeCollection.releaseShapes(), this.localShapeCollection.addShape(this.v), this._mdf = !0, this.paths = this.localShapeCollection);\n            }\n            function a() {\n                if (this.elem.globalData.frameId !== this.frameId) if (this.effectsSequence.length) if (this.lock) this.setVValue(this.pv);\n                else {\n                    var t, e;\n                    this.lock = !0, this._mdf = !1, t = this.kf ? this.pv : this.data.ks ? this.data.ks.k : this.data.pt.k;\n                    var r = this.effectsSequence.length;\n                    for(e = 0; e < r; e += 1)t = this.effectsSequence[e](t);\n                    this.setVValue(t), this.lock = !1, this.frameId = this.elem.globalData.frameId;\n                }\n                else this._mdf = !1;\n            }\n            function s(t, e, i) {\n                this.propType = \"shape\", this.comp = t.comp, this.container = t, this.elem = t, this.data = e, this.k = !1, this.kf = !1, this._mdf = !1;\n                var a = 3 === i ? e.pt.k : e.ks.k;\n                this.v = shapePool.clone(a), this.pv = shapePool.clone(this.v), this.localShapeCollection = shapeCollectionPool.newShapeCollection(), this.paths = this.localShapeCollection, this.paths.addShape(this.v), this.reset = r, this.effectsSequence = [];\n            }\n            function n(t) {\n                this.effectsSequence.push(t), this.container.addDynamicProperty(this);\n            }\n            function o(t, i, a) {\n                this.propType = \"shape\", this.comp = t.comp, this.elem = t, this.container = t, this.offsetTime = t.data.st, this.keyframes = 3 === a ? i.pt.k : i.ks.k, this.keyframesMetadata = [], this.k = !0, this.kf = !0;\n                var s = this.keyframes[0].s[0].i.length;\n                this.v = shapePool.newElement(), this.v.setPathData(this.keyframes[0].s[0].c, s), this.pv = shapePool.clone(this.v), this.localShapeCollection = shapeCollectionPool.newShapeCollection(), this.paths = this.localShapeCollection, this.paths.addShape(this.v), this.lastFrame = -999999, this.reset = r, this._caching = {\n                    lastFrame: -999999,\n                    lastIndex: 0\n                }, this.effectsSequence = [\n                    e.bind(this)\n                ];\n            }\n            s.prototype.interpolateShape = t, s.prototype.getValue = a, s.prototype.setVValue = i, s.prototype.addEffect = n, o.prototype.getValue = a, o.prototype.interpolateShape = t, o.prototype.setVValue = i, o.prototype.addEffect = n;\n            var h = function() {\n                var t = roundCorner;\n                function e(t, e) {\n                    this.v = shapePool.newElement(), this.v.setPathData(!0, 4), this.localShapeCollection = shapeCollectionPool.newShapeCollection(), this.paths = this.localShapeCollection, this.localShapeCollection.addShape(this.v), this.d = e.d, this.elem = t, this.comp = t.comp, this.frameId = -1, this.initDynamicPropertyContainer(t), this.p = PropertyFactory.getProp(t, e.p, 1, 0, this), this.s = PropertyFactory.getProp(t, e.s, 1, 0, this), this.dynamicProperties.length ? this.k = !0 : (this.k = !1, this.convertEllToPath());\n                }\n                return e.prototype = {\n                    reset: r,\n                    getValue: function() {\n                        this.elem.globalData.frameId !== this.frameId && (this.frameId = this.elem.globalData.frameId, this.iterateDynamicProperties(), this._mdf && this.convertEllToPath());\n                    },\n                    convertEllToPath: function() {\n                        var e = this.p.v[0], r = this.p.v[1], i = this.s.v[0] / 2, a = this.s.v[1] / 2, s = 3 !== this.d, n = this.v;\n                        n.v[0][0] = e, n.v[0][1] = r - a, n.v[1][0] = s ? e + i : e - i, n.v[1][1] = r, n.v[2][0] = e, n.v[2][1] = r + a, n.v[3][0] = s ? e - i : e + i, n.v[3][1] = r, n.i[0][0] = s ? e - i * t : e + i * t, n.i[0][1] = r - a, n.i[1][0] = s ? e + i : e - i, n.i[1][1] = r - a * t, n.i[2][0] = s ? e + i * t : e - i * t, n.i[2][1] = r + a, n.i[3][0] = s ? e - i : e + i, n.i[3][1] = r + a * t, n.o[0][0] = s ? e + i * t : e - i * t, n.o[0][1] = r - a, n.o[1][0] = s ? e + i : e - i, n.o[1][1] = r + a * t, n.o[2][0] = s ? e - i * t : e + i * t, n.o[2][1] = r + a, n.o[3][0] = s ? e - i : e + i, n.o[3][1] = r - a * t;\n                    }\n                }, extendPrototype([\n                    DynamicPropertyContainer\n                ], e), e;\n            }(), l = function() {\n                function t(t, e) {\n                    this.v = shapePool.newElement(), this.v.setPathData(!0, 0), this.elem = t, this.comp = t.comp, this.data = e, this.frameId = -1, this.d = e.d, this.initDynamicPropertyContainer(t), 1 === e.sy ? (this.ir = PropertyFactory.getProp(t, e.ir, 0, 0, this), this.is = PropertyFactory.getProp(t, e.is, 0, .01, this), this.convertToPath = this.convertStarToPath) : this.convertToPath = this.convertPolygonToPath, this.pt = PropertyFactory.getProp(t, e.pt, 0, 0, this), this.p = PropertyFactory.getProp(t, e.p, 1, 0, this), this.r = PropertyFactory.getProp(t, e.r, 0, degToRads, this), this.or = PropertyFactory.getProp(t, e.or, 0, 0, this), this.os = PropertyFactory.getProp(t, e.os, 0, .01, this), this.localShapeCollection = shapeCollectionPool.newShapeCollection(), this.localShapeCollection.addShape(this.v), this.paths = this.localShapeCollection, this.dynamicProperties.length ? this.k = !0 : (this.k = !1, this.convertToPath());\n                }\n                return t.prototype = {\n                    reset: r,\n                    getValue: function() {\n                        this.elem.globalData.frameId !== this.frameId && (this.frameId = this.elem.globalData.frameId, this.iterateDynamicProperties(), this._mdf && this.convertToPath());\n                    },\n                    convertStarToPath: function() {\n                        var t, e, r, i, a = 2 * Math.floor(this.pt.v), s = 2 * Math.PI / a, n = !0, o = this.or.v, h = this.ir.v, l = this.os.v, p = this.is.v, f = 2 * Math.PI * o / (2 * a), c = 2 * Math.PI * h / (2 * a), m = -Math.PI / 2;\n                        m += this.r.v;\n                        var d = 3 === this.data.d ? -1 : 1;\n                        for(this.v._length = 0, t = 0; t < a; t += 1){\n                            r = n ? l : p, i = n ? f : c;\n                            var u = (e = n ? o : h) * Math.cos(m), y = e * Math.sin(m), g = 0 === u && 0 === y ? 0 : y / Math.sqrt(u * u + y * y), v = 0 === u && 0 === y ? 0 : -u / Math.sqrt(u * u + y * y);\n                            u += +this.p.v[0], y += +this.p.v[1], this.v.setTripleAt(u, y, u - g * i * r * d, y - v * i * r * d, u + g * i * r * d, y + v * i * r * d, t, !0), n = !n, m += s * d;\n                        }\n                    },\n                    convertPolygonToPath: function() {\n                        var t, e = Math.floor(this.pt.v), r = 2 * Math.PI / e, i = this.or.v, a = this.os.v, s = 2 * Math.PI * i / (4 * e), n = .5 * -Math.PI, o = 3 === this.data.d ? -1 : 1;\n                        for(n += this.r.v, this.v._length = 0, t = 0; t < e; t += 1){\n                            var h = i * Math.cos(n), l = i * Math.sin(n), p = 0 === h && 0 === l ? 0 : l / Math.sqrt(h * h + l * l), f = 0 === h && 0 === l ? 0 : -h / Math.sqrt(h * h + l * l);\n                            h += +this.p.v[0], l += +this.p.v[1], this.v.setTripleAt(h, l, h - p * s * a * o, l - f * s * a * o, h + p * s * a * o, l + f * s * a * o, t, !0), n += r * o;\n                        }\n                        this.paths.length = 0, this.paths[0] = this.v;\n                    }\n                }, extendPrototype([\n                    DynamicPropertyContainer\n                ], t), t;\n            }(), p = function() {\n                function t(t, e) {\n                    this.v = shapePool.newElement(), this.v.c = !0, this.localShapeCollection = shapeCollectionPool.newShapeCollection(), this.localShapeCollection.addShape(this.v), this.paths = this.localShapeCollection, this.elem = t, this.comp = t.comp, this.frameId = -1, this.d = e.d, this.initDynamicPropertyContainer(t), this.p = PropertyFactory.getProp(t, e.p, 1, 0, this), this.s = PropertyFactory.getProp(t, e.s, 1, 0, this), this.r = PropertyFactory.getProp(t, e.r, 0, 0, this), this.dynamicProperties.length ? this.k = !0 : (this.k = !1, this.convertRectToPath());\n                }\n                return t.prototype = {\n                    convertRectToPath: function() {\n                        var t = this.p.v[0], e = this.p.v[1], r = this.s.v[0] / 2, i = this.s.v[1] / 2, a = bmMin(r, i, this.r.v), s = a * (1 - roundCorner);\n                        this.v._length = 0, 2 === this.d || 1 === this.d ? (this.v.setTripleAt(t + r, e - i + a, t + r, e - i + a, t + r, e - i + s, 0, !0), this.v.setTripleAt(t + r, e + i - a, t + r, e + i - s, t + r, e + i - a, 1, !0), 0 !== a ? (this.v.setTripleAt(t + r - a, e + i, t + r - a, e + i, t + r - s, e + i, 2, !0), this.v.setTripleAt(t - r + a, e + i, t - r + s, e + i, t - r + a, e + i, 3, !0), this.v.setTripleAt(t - r, e + i - a, t - r, e + i - a, t - r, e + i - s, 4, !0), this.v.setTripleAt(t - r, e - i + a, t - r, e - i + s, t - r, e - i + a, 5, !0), this.v.setTripleAt(t - r + a, e - i, t - r + a, e - i, t - r + s, e - i, 6, !0), this.v.setTripleAt(t + r - a, e - i, t + r - s, e - i, t + r - a, e - i, 7, !0)) : (this.v.setTripleAt(t - r, e + i, t - r + s, e + i, t - r, e + i, 2), this.v.setTripleAt(t - r, e - i, t - r, e - i + s, t - r, e - i, 3))) : (this.v.setTripleAt(t + r, e - i + a, t + r, e - i + s, t + r, e - i + a, 0, !0), 0 !== a ? (this.v.setTripleAt(t + r - a, e - i, t + r - a, e - i, t + r - s, e - i, 1, !0), this.v.setTripleAt(t - r + a, e - i, t - r + s, e - i, t - r + a, e - i, 2, !0), this.v.setTripleAt(t - r, e - i + a, t - r, e - i + a, t - r, e - i + s, 3, !0), this.v.setTripleAt(t - r, e + i - a, t - r, e + i - s, t - r, e + i - a, 4, !0), this.v.setTripleAt(t - r + a, e + i, t - r + a, e + i, t - r + s, e + i, 5, !0), this.v.setTripleAt(t + r - a, e + i, t + r - s, e + i, t + r - a, e + i, 6, !0), this.v.setTripleAt(t + r, e + i - a, t + r, e + i - a, t + r, e + i - s, 7, !0)) : (this.v.setTripleAt(t - r, e - i, t - r + s, e - i, t - r, e - i, 1, !0), this.v.setTripleAt(t - r, e + i, t - r, e + i - s, t - r, e + i, 2, !0), this.v.setTripleAt(t + r, e + i, t + r - s, e + i, t + r, e + i, 3, !0)));\n                    },\n                    getValue: function() {\n                        this.elem.globalData.frameId !== this.frameId && (this.frameId = this.elem.globalData.frameId, this.iterateDynamicProperties(), this._mdf && this.convertRectToPath());\n                    },\n                    reset: r\n                }, extendPrototype([\n                    DynamicPropertyContainer\n                ], t), t;\n            }();\n            var f = {\n                getShapeProp: function(t, e, r) {\n                    var i;\n                    return 3 === r || 4 === r ? i = (3 === r ? e.pt : e.ks).k.length ? new o(t, e, r) : new s(t, e, r) : 5 === r ? i = new p(t, e) : 6 === r ? i = new h(t, e) : 7 === r && (i = new l(t, e)), i.k && t.addDynamicProperty(i), i;\n                },\n                getConstructorFunction: function() {\n                    return s;\n                },\n                getKeyframedConstructorFunction: function() {\n                    return o;\n                }\n            };\n            return f;\n        }(), Matrix = function() {\n            var t = Math.cos, e = Math.sin, r = Math.tan, i = Math.round;\n            function a() {\n                return this.props[0] = 1, this.props[1] = 0, this.props[2] = 0, this.props[3] = 0, this.props[4] = 0, this.props[5] = 1, this.props[6] = 0, this.props[7] = 0, this.props[8] = 0, this.props[9] = 0, this.props[10] = 1, this.props[11] = 0, this.props[12] = 0, this.props[13] = 0, this.props[14] = 0, this.props[15] = 1, this;\n            }\n            function s(r) {\n                if (0 === r) return this;\n                var i = t(r), a = e(r);\n                return this._t(i, -a, 0, 0, a, i, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n            }\n            function n(r) {\n                if (0 === r) return this;\n                var i = t(r), a = e(r);\n                return this._t(1, 0, 0, 0, 0, i, -a, 0, 0, a, i, 0, 0, 0, 0, 1);\n            }\n            function o(r) {\n                if (0 === r) return this;\n                var i = t(r), a = e(r);\n                return this._t(i, 0, a, 0, 0, 1, 0, 0, -a, 0, i, 0, 0, 0, 0, 1);\n            }\n            function h(r) {\n                if (0 === r) return this;\n                var i = t(r), a = e(r);\n                return this._t(i, -a, 0, 0, a, i, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n            }\n            function l(t, e) {\n                return this._t(1, e, t, 1, 0, 0);\n            }\n            function p(t, e) {\n                return this.shear(r(t), r(e));\n            }\n            function f(i, a) {\n                var s = t(a), n = e(a);\n                return this._t(s, n, 0, 0, -n, s, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(1, 0, 0, 0, r(i), 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)._t(s, -n, 0, 0, n, s, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);\n            }\n            function c(t, e, r) {\n                return r || 0 === r || (r = 1), 1 === t && 1 === e && 1 === r ? this : this._t(t, 0, 0, 0, 0, e, 0, 0, 0, 0, r, 0, 0, 0, 0, 1);\n            }\n            function m(t, e, r, i, a, s, n, o, h, l, p, f, c, m, d, u) {\n                return this.props[0] = t, this.props[1] = e, this.props[2] = r, this.props[3] = i, this.props[4] = a, this.props[5] = s, this.props[6] = n, this.props[7] = o, this.props[8] = h, this.props[9] = l, this.props[10] = p, this.props[11] = f, this.props[12] = c, this.props[13] = m, this.props[14] = d, this.props[15] = u, this;\n            }\n            function d(t, e, r) {\n                return r = r || 0, 0 !== t || 0 !== e || 0 !== r ? this._t(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, t, e, r, 1) : this;\n            }\n            function u(t, e, r, i, a, s, n, o, h, l, p, f, c, m, d, u) {\n                var y = this.props;\n                if (1 === t && 0 === e && 0 === r && 0 === i && 0 === a && 1 === s && 0 === n && 0 === o && 0 === h && 0 === l && 1 === p && 0 === f) return y[12] = y[12] * t + y[15] * c, y[13] = y[13] * s + y[15] * m, y[14] = y[14] * p + y[15] * d, y[15] *= u, this._identityCalculated = !1, this;\n                var g = y[0], v = y[1], b = y[2], x = y[3], P = y[4], E = y[5], S = y[6], C = y[7], _ = y[8], A = y[9], k = y[10], w = y[11], T = y[12], M = y[13], D = y[14], F = y[15];\n                return y[0] = g * t + v * a + b * h + x * c, y[1] = g * e + v * s + b * l + x * m, y[2] = g * r + v * n + b * p + x * d, y[3] = g * i + v * o + b * f + x * u, y[4] = P * t + E * a + S * h + C * c, y[5] = P * e + E * s + S * l + C * m, y[6] = P * r + E * n + S * p + C * d, y[7] = P * i + E * o + S * f + C * u, y[8] = _ * t + A * a + k * h + w * c, y[9] = _ * e + A * s + k * l + w * m, y[10] = _ * r + A * n + k * p + w * d, y[11] = _ * i + A * o + k * f + w * u, y[12] = T * t + M * a + D * h + F * c, y[13] = T * e + M * s + D * l + F * m, y[14] = T * r + M * n + D * p + F * d, y[15] = T * i + M * o + D * f + F * u, this._identityCalculated = !1, this;\n            }\n            function y() {\n                return this._identityCalculated || (this._identity = !(1 !== this.props[0] || 0 !== this.props[1] || 0 !== this.props[2] || 0 !== this.props[3] || 0 !== this.props[4] || 1 !== this.props[5] || 0 !== this.props[6] || 0 !== this.props[7] || 0 !== this.props[8] || 0 !== this.props[9] || 1 !== this.props[10] || 0 !== this.props[11] || 0 !== this.props[12] || 0 !== this.props[13] || 0 !== this.props[14] || 1 !== this.props[15]), this._identityCalculated = !0), this._identity;\n            }\n            function g(t) {\n                for(var e = 0; e < 16;){\n                    if (t.props[e] !== this.props[e]) return !1;\n                    e += 1;\n                }\n                return !0;\n            }\n            function v(t) {\n                var e;\n                for(e = 0; e < 16; e += 1)t.props[e] = this.props[e];\n                return t;\n            }\n            function b(t) {\n                var e;\n                for(e = 0; e < 16; e += 1)this.props[e] = t[e];\n            }\n            function x(t, e, r) {\n                return {\n                    x: t * this.props[0] + e * this.props[4] + r * this.props[8] + this.props[12],\n                    y: t * this.props[1] + e * this.props[5] + r * this.props[9] + this.props[13],\n                    z: t * this.props[2] + e * this.props[6] + r * this.props[10] + this.props[14]\n                };\n            }\n            function P(t, e, r) {\n                return t * this.props[0] + e * this.props[4] + r * this.props[8] + this.props[12];\n            }\n            function E(t, e, r) {\n                return t * this.props[1] + e * this.props[5] + r * this.props[9] + this.props[13];\n            }\n            function S(t, e, r) {\n                return t * this.props[2] + e * this.props[6] + r * this.props[10] + this.props[14];\n            }\n            function C() {\n                var t = this.props[0] * this.props[5] - this.props[1] * this.props[4], e = this.props[5] / t, r = -this.props[1] / t, i = -this.props[4] / t, a = this.props[0] / t, s = (this.props[4] * this.props[13] - this.props[5] * this.props[12]) / t, n = -(this.props[0] * this.props[13] - this.props[1] * this.props[12]) / t, o = new Matrix;\n                return o.props[0] = e, o.props[1] = r, o.props[4] = i, o.props[5] = a, o.props[12] = s, o.props[13] = n, o;\n            }\n            function _(t) {\n                return this.getInverseMatrix().applyToPointArray(t[0], t[1], t[2] || 0);\n            }\n            function A(t) {\n                var e, r = t.length, i = [];\n                for(e = 0; e < r; e += 1)i[e] = _(t[e]);\n                return i;\n            }\n            function k(t, e, r) {\n                var i = createTypedArray(\"float32\", 6);\n                if (this.isIdentity()) i[0] = t[0], i[1] = t[1], i[2] = e[0], i[3] = e[1], i[4] = r[0], i[5] = r[1];\n                else {\n                    var a = this.props[0], s = this.props[1], n = this.props[4], o = this.props[5], h = this.props[12], l = this.props[13];\n                    i[0] = t[0] * a + t[1] * n + h, i[1] = t[0] * s + t[1] * o + l, i[2] = e[0] * a + e[1] * n + h, i[3] = e[0] * s + e[1] * o + l, i[4] = r[0] * a + r[1] * n + h, i[5] = r[0] * s + r[1] * o + l;\n                }\n                return i;\n            }\n            function w(t, e, r) {\n                return this.isIdentity() ? [\n                    t,\n                    e,\n                    r\n                ] : [\n                    t * this.props[0] + e * this.props[4] + r * this.props[8] + this.props[12],\n                    t * this.props[1] + e * this.props[5] + r * this.props[9] + this.props[13],\n                    t * this.props[2] + e * this.props[6] + r * this.props[10] + this.props[14]\n                ];\n            }\n            function T(t, e) {\n                if (this.isIdentity()) return t + \",\" + e;\n                var r = this.props;\n                return Math.round(100 * (t * r[0] + e * r[4] + r[12])) / 100 + \",\" + Math.round(100 * (t * r[1] + e * r[5] + r[13])) / 100;\n            }\n            function M() {\n                for(var t = 0, e = this.props, r = \"matrix3d(\"; t < 16;)r += i(1e4 * e[t]) / 1e4, r += 15 === t ? \")\" : \",\", t += 1;\n                return r;\n            }\n            function D(t) {\n                return t < 1e-6 && t > 0 || t > -1e-6 && t < 0 ? i(1e4 * t) / 1e4 : t;\n            }\n            function F() {\n                var t = this.props;\n                return \"matrix(\" + D(t[0]) + \",\" + D(t[1]) + \",\" + D(t[4]) + \",\" + D(t[5]) + \",\" + D(t[12]) + \",\" + D(t[13]) + \")\";\n            }\n            return function() {\n                this.reset = a, this.rotate = s, this.rotateX = n, this.rotateY = o, this.rotateZ = h, this.skew = p, this.skewFromAxis = f, this.shear = l, this.scale = c, this.setTransform = m, this.translate = d, this.transform = u, this.applyToPoint = x, this.applyToX = P, this.applyToY = E, this.applyToZ = S, this.applyToPointArray = w, this.applyToTriplePoints = k, this.applyToPointStringified = T, this.toCSS = M, this.to2dCSS = F, this.clone = v, this.cloneFromProps = b, this.equals = g, this.inversePoints = A, this.inversePoint = _, this.getInverseMatrix = C, this._t = this.transform, this.isIdentity = y, this._identity = !0, this._identityCalculated = !1, this.props = createTypedArray(\"float32\", 16), this.reset();\n            };\n        }();\n        function _typeof$3(t) {\n            return (_typeof$3 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(t) {\n                return typeof t;\n            } : function(t) {\n                return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n            })(t);\n        }\n        var lottie = {}, standalone = \"__[STANDALONE]__\", animationData = \"__[ANIMATIONDATA]__\", renderer = \"\";\n        function setLocation(t) {\n            setLocationHref(t);\n        }\n        function searchAnimations() {\n            !0 === standalone ? animationManager.searchAnimations(animationData, standalone, renderer) : animationManager.searchAnimations();\n        }\n        function setSubframeRendering(t) {\n            setSubframeEnabled(t);\n        }\n        function setPrefix(t) {\n            setIdPrefix(t);\n        }\n        function loadAnimation(t) {\n            return !0 === standalone && (t.animationData = JSON.parse(animationData)), animationManager.loadAnimation(t);\n        }\n        function setQuality(t) {\n            if (\"string\" == typeof t) switch(t){\n                case \"high\":\n                    setDefaultCurveSegments(200);\n                    break;\n                default:\n                case \"medium\":\n                    setDefaultCurveSegments(50);\n                    break;\n                case \"low\":\n                    setDefaultCurveSegments(10);\n            }\n            else !isNaN(t) && t > 1 && setDefaultCurveSegments(t);\n            getDefaultCurveSegments() >= 50 ? roundValues(!1) : roundValues(!0);\n        }\n        function inBrowser() {\n            return \"undefined\" != typeof navigator;\n        }\n        function installPlugin(t, e) {\n            \"expressions\" === t && setExpressionsPlugin(e);\n        }\n        function getFactory(t) {\n            switch(t){\n                case \"propertyFactory\":\n                    return PropertyFactory;\n                case \"shapePropertyFactory\":\n                    return ShapePropertyFactory;\n                case \"matrix\":\n                    return Matrix;\n                default:\n                    return null;\n            }\n        }\n        function checkReady() {\n            \"complete\" === document.readyState && (clearInterval(readyStateCheckInterval), searchAnimations());\n        }\n        function getQueryVariable(t) {\n            for(var e = queryString.split(\"&\"), r = 0; r < e.length; r += 1){\n                var i = e[r].split(\"=\");\n                if (decodeURIComponent(i[0]) == t) return decodeURIComponent(i[1]);\n            }\n            return null;\n        }\n        lottie.play = animationManager.play, lottie.pause = animationManager.pause, lottie.setLocationHref = setLocation, lottie.togglePause = animationManager.togglePause, lottie.setSpeed = animationManager.setSpeed, lottie.setDirection = animationManager.setDirection, lottie.stop = animationManager.stop, lottie.searchAnimations = searchAnimations, lottie.registerAnimation = animationManager.registerAnimation, lottie.loadAnimation = loadAnimation, lottie.setSubframeRendering = setSubframeRendering, lottie.resize = animationManager.resize, lottie.goToAndStop = animationManager.goToAndStop, lottie.destroy = animationManager.destroy, lottie.setQuality = setQuality, lottie.inBrowser = inBrowser, lottie.installPlugin = installPlugin, lottie.freeze = animationManager.freeze, lottie.unfreeze = animationManager.unfreeze, lottie.setVolume = animationManager.setVolume, lottie.mute = animationManager.mute, lottie.unmute = animationManager.unmute, lottie.getRegisteredAnimations = animationManager.getRegisteredAnimations, lottie.useWebWorker = setWebWorker, lottie.setIDPrefix = setPrefix, lottie.__getFactory = getFactory, lottie.version = \"5.10.2\";\n        var queryString = \"\";\n        if (standalone) {\n            var scripts = document.getElementsByTagName(\"script\"), index = scripts.length - 1, myScript = scripts[index] || {\n                src: \"\"\n            };\n            queryString = myScript.src ? myScript.src.replace(/^[^\\?]+\\??/, \"\") : \"\", renderer = getQueryVariable(\"renderer\");\n        }\n        var readyStateCheckInterval = setInterval(checkReady, 100);\n        try {\n            \"object\" !== _typeof$3(exports) && (window.bodymovin = lottie);\n        } catch (t) {}\n        var ShapeModifiers = function() {\n            var t = {}, e = {};\n            return t.registerModifier = function(t, r) {\n                e[t] || (e[t] = r);\n            }, t.getModifier = function(t, r, i) {\n                return new e[t](r, i);\n            }, t;\n        }();\n        function ShapeModifier() {}\n        function TrimModifier() {}\n        function PuckerAndBloatModifier() {}\n        ShapeModifier.prototype.initModifierProperties = function() {}, ShapeModifier.prototype.addShapeToModifier = function() {}, ShapeModifier.prototype.addShape = function(t) {\n            if (!this.closed) {\n                t.sh.container.addDynamicProperty(t.sh);\n                var e = {\n                    shape: t.sh,\n                    data: t,\n                    localShapeCollection: shapeCollectionPool.newShapeCollection()\n                };\n                this.shapes.push(e), this.addShapeToModifier(e), this._isAnimated && t.setAsAnimated();\n            }\n        }, ShapeModifier.prototype.init = function(t, e) {\n            this.shapes = [], this.elem = t, this.initDynamicPropertyContainer(t), this.initModifierProperties(t, e), this.frameId = initialDefaultFrame, this.closed = !1, this.k = !1, this.dynamicProperties.length ? this.k = !0 : this.getValue(!0);\n        }, ShapeModifier.prototype.processKeys = function() {\n            this.elem.globalData.frameId !== this.frameId && (this.frameId = this.elem.globalData.frameId, this.iterateDynamicProperties());\n        }, extendPrototype([\n            DynamicPropertyContainer\n        ], ShapeModifier), extendPrototype([\n            ShapeModifier\n        ], TrimModifier), TrimModifier.prototype.initModifierProperties = function(t, e) {\n            this.s = PropertyFactory.getProp(t, e.s, 0, .01, this), this.e = PropertyFactory.getProp(t, e.e, 0, .01, this), this.o = PropertyFactory.getProp(t, e.o, 0, 0, this), this.sValue = 0, this.eValue = 0, this.getValue = this.processKeys, this.m = e.m, this._isAnimated = !!this.s.effectsSequence.length || !!this.e.effectsSequence.length || !!this.o.effectsSequence.length;\n        }, TrimModifier.prototype.addShapeToModifier = function(t) {\n            t.pathsData = [];\n        }, TrimModifier.prototype.calculateShapeEdges = function(t, e, r, i, a) {\n            var s = [];\n            e <= 1 ? s.push({\n                s: t,\n                e: e\n            }) : t >= 1 ? s.push({\n                s: t - 1,\n                e: e - 1\n            }) : (s.push({\n                s: t,\n                e: 1\n            }), s.push({\n                s: 0,\n                e: e - 1\n            }));\n            var n, o, h = [], l = s.length;\n            for(n = 0; n < l; n += 1){\n                var p, f;\n                if (!((o = s[n]).e * a < i || o.s * a > i + r)) p = o.s * a <= i ? 0 : (o.s * a - i) / r, f = o.e * a >= i + r ? 1 : (o.e * a - i) / r, h.push([\n                    p,\n                    f\n                ]);\n            }\n            return h.length || h.push([\n                0,\n                0\n            ]), h;\n        }, TrimModifier.prototype.releasePathsData = function(t) {\n            var e, r = t.length;\n            for(e = 0; e < r; e += 1)segmentsLengthPool.release(t[e]);\n            return t.length = 0, t;\n        }, TrimModifier.prototype.processShapes = function(t) {\n            var e, r, i, a;\n            if (this._mdf || t) {\n                var s = this.o.v % 360 / 360;\n                if (s < 0 && (s += 1), (e = this.s.v > 1 ? 1 + s : this.s.v < 0 ? 0 + s : this.s.v + s) > (r = this.e.v > 1 ? 1 + s : this.e.v < 0 ? 0 + s : this.e.v + s)) {\n                    var n = e;\n                    e = r, r = n;\n                }\n                e = 1e-4 * Math.round(1e4 * e), r = 1e-4 * Math.round(1e4 * r), this.sValue = e, this.eValue = r;\n            } else e = this.sValue, r = this.eValue;\n            var o, h, l, p, f, c = this.shapes.length, m = 0;\n            if (r === e) for(a = 0; a < c; a += 1)this.shapes[a].localShapeCollection.releaseShapes(), this.shapes[a].shape._mdf = !0, this.shapes[a].shape.paths = this.shapes[a].localShapeCollection, this._mdf && (this.shapes[a].pathsData.length = 0);\n            else if (1 === r && 0 === e || 0 === r && 1 === e) {\n                if (this._mdf) for(a = 0; a < c; a += 1)this.shapes[a].pathsData.length = 0, this.shapes[a].shape._mdf = !0;\n            } else {\n                var d, u, y = [];\n                for(a = 0; a < c; a += 1)if ((d = this.shapes[a]).shape._mdf || this._mdf || t || 2 === this.m) {\n                    if (h = (i = d.shape.paths)._length, f = 0, !d.shape._mdf && d.pathsData.length) f = d.totalShapeLength;\n                    else {\n                        for(l = this.releasePathsData(d.pathsData), o = 0; o < h; o += 1)p = bez.getSegmentsLength(i.shapes[o]), l.push(p), f += p.totalLength;\n                        d.totalShapeLength = f, d.pathsData = l;\n                    }\n                    m += f, d.shape._mdf = !0;\n                } else d.shape.paths = d.localShapeCollection;\n                var g, v = e, b = r, x = 0;\n                for(a = c - 1; a >= 0; a -= 1)if ((d = this.shapes[a]).shape._mdf) {\n                    for((u = d.localShapeCollection).releaseShapes(), 2 === this.m && c > 1 ? (g = this.calculateShapeEdges(e, r, d.totalShapeLength, x, m), x += d.totalShapeLength) : g = [\n                        [\n                            v,\n                            b\n                        ]\n                    ], h = g.length, o = 0; o < h; o += 1){\n                        v = g[o][0], b = g[o][1], y.length = 0, b <= 1 ? y.push({\n                            s: d.totalShapeLength * v,\n                            e: d.totalShapeLength * b\n                        }) : v >= 1 ? y.push({\n                            s: d.totalShapeLength * (v - 1),\n                            e: d.totalShapeLength * (b - 1)\n                        }) : (y.push({\n                            s: d.totalShapeLength * v,\n                            e: d.totalShapeLength\n                        }), y.push({\n                            s: 0,\n                            e: d.totalShapeLength * (b - 1)\n                        }));\n                        var P = this.addShapes(d, y[0]);\n                        if (y[0].s !== y[0].e) {\n                            if (y.length > 1) if (d.shape.paths.shapes[d.shape.paths._length - 1].c) {\n                                var E = P.pop();\n                                this.addPaths(P, u), P = this.addShapes(d, y[1], E);\n                            } else this.addPaths(P, u), P = this.addShapes(d, y[1]);\n                            this.addPaths(P, u);\n                        }\n                    }\n                    d.shape.paths = u;\n                }\n            }\n        }, TrimModifier.prototype.addPaths = function(t, e) {\n            var r, i = t.length;\n            for(r = 0; r < i; r += 1)e.addShape(t[r]);\n        }, TrimModifier.prototype.addSegment = function(t, e, r, i, a, s, n) {\n            a.setXYAt(e[0], e[1], \"o\", s), a.setXYAt(r[0], r[1], \"i\", s + 1), n && a.setXYAt(t[0], t[1], \"v\", s), a.setXYAt(i[0], i[1], \"v\", s + 1);\n        }, TrimModifier.prototype.addSegmentFromArray = function(t, e, r, i) {\n            e.setXYAt(t[1], t[5], \"o\", r), e.setXYAt(t[2], t[6], \"i\", r + 1), i && e.setXYAt(t[0], t[4], \"v\", r), e.setXYAt(t[3], t[7], \"v\", r + 1);\n        }, TrimModifier.prototype.addShapes = function(t, e, r) {\n            var i, a, s, n, o, h, l, p, f = t.pathsData, c = t.shape.paths.shapes, m = t.shape.paths._length, d = 0, u = [], y = !0;\n            for(r ? (o = r._length, p = r._length) : (r = shapePool.newElement(), o = 0, p = 0), u.push(r), i = 0; i < m; i += 1){\n                for(h = f[i].lengths, r.c = c[i].c, s = c[i].c ? h.length : h.length + 1, a = 1; a < s; a += 1)if (d + (n = h[a - 1]).addedLength < e.s) d += n.addedLength, r.c = !1;\n                else {\n                    if (d > e.e) {\n                        r.c = !1;\n                        break;\n                    }\n                    e.s <= d && e.e >= d + n.addedLength ? (this.addSegment(c[i].v[a - 1], c[i].o[a - 1], c[i].i[a], c[i].v[a], r, o, y), y = !1) : (l = bez.getNewSegment(c[i].v[a - 1], c[i].v[a], c[i].o[a - 1], c[i].i[a], (e.s - d) / n.addedLength, (e.e - d) / n.addedLength, h[a - 1]), this.addSegmentFromArray(l, r, o, y), y = !1, r.c = !1), d += n.addedLength, o += 1;\n                }\n                if (c[i].c && h.length) {\n                    if (n = h[a - 1], d <= e.e) {\n                        var g = h[a - 1].addedLength;\n                        e.s <= d && e.e >= d + g ? (this.addSegment(c[i].v[a - 1], c[i].o[a - 1], c[i].i[0], c[i].v[0], r, o, y), y = !1) : (l = bez.getNewSegment(c[i].v[a - 1], c[i].v[0], c[i].o[a - 1], c[i].i[0], (e.s - d) / g, (e.e - d) / g, h[a - 1]), this.addSegmentFromArray(l, r, o, y), y = !1, r.c = !1);\n                    } else r.c = !1;\n                    d += n.addedLength, o += 1;\n                }\n                if (r._length && (r.setXYAt(r.v[p][0], r.v[p][1], \"i\", p), r.setXYAt(r.v[r._length - 1][0], r.v[r._length - 1][1], \"o\", r._length - 1)), d > e.e) break;\n                i < m - 1 && (r = shapePool.newElement(), y = !0, u.push(r), o = 0);\n            }\n            return u;\n        }, extendPrototype([\n            ShapeModifier\n        ], PuckerAndBloatModifier), PuckerAndBloatModifier.prototype.initModifierProperties = function(t, e) {\n            this.getValue = this.processKeys, this.amount = PropertyFactory.getProp(t, e.a, 0, null, this), this._isAnimated = !!this.amount.effectsSequence.length;\n        }, PuckerAndBloatModifier.prototype.processPath = function(t, e) {\n            var r = e / 100, i = [\n                0,\n                0\n            ], a = t._length, s = 0;\n            for(s = 0; s < a; s += 1)i[0] += t.v[s][0], i[1] += t.v[s][1];\n            i[0] /= a, i[1] /= a;\n            var n, o, h, l, p, f, c = shapePool.newElement();\n            for(c.c = t.c, s = 0; s < a; s += 1)n = t.v[s][0] + (i[0] - t.v[s][0]) * r, o = t.v[s][1] + (i[1] - t.v[s][1]) * r, h = t.o[s][0] + (i[0] - t.o[s][0]) * -r, l = t.o[s][1] + (i[1] - t.o[s][1]) * -r, p = t.i[s][0] + (i[0] - t.i[s][0]) * -r, f = t.i[s][1] + (i[1] - t.i[s][1]) * -r, c.setTripleAt(n, o, h, l, p, f, s);\n            return c;\n        }, PuckerAndBloatModifier.prototype.processShapes = function(t) {\n            var e, r, i, a, s, n, o = this.shapes.length, h = this.amount.v;\n            if (0 !== h) for(r = 0; r < o; r += 1){\n                if (n = (s = this.shapes[r]).localShapeCollection, s.shape._mdf || this._mdf || t) for(n.releaseShapes(), s.shape._mdf = !0, e = s.shape.paths.shapes, a = s.shape.paths._length, i = 0; i < a; i += 1)n.addShape(this.processPath(e[i], h));\n                s.shape.paths = s.localShapeCollection;\n            }\n            this.dynamicProperties.length || (this._mdf = !1);\n        };\n        var TransformPropertyFactory = function() {\n            var t = [\n                0,\n                0\n            ];\n            function e(t, e, r) {\n                if (this.elem = t, this.frameId = -1, this.propType = \"transform\", this.data = e, this.v = new Matrix, this.pre = new Matrix, this.appliedTransformations = 0, this.initDynamicPropertyContainer(r || t), e.p && e.p.s ? (this.px = PropertyFactory.getProp(t, e.p.x, 0, 0, this), this.py = PropertyFactory.getProp(t, e.p.y, 0, 0, this), e.p.z && (this.pz = PropertyFactory.getProp(t, e.p.z, 0, 0, this))) : this.p = PropertyFactory.getProp(t, e.p || {\n                    k: [\n                        0,\n                        0,\n                        0\n                    ]\n                }, 1, 0, this), e.rx) {\n                    if (this.rx = PropertyFactory.getProp(t, e.rx, 0, degToRads, this), this.ry = PropertyFactory.getProp(t, e.ry, 0, degToRads, this), this.rz = PropertyFactory.getProp(t, e.rz, 0, degToRads, this), e.or.k[0].ti) {\n                        var i, a = e.or.k.length;\n                        for(i = 0; i < a; i += 1)e.or.k[i].to = null, e.or.k[i].ti = null;\n                    }\n                    this.or = PropertyFactory.getProp(t, e.or, 1, degToRads, this), this.or.sh = !0;\n                } else this.r = PropertyFactory.getProp(t, e.r || {\n                    k: 0\n                }, 0, degToRads, this);\n                e.sk && (this.sk = PropertyFactory.getProp(t, e.sk, 0, degToRads, this), this.sa = PropertyFactory.getProp(t, e.sa, 0, degToRads, this)), this.a = PropertyFactory.getProp(t, e.a || {\n                    k: [\n                        0,\n                        0,\n                        0\n                    ]\n                }, 1, 0, this), this.s = PropertyFactory.getProp(t, e.s || {\n                    k: [\n                        100,\n                        100,\n                        100\n                    ]\n                }, 1, .01, this), e.o ? this.o = PropertyFactory.getProp(t, e.o, 0, .01, t) : this.o = {\n                    _mdf: !1,\n                    v: 1\n                }, this._isDirty = !0, this.dynamicProperties.length || this.getValue(!0);\n            }\n            return e.prototype = {\n                applyToMatrix: function(t) {\n                    var e = this._mdf;\n                    this.iterateDynamicProperties(), this._mdf = this._mdf || e, this.a && t.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]), this.s && t.scale(this.s.v[0], this.s.v[1], this.s.v[2]), this.sk && t.skewFromAxis(-this.sk.v, this.sa.v), this.r ? t.rotate(-this.r.v) : t.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]), this.data.p.s ? this.data.p.z ? t.translate(this.px.v, this.py.v, -this.pz.v) : t.translate(this.px.v, this.py.v, 0) : t.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);\n                },\n                getValue: function(e) {\n                    if (this.elem.globalData.frameId !== this.frameId) {\n                        if (this._isDirty && (this.precalculateMatrix(), this._isDirty = !1), this.iterateDynamicProperties(), this._mdf || e) {\n                            var r;\n                            if (this.v.cloneFromProps(this.pre.props), this.appliedTransformations < 1 && this.v.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]), this.appliedTransformations < 2 && this.v.scale(this.s.v[0], this.s.v[1], this.s.v[2]), this.sk && this.appliedTransformations < 3 && this.v.skewFromAxis(-this.sk.v, this.sa.v), this.r && this.appliedTransformations < 4 ? this.v.rotate(-this.r.v) : !this.r && this.appliedTransformations < 4 && this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]), this.autoOriented) {\n                                var i, a;\n                                if (r = this.elem.globalData.frameRate, this.p && this.p.keyframes && this.p.getValueAtTime) this.p._caching.lastFrame + this.p.offsetTime <= this.p.keyframes[0].t ? (i = this.p.getValueAtTime((this.p.keyframes[0].t + .01) / r, 0), a = this.p.getValueAtTime(this.p.keyframes[0].t / r, 0)) : this.p._caching.lastFrame + this.p.offsetTime >= this.p.keyframes[this.p.keyframes.length - 1].t ? (i = this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length - 1].t / r, 0), a = this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length - 1].t - .05) / r, 0)) : (i = this.p.pv, a = this.p.getValueAtTime((this.p._caching.lastFrame + this.p.offsetTime - .01) / r, this.p.offsetTime));\n                                else if (this.px && this.px.keyframes && this.py.keyframes && this.px.getValueAtTime && this.py.getValueAtTime) {\n                                    i = [], a = [];\n                                    var s = this.px, n = this.py;\n                                    s._caching.lastFrame + s.offsetTime <= s.keyframes[0].t ? (i[0] = s.getValueAtTime((s.keyframes[0].t + .01) / r, 0), i[1] = n.getValueAtTime((n.keyframes[0].t + .01) / r, 0), a[0] = s.getValueAtTime(s.keyframes[0].t / r, 0), a[1] = n.getValueAtTime(n.keyframes[0].t / r, 0)) : s._caching.lastFrame + s.offsetTime >= s.keyframes[s.keyframes.length - 1].t ? (i[0] = s.getValueAtTime(s.keyframes[s.keyframes.length - 1].t / r, 0), i[1] = n.getValueAtTime(n.keyframes[n.keyframes.length - 1].t / r, 0), a[0] = s.getValueAtTime((s.keyframes[s.keyframes.length - 1].t - .01) / r, 0), a[1] = n.getValueAtTime((n.keyframes[n.keyframes.length - 1].t - .01) / r, 0)) : (i = [\n                                        s.pv,\n                                        n.pv\n                                    ], a[0] = s.getValueAtTime((s._caching.lastFrame + s.offsetTime - .01) / r, s.offsetTime), a[1] = n.getValueAtTime((n._caching.lastFrame + n.offsetTime - .01) / r, n.offsetTime));\n                                } else i = a = t;\n                                this.v.rotate(-Math.atan2(i[1] - a[1], i[0] - a[0]));\n                            }\n                            this.data.p && this.data.p.s ? this.data.p.z ? this.v.translate(this.px.v, this.py.v, -this.pz.v) : this.v.translate(this.px.v, this.py.v, 0) : this.v.translate(this.p.v[0], this.p.v[1], -this.p.v[2]);\n                        }\n                        this.frameId = this.elem.globalData.frameId;\n                    }\n                },\n                precalculateMatrix: function() {\n                    if (!this.a.k && (this.pre.translate(-this.a.v[0], -this.a.v[1], this.a.v[2]), this.appliedTransformations = 1, !this.s.effectsSequence.length)) {\n                        if (this.pre.scale(this.s.v[0], this.s.v[1], this.s.v[2]), this.appliedTransformations = 2, this.sk) {\n                            if (this.sk.effectsSequence.length || this.sa.effectsSequence.length) return;\n                            this.pre.skewFromAxis(-this.sk.v, this.sa.v), this.appliedTransformations = 3;\n                        }\n                        this.r ? this.r.effectsSequence.length || (this.pre.rotate(-this.r.v), this.appliedTransformations = 4) : this.rz.effectsSequence.length || this.ry.effectsSequence.length || this.rx.effectsSequence.length || this.or.effectsSequence.length || (this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]), this.appliedTransformations = 4);\n                    }\n                },\n                autoOrient: function() {}\n            }, extendPrototype([\n                DynamicPropertyContainer\n            ], e), e.prototype.addDynamicProperty = function(t) {\n                this._addDynamicProperty(t), this.elem.addDynamicProperty(t), this._isDirty = !0;\n            }, e.prototype._addDynamicProperty = DynamicPropertyContainer.prototype.addDynamicProperty, {\n                getTransformProperty: function(t, r, i) {\n                    return new e(t, r, i);\n                }\n            };\n        }();\n        function RepeaterModifier() {}\n        function RoundCornersModifier() {}\n        function floatEqual(t, e) {\n            return 1e5 * Math.abs(t - e) <= Math.min(Math.abs(t), Math.abs(e));\n        }\n        function floatZero(t) {\n            return Math.abs(t) <= 1e-5;\n        }\n        function lerp(t, e, r) {\n            return t * (1 - r) + e * r;\n        }\n        function lerpPoint(t, e, r) {\n            return [\n                lerp(t[0], e[0], r),\n                lerp(t[1], e[1], r)\n            ];\n        }\n        function quadRoots(t, e, r) {\n            if (0 === t) return [];\n            var i = e * e - 4 * t * r;\n            if (i < 0) return [];\n            var a = -e / (2 * t);\n            if (0 === i) return [\n                a\n            ];\n            var s = Math.sqrt(i) / (2 * t);\n            return [\n                a - s,\n                a + s\n            ];\n        }\n        function polynomialCoefficients(t, e, r, i) {\n            return [\n                3 * e - t - 3 * r + i,\n                3 * t - 6 * e + 3 * r,\n                -3 * t + 3 * e,\n                t\n            ];\n        }\n        function singlePoint(t) {\n            return new PolynomialBezier(t, t, t, t, !1);\n        }\n        function PolynomialBezier(t, e, r, i, a) {\n            a && pointEqual(t, e) && (e = lerpPoint(t, i, 1 / 3)), a && pointEqual(r, i) && (r = lerpPoint(t, i, 2 / 3));\n            var s = polynomialCoefficients(t[0], e[0], r[0], i[0]), n = polynomialCoefficients(t[1], e[1], r[1], i[1]);\n            this.a = [\n                s[0],\n                n[0]\n            ], this.b = [\n                s[1],\n                n[1]\n            ], this.c = [\n                s[2],\n                n[2]\n            ], this.d = [\n                s[3],\n                n[3]\n            ], this.points = [\n                t,\n                e,\n                r,\n                i\n            ];\n        }\n        function extrema(t, e) {\n            var r = t.points[0][e], i = t.points[t.points.length - 1][e];\n            if (r > i) {\n                var a = i;\n                i = r, r = a;\n            }\n            for(var s = quadRoots(3 * t.a[e], 2 * t.b[e], t.c[e]), n = 0; n < s.length; n += 1)if (s[n] > 0 && s[n] < 1) {\n                var o = t.point(s[n])[e];\n                o < r ? r = o : o > i && (i = o);\n            }\n            return {\n                min: r,\n                max: i\n            };\n        }\n        function intersectData(t, e, r) {\n            var i = t.boundingBox();\n            return {\n                cx: i.cx,\n                cy: i.cy,\n                width: i.width,\n                height: i.height,\n                bez: t,\n                t: (e + r) / 2,\n                t1: e,\n                t2: r\n            };\n        }\n        function splitData(t) {\n            var e = t.bez.split(.5);\n            return [\n                intersectData(e[0], t.t1, t.t),\n                intersectData(e[1], t.t, t.t2)\n            ];\n        }\n        function boxIntersect(t, e) {\n            return 2 * Math.abs(t.cx - e.cx) < t.width + e.width && 2 * Math.abs(t.cy - e.cy) < t.height + e.height;\n        }\n        function intersectsImpl(t, e, r, i, a, s) {\n            if (boxIntersect(t, e)) if (r >= s || t.width <= i && t.height <= i && e.width <= i && e.height <= i) a.push([\n                t.t,\n                e.t\n            ]);\n            else {\n                var n = splitData(t), o = splitData(e);\n                intersectsImpl(n[0], o[0], r + 1, i, a, s), intersectsImpl(n[0], o[1], r + 1, i, a, s), intersectsImpl(n[1], o[0], r + 1, i, a, s), intersectsImpl(n[1], o[1], r + 1, i, a, s);\n            }\n        }\n        function crossProduct(t, e) {\n            return [\n                t[1] * e[2] - t[2] * e[1],\n                t[2] * e[0] - t[0] * e[2],\n                t[0] * e[1] - t[1] * e[0]\n            ];\n        }\n        function lineIntersection(t, e, r, i) {\n            var a = [\n                t[0],\n                t[1],\n                1\n            ], s = [\n                e[0],\n                e[1],\n                1\n            ], n = [\n                r[0],\n                r[1],\n                1\n            ], o = [\n                i[0],\n                i[1],\n                1\n            ], h = crossProduct(crossProduct(a, s), crossProduct(n, o));\n            return floatZero(h[2]) ? null : [\n                h[0] / h[2],\n                h[1] / h[2]\n            ];\n        }\n        function polarOffset(t, e, r) {\n            return [\n                t[0] + Math.cos(e) * r,\n                t[1] - Math.sin(e) * r\n            ];\n        }\n        function pointDistance(t, e) {\n            return Math.hypot(t[0] - e[0], t[1] - e[1]);\n        }\n        function pointEqual(t, e) {\n            return floatEqual(t[0], e[0]) && floatEqual(t[1], e[1]);\n        }\n        function ZigZagModifier() {}\n        function setPoint(t, e, r, i, a, s, n) {\n            var o = r - Math.PI / 2, h = r + Math.PI / 2, l = e[0] + Math.cos(r) * i * a, p = e[1] - Math.sin(r) * i * a;\n            t.setTripleAt(l, p, l + Math.cos(o) * s, p - Math.sin(o) * s, l + Math.cos(h) * n, p - Math.sin(h) * n, t.length());\n        }\n        function getPerpendicularVector(t, e) {\n            var r = [\n                e[0] - t[0],\n                e[1] - t[1]\n            ], i = .5 * -Math.PI;\n            return [\n                Math.cos(i) * r[0] - Math.sin(i) * r[1],\n                Math.sin(i) * r[0] + Math.cos(i) * r[1]\n            ];\n        }\n        function getProjectingAngle(t, e) {\n            var r = 0 === e ? t.length() - 1 : e - 1, i = (e + 1) % t.length(), a = getPerpendicularVector(t.v[r], t.v[i]);\n            return Math.atan2(0, 1) - Math.atan2(a[1], a[0]);\n        }\n        function zigZagCorner(t, e, r, i, a, s, n) {\n            var o = getProjectingAngle(e, r), h = e.v[r % e._length], l = e.v[0 === r ? e._length - 1 : r - 1], p = e.v[(r + 1) % e._length], f = 2 === s ? Math.sqrt(Math.pow(h[0] - l[0], 2) + Math.pow(h[1] - l[1], 2)) : 0, c = 2 === s ? Math.sqrt(Math.pow(h[0] - p[0], 2) + Math.pow(h[1] - p[1], 2)) : 0;\n            setPoint(t, e.v[r % e._length], o, n, i, c / (2 * (a + 1)), f / (2 * (a + 1)), s);\n        }\n        function zigZagSegment(t, e, r, i, a, s) {\n            for(var n = 0; n < i; n += 1){\n                var o = (n + 1) / (i + 1), h = 2 === a ? Math.sqrt(Math.pow(e.points[3][0] - e.points[0][0], 2) + Math.pow(e.points[3][1] - e.points[0][1], 2)) : 0, l = e.normalAngle(o);\n                setPoint(t, e.point(o), l, s, r, h / (2 * (i + 1)), h / (2 * (i + 1)), a), s = -s;\n            }\n            return s;\n        }\n        function linearOffset(t, e, r) {\n            var i = Math.atan2(e[0] - t[0], e[1] - t[1]);\n            return [\n                polarOffset(t, i, r),\n                polarOffset(e, i, r)\n            ];\n        }\n        function offsetSegment(t, e) {\n            var r, i, a, s, n, o, h;\n            r = (h = linearOffset(t.points[0], t.points[1], e))[0], i = h[1], a = (h = linearOffset(t.points[1], t.points[2], e))[0], s = h[1], n = (h = linearOffset(t.points[2], t.points[3], e))[0], o = h[1];\n            var l = lineIntersection(r, i, a, s);\n            null === l && (l = i);\n            var p = lineIntersection(n, o, a, s);\n            return null === p && (p = n), new PolynomialBezier(r, l, p, o);\n        }\n        function joinLines(t, e, r, i, a) {\n            var s = e.points[3], n = r.points[0];\n            if (3 === i) return s;\n            if (pointEqual(s, n)) return s;\n            if (2 === i) {\n                var o = -e.tangentAngle(1), h = -r.tangentAngle(0) + Math.PI, l = lineIntersection(s, polarOffset(s, o + Math.PI / 2, 100), n, polarOffset(n, o + Math.PI / 2, 100)), p = l ? pointDistance(l, s) : pointDistance(s, n) / 2, f = polarOffset(s, o, 2 * p * roundCorner);\n                return t.setXYAt(f[0], f[1], \"o\", t.length() - 1), f = polarOffset(n, h, 2 * p * roundCorner), t.setTripleAt(n[0], n[1], n[0], n[1], f[0], f[1], t.length()), n;\n            }\n            var c = lineIntersection(pointEqual(s, e.points[2]) ? e.points[0] : e.points[2], s, n, pointEqual(n, r.points[1]) ? r.points[3] : r.points[1]);\n            return c && pointDistance(c, s) < a ? (t.setTripleAt(c[0], c[1], c[0], c[1], c[0], c[1], t.length()), c) : s;\n        }\n        function getIntersection(t, e) {\n            var r = t.intersections(e);\n            return r.length && floatEqual(r[0][0], 1) && r.shift(), r.length ? r[0] : null;\n        }\n        function pruneSegmentIntersection(t, e) {\n            var r = t.slice(), i = e.slice(), a = getIntersection(t[t.length - 1], e[0]);\n            return a && (r[t.length - 1] = t[t.length - 1].split(a[0])[0], i[0] = e[0].split(a[1])[1]), t.length > 1 && e.length > 1 && (a = getIntersection(t[0], e[e.length - 1])) ? [\n                [\n                    t[0].split(a[0])[0]\n                ],\n                [\n                    e[e.length - 1].split(a[1])[1]\n                ]\n            ] : [\n                r,\n                i\n            ];\n        }\n        function pruneIntersections(t) {\n            for(var e, r = 1; r < t.length; r += 1)e = pruneSegmentIntersection(t[r - 1], t[r]), t[r - 1] = e[0], t[r] = e[1];\n            return t.length > 1 && (e = pruneSegmentIntersection(t[t.length - 1], t[0]), t[t.length - 1] = e[0], t[0] = e[1]), t;\n        }\n        function offsetSegmentSplit(t, e) {\n            var r, i, a, s, n = t.inflectionPoints();\n            if (0 === n.length) return [\n                offsetSegment(t, e)\n            ];\n            if (1 === n.length || floatEqual(n[1], 1)) return r = (a = t.split(n[0]))[0], i = a[1], [\n                offsetSegment(r, e),\n                offsetSegment(i, e)\n            ];\n            r = (a = t.split(n[0]))[0];\n            var o = (n[1] - n[0]) / (1 - n[0]);\n            return s = (a = a[1].split(o))[0], i = a[1], [\n                offsetSegment(r, e),\n                offsetSegment(s, e),\n                offsetSegment(i, e)\n            ];\n        }\n        function OffsetPathModifier() {}\n        function getFontProperties(t) {\n            for(var e = t.fStyle ? t.fStyle.split(\" \") : [], r = \"normal\", i = \"normal\", a = e.length, s = 0; s < a; s += 1)switch(e[s].toLowerCase()){\n                case \"italic\":\n                    i = \"italic\";\n                    break;\n                case \"bold\":\n                    r = \"700\";\n                    break;\n                case \"black\":\n                    r = \"900\";\n                    break;\n                case \"medium\":\n                    r = \"500\";\n                    break;\n                case \"regular\":\n                case \"normal\":\n                    r = \"400\";\n                    break;\n                case \"light\":\n                case \"thin\":\n                    r = \"200\";\n            }\n            return {\n                style: i,\n                weight: t.fWeight || r\n            };\n        }\n        extendPrototype([\n            ShapeModifier\n        ], RepeaterModifier), RepeaterModifier.prototype.initModifierProperties = function(t, e) {\n            this.getValue = this.processKeys, this.c = PropertyFactory.getProp(t, e.c, 0, null, this), this.o = PropertyFactory.getProp(t, e.o, 0, null, this), this.tr = TransformPropertyFactory.getTransformProperty(t, e.tr, this), this.so = PropertyFactory.getProp(t, e.tr.so, 0, .01, this), this.eo = PropertyFactory.getProp(t, e.tr.eo, 0, .01, this), this.data = e, this.dynamicProperties.length || this.getValue(!0), this._isAnimated = !!this.dynamicProperties.length, this.pMatrix = new Matrix, this.rMatrix = new Matrix, this.sMatrix = new Matrix, this.tMatrix = new Matrix, this.matrix = new Matrix;\n        }, RepeaterModifier.prototype.applyTransforms = function(t, e, r, i, a, s) {\n            var n = s ? -1 : 1, o = i.s.v[0] + (1 - i.s.v[0]) * (1 - a), h = i.s.v[1] + (1 - i.s.v[1]) * (1 - a);\n            t.translate(i.p.v[0] * n * a, i.p.v[1] * n * a, i.p.v[2]), e.translate(-i.a.v[0], -i.a.v[1], i.a.v[2]), e.rotate(-i.r.v * n * a), e.translate(i.a.v[0], i.a.v[1], i.a.v[2]), r.translate(-i.a.v[0], -i.a.v[1], i.a.v[2]), r.scale(s ? 1 / o : o, s ? 1 / h : h), r.translate(i.a.v[0], i.a.v[1], i.a.v[2]);\n        }, RepeaterModifier.prototype.init = function(t, e, r, i) {\n            for(this.elem = t, this.arr = e, this.pos = r, this.elemsData = i, this._currentCopies = 0, this._elements = [], this._groups = [], this.frameId = -1, this.initDynamicPropertyContainer(t), this.initModifierProperties(t, e[r]); r > 0;)r -= 1, this._elements.unshift(e[r]);\n            this.dynamicProperties.length ? this.k = !0 : this.getValue(!0);\n        }, RepeaterModifier.prototype.resetElements = function(t) {\n            var e, r = t.length;\n            for(e = 0; e < r; e += 1)t[e]._processed = !1, \"gr\" === t[e].ty && this.resetElements(t[e].it);\n        }, RepeaterModifier.prototype.cloneElements = function(t) {\n            var e = JSON.parse(JSON.stringify(t));\n            return this.resetElements(e), e;\n        }, RepeaterModifier.prototype.changeGroupRender = function(t, e) {\n            var r, i = t.length;\n            for(r = 0; r < i; r += 1)t[r]._render = e, \"gr\" === t[r].ty && this.changeGroupRender(t[r].it, e);\n        }, RepeaterModifier.prototype.processShapes = function(t) {\n            var e, r, i, a, s, n = !1;\n            if (this._mdf || t) {\n                var o, h = Math.ceil(this.c.v);\n                if (this._groups.length < h) {\n                    for(; this._groups.length < h;){\n                        var l = {\n                            it: this.cloneElements(this._elements),\n                            ty: \"gr\"\n                        };\n                        l.it.push({\n                            a: {\n                                a: 0,\n                                ix: 1,\n                                k: [\n                                    0,\n                                    0\n                                ]\n                            },\n                            nm: \"Transform\",\n                            o: {\n                                a: 0,\n                                ix: 7,\n                                k: 100\n                            },\n                            p: {\n                                a: 0,\n                                ix: 2,\n                                k: [\n                                    0,\n                                    0\n                                ]\n                            },\n                            r: {\n                                a: 1,\n                                ix: 6,\n                                k: [\n                                    {\n                                        s: 0,\n                                        e: 0,\n                                        t: 0\n                                    },\n                                    {\n                                        s: 0,\n                                        e: 0,\n                                        t: 1\n                                    }\n                                ]\n                            },\n                            s: {\n                                a: 0,\n                                ix: 3,\n                                k: [\n                                    100,\n                                    100\n                                ]\n                            },\n                            sa: {\n                                a: 0,\n                                ix: 5,\n                                k: 0\n                            },\n                            sk: {\n                                a: 0,\n                                ix: 4,\n                                k: 0\n                            },\n                            ty: \"tr\"\n                        }), this.arr.splice(0, 0, l), this._groups.splice(0, 0, l), this._currentCopies += 1;\n                    }\n                    this.elem.reloadShapes(), n = !0;\n                }\n                for(s = 0, i = 0; i <= this._groups.length - 1; i += 1){\n                    if (o = s < h, this._groups[i]._render = o, this.changeGroupRender(this._groups[i].it, o), !o) {\n                        var p = this.elemsData[i].it, f = p[p.length - 1];\n                        0 !== f.transform.op.v ? (f.transform.op._mdf = !0, f.transform.op.v = 0) : f.transform.op._mdf = !1;\n                    }\n                    s += 1;\n                }\n                this._currentCopies = h;\n                var c = this.o.v, m = c % 1, d = c > 0 ? Math.floor(c) : Math.ceil(c), u = this.pMatrix.props, y = this.rMatrix.props, g = this.sMatrix.props;\n                this.pMatrix.reset(), this.rMatrix.reset(), this.sMatrix.reset(), this.tMatrix.reset(), this.matrix.reset();\n                var v, b, x = 0;\n                if (c > 0) {\n                    for(; x < d;)this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, !1), x += 1;\n                    m && (this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, m, !1), x += m);\n                } else if (c < 0) {\n                    for(; x > d;)this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, !0), x -= 1;\n                    m && (this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, -m, !0), x -= m);\n                }\n                for(i = 1 === this.data.m ? 0 : this._currentCopies - 1, a = 1 === this.data.m ? 1 : -1, s = this._currentCopies; s;){\n                    if (b = (r = (e = this.elemsData[i].it)[e.length - 1].transform.mProps.v.props).length, e[e.length - 1].transform.mProps._mdf = !0, e[e.length - 1].transform.op._mdf = !0, e[e.length - 1].transform.op.v = 1 === this._currentCopies ? this.so.v : this.so.v + (this.eo.v - this.so.v) * (i / (this._currentCopies - 1)), 0 !== x) {\n                        for((0 !== i && 1 === a || i !== this._currentCopies - 1 && -1 === a) && this.applyTransforms(this.pMatrix, this.rMatrix, this.sMatrix, this.tr, 1, !1), this.matrix.transform(y[0], y[1], y[2], y[3], y[4], y[5], y[6], y[7], y[8], y[9], y[10], y[11], y[12], y[13], y[14], y[15]), this.matrix.transform(g[0], g[1], g[2], g[3], g[4], g[5], g[6], g[7], g[8], g[9], g[10], g[11], g[12], g[13], g[14], g[15]), this.matrix.transform(u[0], u[1], u[2], u[3], u[4], u[5], u[6], u[7], u[8], u[9], u[10], u[11], u[12], u[13], u[14], u[15]), v = 0; v < b; v += 1)r[v] = this.matrix.props[v];\n                        this.matrix.reset();\n                    } else for(this.matrix.reset(), v = 0; v < b; v += 1)r[v] = this.matrix.props[v];\n                    x += 1, s -= 1, i += a;\n                }\n            } else for(s = this._currentCopies, i = 0, a = 1; s;)r = (e = this.elemsData[i].it)[e.length - 1].transform.mProps.v.props, e[e.length - 1].transform.mProps._mdf = !1, e[e.length - 1].transform.op._mdf = !1, s -= 1, i += a;\n            return n;\n        }, RepeaterModifier.prototype.addShape = function() {}, extendPrototype([\n            ShapeModifier\n        ], RoundCornersModifier), RoundCornersModifier.prototype.initModifierProperties = function(t, e) {\n            this.getValue = this.processKeys, this.rd = PropertyFactory.getProp(t, e.r, 0, null, this), this._isAnimated = !!this.rd.effectsSequence.length;\n        }, RoundCornersModifier.prototype.processPath = function(t, e) {\n            var r, i = shapePool.newElement();\n            i.c = t.c;\n            var a, s, n, o, h, l, p, f, c, m, d, u, y = t._length, g = 0;\n            for(r = 0; r < y; r += 1)a = t.v[r], n = t.o[r], s = t.i[r], a[0] === n[0] && a[1] === n[1] && a[0] === s[0] && a[1] === s[1] ? 0 !== r && r !== y - 1 || t.c ? (o = 0 === r ? t.v[y - 1] : t.v[r - 1], l = (h = Math.sqrt(Math.pow(a[0] - o[0], 2) + Math.pow(a[1] - o[1], 2))) ? Math.min(h / 2, e) / h : 0, p = d = a[0] + (o[0] - a[0]) * l, f = u = a[1] - (a[1] - o[1]) * l, c = p - (p - a[0]) * roundCorner, m = f - (f - a[1]) * roundCorner, i.setTripleAt(p, f, c, m, d, u, g), g += 1, o = r === y - 1 ? t.v[0] : t.v[r + 1], l = (h = Math.sqrt(Math.pow(a[0] - o[0], 2) + Math.pow(a[1] - o[1], 2))) ? Math.min(h / 2, e) / h : 0, p = c = a[0] + (o[0] - a[0]) * l, f = m = a[1] + (o[1] - a[1]) * l, d = p - (p - a[0]) * roundCorner, u = f - (f - a[1]) * roundCorner, i.setTripleAt(p, f, c, m, d, u, g), g += 1) : (i.setTripleAt(a[0], a[1], n[0], n[1], s[0], s[1], g), g += 1) : (i.setTripleAt(t.v[r][0], t.v[r][1], t.o[r][0], t.o[r][1], t.i[r][0], t.i[r][1], g), g += 1);\n            return i;\n        }, RoundCornersModifier.prototype.processShapes = function(t) {\n            var e, r, i, a, s, n, o = this.shapes.length, h = this.rd.v;\n            if (0 !== h) for(r = 0; r < o; r += 1){\n                if (n = (s = this.shapes[r]).localShapeCollection, s.shape._mdf || this._mdf || t) for(n.releaseShapes(), s.shape._mdf = !0, e = s.shape.paths.shapes, a = s.shape.paths._length, i = 0; i < a; i += 1)n.addShape(this.processPath(e[i], h));\n                s.shape.paths = s.localShapeCollection;\n            }\n            this.dynamicProperties.length || (this._mdf = !1);\n        }, PolynomialBezier.prototype.point = function(t) {\n            return [\n                ((this.a[0] * t + this.b[0]) * t + this.c[0]) * t + this.d[0],\n                ((this.a[1] * t + this.b[1]) * t + this.c[1]) * t + this.d[1]\n            ];\n        }, PolynomialBezier.prototype.derivative = function(t) {\n            return [\n                (3 * t * this.a[0] + 2 * this.b[0]) * t + this.c[0],\n                (3 * t * this.a[1] + 2 * this.b[1]) * t + this.c[1]\n            ];\n        }, PolynomialBezier.prototype.tangentAngle = function(t) {\n            var e = this.derivative(t);\n            return Math.atan2(e[1], e[0]);\n        }, PolynomialBezier.prototype.normalAngle = function(t) {\n            var e = this.derivative(t);\n            return Math.atan2(e[0], e[1]);\n        }, PolynomialBezier.prototype.inflectionPoints = function() {\n            var t = this.a[1] * this.b[0] - this.a[0] * this.b[1];\n            if (floatZero(t)) return [];\n            var e = -.5 * (this.a[1] * this.c[0] - this.a[0] * this.c[1]) / t, r = e * e - 1 / 3 * (this.b[1] * this.c[0] - this.b[0] * this.c[1]) / t;\n            if (r < 0) return [];\n            var i = Math.sqrt(r);\n            return floatZero(i) ? i > 0 && i < 1 ? [\n                e\n            ] : [] : [\n                e - i,\n                e + i\n            ].filter(function(t) {\n                return t > 0 && t < 1;\n            });\n        }, PolynomialBezier.prototype.split = function(t) {\n            if (t <= 0) return [\n                singlePoint(this.points[0]),\n                this\n            ];\n            if (t >= 1) return [\n                this,\n                singlePoint(this.points[this.points.length - 1])\n            ];\n            var e = lerpPoint(this.points[0], this.points[1], t), r = lerpPoint(this.points[1], this.points[2], t), i = lerpPoint(this.points[2], this.points[3], t), a = lerpPoint(e, r, t), s = lerpPoint(r, i, t), n = lerpPoint(a, s, t);\n            return [\n                new PolynomialBezier(this.points[0], e, a, n, !0),\n                new PolynomialBezier(n, s, i, this.points[3], !0)\n            ];\n        }, PolynomialBezier.prototype.bounds = function() {\n            return {\n                x: extrema(this, 0),\n                y: extrema(this, 1)\n            };\n        }, PolynomialBezier.prototype.boundingBox = function() {\n            var t = this.bounds();\n            return {\n                left: t.x.min,\n                right: t.x.max,\n                top: t.y.min,\n                bottom: t.y.max,\n                width: t.x.max - t.x.min,\n                height: t.y.max - t.y.min,\n                cx: (t.x.max + t.x.min) / 2,\n                cy: (t.y.max + t.y.min) / 2\n            };\n        }, PolynomialBezier.prototype.intersections = function(t, e, r) {\n            void 0 === e && (e = 2), void 0 === r && (r = 7);\n            var i = [];\n            return intersectsImpl(intersectData(this, 0, 1), intersectData(t, 0, 1), 0, e, i, r), i;\n        }, PolynomialBezier.shapeSegment = function(t, e) {\n            var r = (e + 1) % t.length();\n            return new PolynomialBezier(t.v[e], t.o[e], t.i[r], t.v[r], !0);\n        }, PolynomialBezier.shapeSegmentInverted = function(t, e) {\n            var r = (e + 1) % t.length();\n            return new PolynomialBezier(t.v[r], t.i[r], t.o[e], t.v[e], !0);\n        }, extendPrototype([\n            ShapeModifier\n        ], ZigZagModifier), ZigZagModifier.prototype.initModifierProperties = function(t, e) {\n            this.getValue = this.processKeys, this.amplitude = PropertyFactory.getProp(t, e.s, 0, null, this), this.frequency = PropertyFactory.getProp(t, e.r, 0, null, this), this.pointsType = PropertyFactory.getProp(t, e.pt, 0, null, this), this._isAnimated = 0 !== this.amplitude.effectsSequence.length || 0 !== this.frequency.effectsSequence.length || 0 !== this.pointsType.effectsSequence.length;\n        }, ZigZagModifier.prototype.processPath = function(t, e, r, i) {\n            var a = t._length, s = shapePool.newElement();\n            if (s.c = t.c, t.c || (a -= 1), 0 === a) return s;\n            var n = -1, o = PolynomialBezier.shapeSegment(t, 0);\n            zigZagCorner(s, t, 0, e, r, i, n);\n            for(var h = 0; h < a; h += 1)n = zigZagSegment(s, o, e, r, i, -n), o = h !== a - 1 || t.c ? PolynomialBezier.shapeSegment(t, (h + 1) % a) : null, zigZagCorner(s, t, h + 1, e, r, i, n);\n            return s;\n        }, ZigZagModifier.prototype.processShapes = function(t) {\n            var e, r, i, a, s, n, o = this.shapes.length, h = this.amplitude.v, l = Math.max(0, Math.round(this.frequency.v)), p = this.pointsType.v;\n            if (0 !== h) for(r = 0; r < o; r += 1){\n                if (n = (s = this.shapes[r]).localShapeCollection, s.shape._mdf || this._mdf || t) for(n.releaseShapes(), s.shape._mdf = !0, e = s.shape.paths.shapes, a = s.shape.paths._length, i = 0; i < a; i += 1)n.addShape(this.processPath(e[i], h, l, p));\n                s.shape.paths = s.localShapeCollection;\n            }\n            this.dynamicProperties.length || (this._mdf = !1);\n        }, extendPrototype([\n            ShapeModifier\n        ], OffsetPathModifier), OffsetPathModifier.prototype.initModifierProperties = function(t, e) {\n            this.getValue = this.processKeys, this.amount = PropertyFactory.getProp(t, e.a, 0, null, this), this.miterLimit = PropertyFactory.getProp(t, e.ml, 0, null, this), this.lineJoin = e.lj, this._isAnimated = 0 !== this.amount.effectsSequence.length;\n        }, OffsetPathModifier.prototype.processPath = function(t, e, r, i) {\n            var a = shapePool.newElement();\n            a.c = t.c;\n            var s, n, o, h = t.length();\n            t.c || (h -= 1);\n            var l = [];\n            for(s = 0; s < h; s += 1)o = PolynomialBezier.shapeSegment(t, s), l.push(offsetSegmentSplit(o, e));\n            if (!t.c) for(s = h - 1; s >= 0; s -= 1)o = PolynomialBezier.shapeSegmentInverted(t, s), l.push(offsetSegmentSplit(o, e));\n            l = pruneIntersections(l);\n            var p = null, f = null;\n            for(s = 0; s < l.length; s += 1){\n                var c = l[s];\n                for(f && (p = joinLines(a, f, c[0], r, i)), f = c[c.length - 1], n = 0; n < c.length; n += 1)o = c[n], p && pointEqual(o.points[0], p) ? a.setXYAt(o.points[1][0], o.points[1][1], \"o\", a.length() - 1) : a.setTripleAt(o.points[0][0], o.points[0][1], o.points[1][0], o.points[1][1], o.points[0][0], o.points[0][1], a.length()), a.setTripleAt(o.points[3][0], o.points[3][1], o.points[3][0], o.points[3][1], o.points[2][0], o.points[2][1], a.length()), p = o.points[3];\n            }\n            return l.length && joinLines(a, f, l[0][0], r, i), a;\n        }, OffsetPathModifier.prototype.processShapes = function(t) {\n            var e, r, i, a, s, n, o = this.shapes.length, h = this.amount.v, l = this.miterLimit.v, p = this.lineJoin;\n            if (0 !== h) for(r = 0; r < o; r += 1){\n                if (n = (s = this.shapes[r]).localShapeCollection, s.shape._mdf || this._mdf || t) for(n.releaseShapes(), s.shape._mdf = !0, e = s.shape.paths.shapes, a = s.shape.paths._length, i = 0; i < a; i += 1)n.addShape(this.processPath(e[i], h, p, l));\n                s.shape.paths = s.localShapeCollection;\n            }\n            this.dynamicProperties.length || (this._mdf = !1);\n        };\n        var FontManager = function() {\n            var t = {\n                w: 0,\n                size: 0,\n                shapes: [],\n                data: {\n                    shapes: []\n                }\n            }, e = [];\n            e = e.concat([\n                2304,\n                2305,\n                2306,\n                2307,\n                2362,\n                2363,\n                2364,\n                2364,\n                2366,\n                2367,\n                2368,\n                2369,\n                2370,\n                2371,\n                2372,\n                2373,\n                2374,\n                2375,\n                2376,\n                2377,\n                2378,\n                2379,\n                2380,\n                2381,\n                2382,\n                2383,\n                2387,\n                2388,\n                2389,\n                2390,\n                2391,\n                2402,\n                2403\n            ]);\n            var r = [\n                \"d83cdffb\",\n                \"d83cdffc\",\n                \"d83cdffd\",\n                \"d83cdffe\",\n                \"d83cdfff\"\n            ], i = [\n                65039,\n                8205\n            ];\n            function a(t, e) {\n                var r = createTag(\"span\");\n                r.setAttribute(\"aria-hidden\", !0), r.style.fontFamily = e;\n                var i = createTag(\"span\");\n                i.innerText = \"giItT1WQy@!-/#\", r.style.position = \"absolute\", r.style.left = \"-10000px\", r.style.top = \"-10000px\", r.style.fontSize = \"300px\", r.style.fontVariant = \"normal\", r.style.fontStyle = \"normal\", r.style.fontWeight = \"normal\", r.style.letterSpacing = \"0\", r.appendChild(i), document.body.appendChild(r);\n                var a = i.offsetWidth;\n                return i.style.fontFamily = function(t) {\n                    var e, r = t.split(\",\"), i = r.length, a = [];\n                    for(e = 0; e < i; e += 1)\"sans-serif\" !== r[e] && \"monospace\" !== r[e] && a.push(r[e]);\n                    return a.join(\",\");\n                }(t) + \", \" + e, {\n                    node: i,\n                    w: a,\n                    parent: r\n                };\n            }\n            function s(t, e) {\n                var r, i = document.body && e ? \"svg\" : \"canvas\", a = getFontProperties(t);\n                if (\"svg\" === i) {\n                    var s = createNS(\"text\");\n                    s.style.fontSize = \"100px\", s.setAttribute(\"font-family\", t.fFamily), s.setAttribute(\"font-style\", a.style), s.setAttribute(\"font-weight\", a.weight), s.textContent = \"1\", t.fClass ? (s.style.fontFamily = \"inherit\", s.setAttribute(\"class\", t.fClass)) : s.style.fontFamily = t.fFamily, e.appendChild(s), r = s;\n                } else {\n                    var n = new OffscreenCanvas(500, 500).getContext(\"2d\");\n                    n.font = a.style + \" \" + a.weight + \" 100px \" + t.fFamily, r = n;\n                }\n                return {\n                    measureText: function(t) {\n                        return \"svg\" === i ? (r.textContent = t, r.getComputedTextLength()) : r.measureText(t).width;\n                    }\n                };\n            }\n            var n = function() {\n                this.fonts = [], this.chars = null, this.typekitLoaded = 0, this.isLoaded = !1, this._warned = !1, this.initTime = Date.now(), this.setIsLoadedBinded = this.setIsLoaded.bind(this), this.checkLoadedFontsBinded = this.checkLoadedFonts.bind(this);\n            };\n            return n.isModifier = function(t, e) {\n                var i = t.toString(16) + e.toString(16);\n                return -1 !== r.indexOf(i);\n            }, n.isZeroWidthJoiner = function(t, e) {\n                return e ? t === i[0] && e === i[1] : t === i[1];\n            }, n.isCombinedCharacter = function(t) {\n                return -1 !== e.indexOf(t);\n            }, n.prototype = {\n                addChars: function(t) {\n                    if (t) {\n                        var e;\n                        this.chars || (this.chars = []);\n                        var r, i, a = t.length, s = this.chars.length;\n                        for(e = 0; e < a; e += 1){\n                            for(r = 0, i = !1; r < s;)this.chars[r].style === t[e].style && this.chars[r].fFamily === t[e].fFamily && this.chars[r].ch === t[e].ch && (i = !0), r += 1;\n                            i || (this.chars.push(t[e]), s += 1);\n                        }\n                    }\n                },\n                addFonts: function(t, e) {\n                    if (t) {\n                        if (this.chars) return this.isLoaded = !0, void (this.fonts = t.list);\n                        if (!document.body) return this.isLoaded = !0, t.list.forEach(function(t) {\n                            t.helper = s(t), t.cache = {};\n                        }), void (this.fonts = t.list);\n                        var r, i = t.list, n = i.length, o = n;\n                        for(r = 0; r < n; r += 1){\n                            var h, l, p = !0;\n                            if (i[r].loaded = !1, i[r].monoCase = a(i[r].fFamily, \"monospace\"), i[r].sansCase = a(i[r].fFamily, \"sans-serif\"), i[r].fPath) {\n                                if (\"p\" === i[r].fOrigin || 3 === i[r].origin) {\n                                    if ((h = document.querySelectorAll('style[f-forigin=\"p\"][f-family=\"' + i[r].fFamily + '\"], style[f-origin=\"3\"][f-family=\"' + i[r].fFamily + '\"]')).length > 0 && (p = !1), p) {\n                                        var f = createTag(\"style\");\n                                        f.setAttribute(\"f-forigin\", i[r].fOrigin), f.setAttribute(\"f-origin\", i[r].origin), f.setAttribute(\"f-family\", i[r].fFamily), f.type = \"text/css\", f.innerText = \"@font-face {font-family: \" + i[r].fFamily + \"; font-style: normal; src: url('\" + i[r].fPath + \"');}\", e.appendChild(f);\n                                    }\n                                } else if (\"g\" === i[r].fOrigin || 1 === i[r].origin) {\n                                    for(h = document.querySelectorAll('link[f-forigin=\"g\"], link[f-origin=\"1\"]'), l = 0; l < h.length; l += 1)-1 !== h[l].href.indexOf(i[r].fPath) && (p = !1);\n                                    if (p) {\n                                        var c = createTag(\"link\");\n                                        c.setAttribute(\"f-forigin\", i[r].fOrigin), c.setAttribute(\"f-origin\", i[r].origin), c.type = \"text/css\", c.rel = \"stylesheet\", c.href = i[r].fPath, document.body.appendChild(c);\n                                    }\n                                } else if (\"t\" === i[r].fOrigin || 2 === i[r].origin) {\n                                    for(h = document.querySelectorAll('script[f-forigin=\"t\"], script[f-origin=\"2\"]'), l = 0; l < h.length; l += 1)i[r].fPath === h[l].src && (p = !1);\n                                    if (p) {\n                                        var m = createTag(\"link\");\n                                        m.setAttribute(\"f-forigin\", i[r].fOrigin), m.setAttribute(\"f-origin\", i[r].origin), m.setAttribute(\"rel\", \"stylesheet\"), m.setAttribute(\"href\", i[r].fPath), e.appendChild(m);\n                                    }\n                                }\n                            } else i[r].loaded = !0, o -= 1;\n                            i[r].helper = s(i[r], e), i[r].cache = {}, this.fonts.push(i[r]);\n                        }\n                        0 === o ? this.isLoaded = !0 : setTimeout(this.checkLoadedFonts.bind(this), 100);\n                    } else this.isLoaded = !0;\n                },\n                getCharData: function(e, r, i) {\n                    for(var a = 0, s = this.chars.length; a < s;){\n                        if (this.chars[a].ch === e && this.chars[a].style === r && this.chars[a].fFamily === i) return this.chars[a];\n                        a += 1;\n                    }\n                    return (\"string\" == typeof e && 13 !== e.charCodeAt(0) || !e) && console && console.warn && !this._warned && (this._warned = !0), t;\n                },\n                getFontByName: function(t) {\n                    for(var e = 0, r = this.fonts.length; e < r;){\n                        if (this.fonts[e].fName === t) return this.fonts[e];\n                        e += 1;\n                    }\n                    return this.fonts[0];\n                },\n                measureText: function(t, e, r) {\n                    var i = this.getFontByName(e), a = t.charCodeAt(0);\n                    if (!i.cache[a + 1]) {\n                        var s = i.helper;\n                        if (\" \" === t) {\n                            var n = s.measureText(\"|\" + t + \"|\"), o = s.measureText(\"||\");\n                            i.cache[a + 1] = (n - o) / 100;\n                        } else i.cache[a + 1] = s.measureText(t) / 100;\n                    }\n                    return i.cache[a + 1] * r;\n                },\n                checkLoadedFonts: function() {\n                    var t, e, r, i = this.fonts.length, a = i;\n                    for(t = 0; t < i; t += 1)this.fonts[t].loaded ? a -= 1 : \"n\" === this.fonts[t].fOrigin || 0 === this.fonts[t].origin ? this.fonts[t].loaded = !0 : (e = this.fonts[t].monoCase.node, r = this.fonts[t].monoCase.w, e.offsetWidth !== r ? (a -= 1, this.fonts[t].loaded = !0) : (e = this.fonts[t].sansCase.node, r = this.fonts[t].sansCase.w, e.offsetWidth !== r && (a -= 1, this.fonts[t].loaded = !0)), this.fonts[t].loaded && (this.fonts[t].sansCase.parent.parentNode.removeChild(this.fonts[t].sansCase.parent), this.fonts[t].monoCase.parent.parentNode.removeChild(this.fonts[t].monoCase.parent)));\n                    0 !== a && Date.now() - this.initTime < 5e3 ? setTimeout(this.checkLoadedFontsBinded, 20) : setTimeout(this.setIsLoadedBinded, 10);\n                },\n                setIsLoaded: function() {\n                    this.isLoaded = !0;\n                }\n            }, n;\n        }();\n        function RenderableElement() {}\n        RenderableElement.prototype = {\n            initRenderable: function() {\n                this.isInRange = !1, this.hidden = !1, this.isTransparent = !1, this.renderableComponents = [];\n            },\n            addRenderableComponent: function(t) {\n                -1 === this.renderableComponents.indexOf(t) && this.renderableComponents.push(t);\n            },\n            removeRenderableComponent: function(t) {\n                -1 !== this.renderableComponents.indexOf(t) && this.renderableComponents.splice(this.renderableComponents.indexOf(t), 1);\n            },\n            prepareRenderableFrame: function(t) {\n                this.checkLayerLimits(t);\n            },\n            checkTransparency: function() {\n                this.finalTransform.mProp.o.v <= 0 ? !this.isTransparent && this.globalData.renderConfig.hideOnTransparent && (this.isTransparent = !0, this.hide()) : this.isTransparent && (this.isTransparent = !1, this.show());\n            },\n            checkLayerLimits: function(t) {\n                this.data.ip - this.data.st <= t && this.data.op - this.data.st > t ? !0 !== this.isInRange && (this.globalData._mdf = !0, this._mdf = !0, this.isInRange = !0, this.show()) : !1 !== this.isInRange && (this.globalData._mdf = !0, this.isInRange = !1, this.hide());\n            },\n            renderRenderable: function() {\n                var t, e = this.renderableComponents.length;\n                for(t = 0; t < e; t += 1)this.renderableComponents[t].renderFrame(this._isFirstFrame);\n            },\n            sourceRectAtTime: function() {\n                return {\n                    top: 0,\n                    left: 0,\n                    width: 100,\n                    height: 100\n                };\n            },\n            getLayerSize: function() {\n                return 5 === this.data.ty ? {\n                    w: this.data.textData.width,\n                    h: this.data.textData.height\n                } : {\n                    w: this.data.width,\n                    h: this.data.height\n                };\n            }\n        };\n        var getBlendMode = (blendModeEnums = {\n            0: \"source-over\",\n            1: \"multiply\",\n            2: \"screen\",\n            3: \"overlay\",\n            4: \"darken\",\n            5: \"lighten\",\n            6: \"color-dodge\",\n            7: \"color-burn\",\n            8: \"hard-light\",\n            9: \"soft-light\",\n            10: \"difference\",\n            11: \"exclusion\",\n            12: \"hue\",\n            13: \"saturation\",\n            14: \"color\",\n            15: \"luminosity\"\n        }, function(t) {\n            return blendModeEnums[t] || \"\";\n        }), blendModeEnums;\n        function SliderEffect(t, e, r) {\n            this.p = PropertyFactory.getProp(e, t.v, 0, 0, r);\n        }\n        function AngleEffect(t, e, r) {\n            this.p = PropertyFactory.getProp(e, t.v, 0, 0, r);\n        }\n        function ColorEffect(t, e, r) {\n            this.p = PropertyFactory.getProp(e, t.v, 1, 0, r);\n        }\n        function PointEffect(t, e, r) {\n            this.p = PropertyFactory.getProp(e, t.v, 1, 0, r);\n        }\n        function LayerIndexEffect(t, e, r) {\n            this.p = PropertyFactory.getProp(e, t.v, 0, 0, r);\n        }\n        function MaskIndexEffect(t, e, r) {\n            this.p = PropertyFactory.getProp(e, t.v, 0, 0, r);\n        }\n        function CheckboxEffect(t, e, r) {\n            this.p = PropertyFactory.getProp(e, t.v, 0, 0, r);\n        }\n        function NoValueEffect() {\n            this.p = {};\n        }\n        function EffectsManager(t, e) {\n            var r, i = t.ef || [];\n            this.effectElements = [];\n            var a, s = i.length;\n            for(r = 0; r < s; r += 1)a = new GroupEffect(i[r], e), this.effectElements.push(a);\n        }\n        function GroupEffect(t, e) {\n            this.init(t, e);\n        }\n        function BaseElement() {}\n        function FrameElement() {}\n        function FootageElement(t, e, r) {\n            this.initFrame(), this.initRenderable(), this.assetData = e.getAssetData(t.refId), this.footageData = e.imageLoader.getAsset(this.assetData), this.initBaseData(t, e, r);\n        }\n        function AudioElement(t, e, r) {\n            this.initFrame(), this.initRenderable(), this.assetData = e.getAssetData(t.refId), this.initBaseData(t, e, r), this._isPlaying = !1, this._canPlay = !1;\n            var i = this.globalData.getAssetsPath(this.assetData);\n            this.audio = this.globalData.audioController.createAudio(i), this._currentTime = 0, this.globalData.audioController.addAudio(this), this._volumeMultiplier = 1, this._volume = 1, this._previousVolume = null, this.tm = t.tm ? PropertyFactory.getProp(this, t.tm, 0, e.frameRate, this) : {\n                _placeholder: !0\n            }, this.lv = PropertyFactory.getProp(this, t.au && t.au.lv ? t.au.lv : {\n                k: [\n                    100\n                ]\n            }, 1, .01, this);\n        }\n        function BaseRenderer() {}\n        function TransformElement() {}\n        function MaskElement(t, e, r) {\n            this.data = t, this.element = e, this.globalData = r, this.storedData = [], this.masksProperties = this.data.masksProperties || [], this.maskElement = null;\n            var i, a, s = this.globalData.defs, n = this.masksProperties ? this.masksProperties.length : 0;\n            this.viewData = createSizedArray(n), this.solidPath = \"\";\n            var o, h, l, p, f, c, m = this.masksProperties, d = 0, u = [], y = createElementID(), g = \"clipPath\", v = \"clip-path\";\n            for(i = 0; i < n; i += 1)if ((\"a\" !== m[i].mode && \"n\" !== m[i].mode || m[i].inv || 100 !== m[i].o.k || m[i].o.x) && (g = \"mask\", v = \"mask\"), \"s\" !== m[i].mode && \"i\" !== m[i].mode || 0 !== d ? l = null : ((l = createNS(\"rect\")).setAttribute(\"fill\", \"#ffffff\"), l.setAttribute(\"width\", this.element.comp.data.w || 0), l.setAttribute(\"height\", this.element.comp.data.h || 0), u.push(l)), a = createNS(\"path\"), \"n\" === m[i].mode) this.viewData[i] = {\n                op: PropertyFactory.getProp(this.element, m[i].o, 0, .01, this.element),\n                prop: ShapePropertyFactory.getShapeProp(this.element, m[i], 3),\n                elem: a,\n                lastPath: \"\"\n            }, s.appendChild(a);\n            else {\n                var b;\n                if (d += 1, a.setAttribute(\"fill\", \"s\" === m[i].mode ? \"#000000\" : \"#ffffff\"), a.setAttribute(\"clip-rule\", \"nonzero\"), 0 !== m[i].x.k ? (g = \"mask\", v = \"mask\", c = PropertyFactory.getProp(this.element, m[i].x, 0, null, this.element), b = createElementID(), (p = createNS(\"filter\")).setAttribute(\"id\", b), (f = createNS(\"feMorphology\")).setAttribute(\"operator\", \"erode\"), f.setAttribute(\"in\", \"SourceGraphic\"), f.setAttribute(\"radius\", \"0\"), p.appendChild(f), s.appendChild(p), a.setAttribute(\"stroke\", \"s\" === m[i].mode ? \"#000000\" : \"#ffffff\")) : (f = null, c = null), this.storedData[i] = {\n                    elem: a,\n                    x: c,\n                    expan: f,\n                    lastPath: \"\",\n                    lastOperator: \"\",\n                    filterId: b,\n                    lastRadius: 0\n                }, \"i\" === m[i].mode) {\n                    h = u.length;\n                    var x = createNS(\"g\");\n                    for(o = 0; o < h; o += 1)x.appendChild(u[o]);\n                    var P = createNS(\"mask\");\n                    P.setAttribute(\"mask-type\", \"alpha\"), P.setAttribute(\"id\", y + \"_\" + d), P.appendChild(a), s.appendChild(P), x.setAttribute(\"mask\", \"url(\" + getLocationHref() + \"#\" + y + \"_\" + d + \")\"), u.length = 0, u.push(x);\n                } else u.push(a);\n                m[i].inv && !this.solidPath && (this.solidPath = this.createLayerSolidPath()), this.viewData[i] = {\n                    elem: a,\n                    lastPath: \"\",\n                    op: PropertyFactory.getProp(this.element, m[i].o, 0, .01, this.element),\n                    prop: ShapePropertyFactory.getShapeProp(this.element, m[i], 3),\n                    invRect: l\n                }, this.viewData[i].prop.k || this.drawPath(m[i], this.viewData[i].prop.v, this.viewData[i]);\n            }\n            for(this.maskElement = createNS(g), n = u.length, i = 0; i < n; i += 1)this.maskElement.appendChild(u[i]);\n            d > 0 && (this.maskElement.setAttribute(\"id\", y), this.element.maskedElement.setAttribute(v, \"url(\" + getLocationHref() + \"#\" + y + \")\"), s.appendChild(this.maskElement)), this.viewData.length && this.element.addRenderableComponent(this);\n        }\n        extendPrototype([\n            DynamicPropertyContainer\n        ], GroupEffect), GroupEffect.prototype.getValue = GroupEffect.prototype.iterateDynamicProperties, GroupEffect.prototype.init = function(t, e) {\n            var r;\n            this.data = t, this.effectElements = [], this.initDynamicPropertyContainer(e);\n            var i, a = this.data.ef.length, s = this.data.ef;\n            for(r = 0; r < a; r += 1){\n                switch(i = null, s[r].ty){\n                    case 0:\n                        i = new SliderEffect(s[r], e, this);\n                        break;\n                    case 1:\n                        i = new AngleEffect(s[r], e, this);\n                        break;\n                    case 2:\n                        i = new ColorEffect(s[r], e, this);\n                        break;\n                    case 3:\n                        i = new PointEffect(s[r], e, this);\n                        break;\n                    case 4:\n                    case 7:\n                        i = new CheckboxEffect(s[r], e, this);\n                        break;\n                    case 10:\n                        i = new LayerIndexEffect(s[r], e, this);\n                        break;\n                    case 11:\n                        i = new MaskIndexEffect(s[r], e, this);\n                        break;\n                    case 5:\n                        i = new EffectsManager(s[r], e, this);\n                        break;\n                    default:\n                        i = new NoValueEffect(s[r], e, this);\n                }\n                i && this.effectElements.push(i);\n            }\n        }, BaseElement.prototype = {\n            checkMasks: function() {\n                if (!this.data.hasMask) return !1;\n                for(var t = 0, e = this.data.masksProperties.length; t < e;){\n                    if (\"n\" !== this.data.masksProperties[t].mode && !1 !== this.data.masksProperties[t].cl) return !0;\n                    t += 1;\n                }\n                return !1;\n            },\n            initExpressions: function() {\n                var t = getExpressionInterfaces();\n                if (t) {\n                    var e = t(\"layer\"), r = t(\"effects\"), i = t(\"shape\"), a = t(\"text\"), s = t(\"comp\");\n                    this.layerInterface = e(this), this.data.hasMask && this.maskManager && this.layerInterface.registerMaskInterface(this.maskManager);\n                    var n = r.createEffectsInterface(this, this.layerInterface);\n                    this.layerInterface.registerEffectsInterface(n), 0 === this.data.ty || this.data.xt ? this.compInterface = s(this) : 4 === this.data.ty ? (this.layerInterface.shapeInterface = i(this.shapesData, this.itemsData, this.layerInterface), this.layerInterface.content = this.layerInterface.shapeInterface) : 5 === this.data.ty && (this.layerInterface.textInterface = a(this), this.layerInterface.text = this.layerInterface.textInterface);\n                }\n            },\n            setBlendMode: function() {\n                var t = getBlendMode(this.data.bm);\n                (this.baseElement || this.layerElement).style[\"mix-blend-mode\"] = t;\n            },\n            initBaseData: function(t, e, r) {\n                this.globalData = e, this.comp = r, this.data = t, this.layerId = createElementID(), this.data.sr || (this.data.sr = 1), this.effectsManager = new EffectsManager(this.data, this, this.dynamicProperties);\n            },\n            getType: function() {\n                return this.type;\n            },\n            sourceRectAtTime: function() {}\n        }, FrameElement.prototype = {\n            initFrame: function() {\n                this._isFirstFrame = !1, this.dynamicProperties = [], this._mdf = !1;\n            },\n            prepareProperties: function(t, e) {\n                var r, i = this.dynamicProperties.length;\n                for(r = 0; r < i; r += 1)(e || this._isParent && \"transform\" === this.dynamicProperties[r].propType) && (this.dynamicProperties[r].getValue(), this.dynamicProperties[r]._mdf && (this.globalData._mdf = !0, this._mdf = !0));\n            },\n            addDynamicProperty: function(t) {\n                -1 === this.dynamicProperties.indexOf(t) && this.dynamicProperties.push(t);\n            }\n        }, FootageElement.prototype.prepareFrame = function() {}, extendPrototype([\n            RenderableElement,\n            BaseElement,\n            FrameElement\n        ], FootageElement), FootageElement.prototype.getBaseElement = function() {\n            return null;\n        }, FootageElement.prototype.renderFrame = function() {}, FootageElement.prototype.destroy = function() {}, FootageElement.prototype.initExpressions = function() {\n            var t = getExpressionInterfaces();\n            if (t) {\n                var e = t(\"footage\");\n                this.layerInterface = e(this);\n            }\n        }, FootageElement.prototype.getFootageData = function() {\n            return this.footageData;\n        }, AudioElement.prototype.prepareFrame = function(t) {\n            if (this.prepareRenderableFrame(t, !0), this.prepareProperties(t, !0), this.tm._placeholder) this._currentTime = t / this.data.sr;\n            else {\n                var e = this.tm.v;\n                this._currentTime = e;\n            }\n            this._volume = this.lv.v[0];\n            var r = this._volume * this._volumeMultiplier;\n            this._previousVolume !== r && (this._previousVolume = r, this.audio.volume(r));\n        }, extendPrototype([\n            RenderableElement,\n            BaseElement,\n            FrameElement\n        ], AudioElement), AudioElement.prototype.renderFrame = function() {\n            this.isInRange && this._canPlay && (this._isPlaying ? (!this.audio.playing() || Math.abs(this._currentTime / this.globalData.frameRate - this.audio.seek()) > .1) && this.audio.seek(this._currentTime / this.globalData.frameRate) : (this.audio.play(), this.audio.seek(this._currentTime / this.globalData.frameRate), this._isPlaying = !0));\n        }, AudioElement.prototype.show = function() {}, AudioElement.prototype.hide = function() {\n            this.audio.pause(), this._isPlaying = !1;\n        }, AudioElement.prototype.pause = function() {\n            this.audio.pause(), this._isPlaying = !1, this._canPlay = !1;\n        }, AudioElement.prototype.resume = function() {\n            this._canPlay = !0;\n        }, AudioElement.prototype.setRate = function(t) {\n            this.audio.rate(t);\n        }, AudioElement.prototype.volume = function(t) {\n            this._volumeMultiplier = t, this._previousVolume = t * this._volume, this.audio.volume(this._previousVolume);\n        }, AudioElement.prototype.getBaseElement = function() {\n            return null;\n        }, AudioElement.prototype.destroy = function() {}, AudioElement.prototype.sourceRectAtTime = function() {}, AudioElement.prototype.initExpressions = function() {}, BaseRenderer.prototype.checkLayers = function(t) {\n            var e, r, i = this.layers.length;\n            for(this.completeLayers = !0, e = i - 1; e >= 0; e -= 1)this.elements[e] || (r = this.layers[e]).ip - r.st <= t - this.layers[e].st && r.op - r.st > t - this.layers[e].st && this.buildItem(e), this.completeLayers = !!this.elements[e] && this.completeLayers;\n            this.checkPendingElements();\n        }, BaseRenderer.prototype.createItem = function(t) {\n            switch(t.ty){\n                case 2:\n                    return this.createImage(t);\n                case 0:\n                    return this.createComp(t);\n                case 1:\n                    return this.createSolid(t);\n                case 3:\n                    return this.createNull(t);\n                case 4:\n                    return this.createShape(t);\n                case 5:\n                    return this.createText(t);\n                case 6:\n                    return this.createAudio(t);\n                case 13:\n                    return this.createCamera(t);\n                case 15:\n                    return this.createFootage(t);\n                default:\n                    return this.createNull(t);\n            }\n        }, BaseRenderer.prototype.createCamera = function() {\n            throw new Error(\"You're using a 3d camera. Try the html renderer.\");\n        }, BaseRenderer.prototype.createAudio = function(t) {\n            return new AudioElement(t, this.globalData, this);\n        }, BaseRenderer.prototype.createFootage = function(t) {\n            return new FootageElement(t, this.globalData, this);\n        }, BaseRenderer.prototype.buildAllItems = function() {\n            var t, e = this.layers.length;\n            for(t = 0; t < e; t += 1)this.buildItem(t);\n            this.checkPendingElements();\n        }, BaseRenderer.prototype.includeLayers = function(t) {\n            var e;\n            this.completeLayers = !1;\n            var r, i = t.length, a = this.layers.length;\n            for(e = 0; e < i; e += 1)for(r = 0; r < a;){\n                if (this.layers[r].id === t[e].id) {\n                    this.layers[r] = t[e];\n                    break;\n                }\n                r += 1;\n            }\n        }, BaseRenderer.prototype.setProjectInterface = function(t) {\n            this.globalData.projectInterface = t;\n        }, BaseRenderer.prototype.initItems = function() {\n            this.globalData.progressiveLoad || this.buildAllItems();\n        }, BaseRenderer.prototype.buildElementParenting = function(t, e, r) {\n            for(var i = this.elements, a = this.layers, s = 0, n = a.length; s < n;)a[s].ind == e && (i[s] && !0 !== i[s] ? (r.push(i[s]), i[s].setAsParent(), void 0 !== a[s].parent ? this.buildElementParenting(t, a[s].parent, r) : t.setHierarchy(r)) : (this.buildItem(s), this.addPendingElement(t))), s += 1;\n        }, BaseRenderer.prototype.addPendingElement = function(t) {\n            this.pendingElements.push(t);\n        }, BaseRenderer.prototype.searchExtraCompositions = function(t) {\n            var e, r = t.length;\n            for(e = 0; e < r; e += 1)if (t[e].xt) {\n                var i = this.createComp(t[e]);\n                i.initExpressions(), this.globalData.projectInterface.registerComposition(i);\n            }\n        }, BaseRenderer.prototype.getElementById = function(t) {\n            var e, r = this.elements.length;\n            for(e = 0; e < r; e += 1)if (this.elements[e].data.ind === t) return this.elements[e];\n            return null;\n        }, BaseRenderer.prototype.getElementByPath = function(t) {\n            var e, r = t.shift();\n            if (\"number\" == typeof r) e = this.elements[r];\n            else {\n                var i, a = this.elements.length;\n                for(i = 0; i < a; i += 1)if (this.elements[i].data.nm === r) {\n                    e = this.elements[i];\n                    break;\n                }\n            }\n            return 0 === t.length ? e : e.getElementByPath(t);\n        }, BaseRenderer.prototype.setupGlobalData = function(t, e) {\n            this.globalData.fontManager = new FontManager, this.globalData.fontManager.addChars(t.chars), this.globalData.fontManager.addFonts(t.fonts, e), this.globalData.getAssetData = this.animationItem.getAssetData.bind(this.animationItem), this.globalData.getAssetsPath = this.animationItem.getAssetsPath.bind(this.animationItem), this.globalData.imageLoader = this.animationItem.imagePreloader, this.globalData.audioController = this.animationItem.audioController, this.globalData.frameId = 0, this.globalData.frameRate = t.fr, this.globalData.nm = t.nm, this.globalData.compSize = {\n                w: t.w,\n                h: t.h\n            };\n        }, TransformElement.prototype = {\n            initTransform: function() {\n                this.finalTransform = {\n                    mProp: this.data.ks ? TransformPropertyFactory.getTransformProperty(this, this.data.ks, this) : {\n                        o: 0\n                    },\n                    _matMdf: !1,\n                    _opMdf: !1,\n                    mat: new Matrix\n                }, this.data.ao && (this.finalTransform.mProp.autoOriented = !0), this.data.ty;\n            },\n            renderTransform: function() {\n                if (this.finalTransform._opMdf = this.finalTransform.mProp.o._mdf || this._isFirstFrame, this.finalTransform._matMdf = this.finalTransform.mProp._mdf || this._isFirstFrame, this.hierarchy) {\n                    var t, e = this.finalTransform.mat, r = 0, i = this.hierarchy.length;\n                    if (!this.finalTransform._matMdf) for(; r < i;){\n                        if (this.hierarchy[r].finalTransform.mProp._mdf) {\n                            this.finalTransform._matMdf = !0;\n                            break;\n                        }\n                        r += 1;\n                    }\n                    if (this.finalTransform._matMdf) for(t = this.finalTransform.mProp.v.props, e.cloneFromProps(t), r = 0; r < i; r += 1)t = this.hierarchy[r].finalTransform.mProp.v.props, e.transform(t[0], t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8], t[9], t[10], t[11], t[12], t[13], t[14], t[15]);\n                }\n            },\n            globalToLocal: function(t) {\n                var e = [];\n                e.push(this.finalTransform);\n                for(var r, i = !0, a = this.comp; i;)a.finalTransform ? (a.data.hasMask && e.splice(0, 0, a.finalTransform), a = a.comp) : i = !1;\n                var s, n = e.length;\n                for(r = 0; r < n; r += 1)s = e[r].mat.applyToPointArray(0, 0, 0), t = [\n                    t[0] - s[0],\n                    t[1] - s[1],\n                    0\n                ];\n                return t;\n            },\n            mHelper: new Matrix\n        }, MaskElement.prototype.getMaskProperty = function(t) {\n            return this.viewData[t].prop;\n        }, MaskElement.prototype.renderFrame = function(t) {\n            var e, r = this.element.finalTransform.mat, i = this.masksProperties.length;\n            for(e = 0; e < i; e += 1)if ((this.viewData[e].prop._mdf || t) && this.drawPath(this.masksProperties[e], this.viewData[e].prop.v, this.viewData[e]), (this.viewData[e].op._mdf || t) && this.viewData[e].elem.setAttribute(\"fill-opacity\", this.viewData[e].op.v), \"n\" !== this.masksProperties[e].mode && (this.viewData[e].invRect && (this.element.finalTransform.mProp._mdf || t) && this.viewData[e].invRect.setAttribute(\"transform\", r.getInverseMatrix().to2dCSS()), this.storedData[e].x && (this.storedData[e].x._mdf || t))) {\n                var a = this.storedData[e].expan;\n                this.storedData[e].x.v < 0 ? (\"erode\" !== this.storedData[e].lastOperator && (this.storedData[e].lastOperator = \"erode\", this.storedData[e].elem.setAttribute(\"filter\", \"url(\" + getLocationHref() + \"#\" + this.storedData[e].filterId + \")\")), a.setAttribute(\"radius\", -this.storedData[e].x.v)) : (\"dilate\" !== this.storedData[e].lastOperator && (this.storedData[e].lastOperator = \"dilate\", this.storedData[e].elem.setAttribute(\"filter\", null)), this.storedData[e].elem.setAttribute(\"stroke-width\", 2 * this.storedData[e].x.v));\n            }\n        }, MaskElement.prototype.getMaskelement = function() {\n            return this.maskElement;\n        }, MaskElement.prototype.createLayerSolidPath = function() {\n            var t = \"M0,0 \";\n            return t += \" h\" + this.globalData.compSize.w, t += \" v\" + this.globalData.compSize.h, t += \" h-\" + this.globalData.compSize.w, t += \" v-\" + this.globalData.compSize.h + \" \";\n        }, MaskElement.prototype.drawPath = function(t, e, r) {\n            var i, a, s = \" M\" + e.v[0][0] + \",\" + e.v[0][1];\n            for(a = e._length, i = 1; i < a; i += 1)s += \" C\" + e.o[i - 1][0] + \",\" + e.o[i - 1][1] + \" \" + e.i[i][0] + \",\" + e.i[i][1] + \" \" + e.v[i][0] + \",\" + e.v[i][1];\n            if (e.c && a > 1 && (s += \" C\" + e.o[i - 1][0] + \",\" + e.o[i - 1][1] + \" \" + e.i[0][0] + \",\" + e.i[0][1] + \" \" + e.v[0][0] + \",\" + e.v[0][1]), r.lastPath !== s) {\n                var n = \"\";\n                r.elem && (e.c && (n = t.inv ? this.solidPath + s : s), r.elem.setAttribute(\"d\", n)), r.lastPath = s;\n            }\n        }, MaskElement.prototype.destroy = function() {\n            this.element = null, this.globalData = null, this.maskElement = null, this.data = null, this.masksProperties = null;\n        };\n        var filtersFactory = function() {\n            var t = {};\n            return t.createFilter = function(t, e) {\n                var r = createNS(\"filter\");\n                r.setAttribute(\"id\", t), !0 !== e && (r.setAttribute(\"filterUnits\", \"objectBoundingBox\"), r.setAttribute(\"x\", \"0%\"), r.setAttribute(\"y\", \"0%\"), r.setAttribute(\"width\", \"100%\"), r.setAttribute(\"height\", \"100%\"));\n                return r;\n            }, t.createAlphaToLuminanceFilter = function() {\n                var t = createNS(\"feColorMatrix\");\n                return t.setAttribute(\"type\", \"matrix\"), t.setAttribute(\"color-interpolation-filters\", \"sRGB\"), t.setAttribute(\"values\", \"0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1\"), t;\n            }, t;\n        }(), featureSupport = function() {\n            var t = {\n                maskType: !0,\n                svgLumaHidden: !0,\n                offscreenCanvas: \"undefined\" != typeof OffscreenCanvas\n            };\n            return (/MSIE 10/i.test(navigator.userAgent) || /MSIE 9/i.test(navigator.userAgent) || /rv:11.0/i.test(navigator.userAgent) || /Edge\\/\\d./i.test(navigator.userAgent)) && (t.maskType = !1), /firefox/i.test(navigator.userAgent) && (t.svgLumaHidden = !1), t;\n        }(), registeredEffects = {}, idPrefix = \"filter_result_\";\n        function SVGEffects(t) {\n            var e, r, i = \"SourceGraphic\", a = t.data.ef ? t.data.ef.length : 0, s = createElementID(), n = filtersFactory.createFilter(s, !0), o = 0;\n            for(this.filters = [], e = 0; e < a; e += 1){\n                r = null;\n                var h = t.data.ef[e].ty;\n                if (registeredEffects[h]) r = new (0, registeredEffects[h].effect)(n, t.effectsManager.effectElements[e], t, idPrefix + o, i), i = idPrefix + o, registeredEffects[h].countsAsEffect && (o += 1);\n                r && this.filters.push(r);\n            }\n            o && (t.globalData.defs.appendChild(n), t.layerElement.setAttribute(\"filter\", \"url(\" + getLocationHref() + \"#\" + s + \")\")), this.filters.length && t.addRenderableComponent(this);\n        }\n        function registerEffect(t, e, r) {\n            registeredEffects[t] = {\n                effect: e,\n                countsAsEffect: r\n            };\n        }\n        function SVGBaseElement() {}\n        function HierarchyElement() {}\n        function RenderableDOMElement() {}\n        function IImageElement(t, e, r) {\n            this.assetData = e.getAssetData(t.refId), this.initElement(t, e, r), this.sourceRect = {\n                top: 0,\n                left: 0,\n                width: this.assetData.w,\n                height: this.assetData.h\n            };\n        }\n        function ProcessedElement(t, e) {\n            this.elem = t, this.pos = e;\n        }\n        function IShapeElement() {}\n        SVGEffects.prototype.renderFrame = function(t) {\n            var e, r = this.filters.length;\n            for(e = 0; e < r; e += 1)this.filters[e].renderFrame(t);\n        }, SVGBaseElement.prototype = {\n            initRendererElement: function() {\n                this.layerElement = createNS(\"g\");\n            },\n            createContainerElements: function() {\n                this.matteElement = createNS(\"g\"), this.transformedElement = this.layerElement, this.maskedElement = this.layerElement, this._sizeChanged = !1;\n                var t = null;\n                if (this.data.td) {\n                    this.matteMasks = {};\n                    var e = createNS(\"g\");\n                    e.setAttribute(\"id\", this.layerId), e.appendChild(this.layerElement), t = e, this.globalData.defs.appendChild(e);\n                } else this.data.tt ? (this.matteElement.appendChild(this.layerElement), t = this.matteElement, this.baseElement = this.matteElement) : this.baseElement = this.layerElement;\n                if (this.data.ln && this.layerElement.setAttribute(\"id\", this.data.ln), this.data.cl && this.layerElement.setAttribute(\"class\", this.data.cl), 0 === this.data.ty && !this.data.hd) {\n                    var r = createNS(\"clipPath\"), i = createNS(\"path\");\n                    i.setAttribute(\"d\", \"M0,0 L\" + this.data.w + \",0 L\" + this.data.w + \",\" + this.data.h + \" L0,\" + this.data.h + \"z\");\n                    var a = createElementID();\n                    if (r.setAttribute(\"id\", a), r.appendChild(i), this.globalData.defs.appendChild(r), this.checkMasks()) {\n                        var s = createNS(\"g\");\n                        s.setAttribute(\"clip-path\", \"url(\" + getLocationHref() + \"#\" + a + \")\"), s.appendChild(this.layerElement), this.transformedElement = s, t ? t.appendChild(this.transformedElement) : this.baseElement = this.transformedElement;\n                    } else this.layerElement.setAttribute(\"clip-path\", \"url(\" + getLocationHref() + \"#\" + a + \")\");\n                }\n                0 !== this.data.bm && this.setBlendMode();\n            },\n            renderElement: function() {\n                this.finalTransform._matMdf && this.transformedElement.setAttribute(\"transform\", this.finalTransform.mat.to2dCSS()), this.finalTransform._opMdf && this.transformedElement.setAttribute(\"opacity\", this.finalTransform.mProp.o.v);\n            },\n            destroyBaseElement: function() {\n                this.layerElement = null, this.matteElement = null, this.maskManager.destroy();\n            },\n            getBaseElement: function() {\n                return this.data.hd ? null : this.baseElement;\n            },\n            createRenderableComponents: function() {\n                this.maskManager = new MaskElement(this.data, this, this.globalData), this.renderableEffectsManager = new SVGEffects(this);\n            },\n            getMatte: function(t) {\n                if (this.matteMasks || (this.matteMasks = {}), !this.matteMasks[t]) {\n                    var e, r, i, a, s = this.layerId + \"_\" + t;\n                    if (1 === t || 3 === t) {\n                        var n = createNS(\"mask\");\n                        n.setAttribute(\"id\", s), n.setAttribute(\"mask-type\", 3 === t ? \"luminance\" : \"alpha\"), (i = createNS(\"use\")).setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", \"#\" + this.layerId), n.appendChild(i), this.globalData.defs.appendChild(n), featureSupport.maskType || 1 !== t || (n.setAttribute(\"mask-type\", \"luminance\"), e = createElementID(), r = filtersFactory.createFilter(e), this.globalData.defs.appendChild(r), r.appendChild(filtersFactory.createAlphaToLuminanceFilter()), (a = createNS(\"g\")).appendChild(i), n.appendChild(a), a.setAttribute(\"filter\", \"url(\" + getLocationHref() + \"#\" + e + \")\"));\n                    } else if (2 === t) {\n                        var o = createNS(\"mask\");\n                        o.setAttribute(\"id\", s), o.setAttribute(\"mask-type\", \"alpha\");\n                        var h = createNS(\"g\");\n                        o.appendChild(h), e = createElementID(), r = filtersFactory.createFilter(e);\n                        var l = createNS(\"feComponentTransfer\");\n                        l.setAttribute(\"in\", \"SourceGraphic\"), r.appendChild(l);\n                        var p = createNS(\"feFuncA\");\n                        p.setAttribute(\"type\", \"table\"), p.setAttribute(\"tableValues\", \"1.0 0.0\"), l.appendChild(p), this.globalData.defs.appendChild(r);\n                        var f = createNS(\"rect\");\n                        f.setAttribute(\"width\", this.comp.data.w), f.setAttribute(\"height\", this.comp.data.h), f.setAttribute(\"x\", \"0\"), f.setAttribute(\"y\", \"0\"), f.setAttribute(\"fill\", \"#ffffff\"), f.setAttribute(\"opacity\", \"0\"), h.setAttribute(\"filter\", \"url(\" + getLocationHref() + \"#\" + e + \")\"), h.appendChild(f), (i = createNS(\"use\")).setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", \"#\" + this.layerId), h.appendChild(i), featureSupport.maskType || (o.setAttribute(\"mask-type\", \"luminance\"), r.appendChild(filtersFactory.createAlphaToLuminanceFilter()), a = createNS(\"g\"), h.appendChild(f), a.appendChild(this.layerElement), h.appendChild(a)), this.globalData.defs.appendChild(o);\n                    }\n                    this.matteMasks[t] = s;\n                }\n                return this.matteMasks[t];\n            },\n            setMatte: function(t) {\n                this.matteElement && this.matteElement.setAttribute(\"mask\", \"url(\" + getLocationHref() + \"#\" + t + \")\");\n            }\n        }, HierarchyElement.prototype = {\n            initHierarchy: function() {\n                this.hierarchy = [], this._isParent = !1, this.checkParenting();\n            },\n            setHierarchy: function(t) {\n                this.hierarchy = t;\n            },\n            setAsParent: function() {\n                this._isParent = !0;\n            },\n            checkParenting: function() {\n                void 0 !== this.data.parent && this.comp.buildElementParenting(this, this.data.parent, []);\n            }\n        }, extendPrototype([\n            RenderableElement,\n            createProxyFunction({\n                initElement: function(t, e, r) {\n                    this.initFrame(), this.initBaseData(t, e, r), this.initTransform(t, e, r), this.initHierarchy(), this.initRenderable(), this.initRendererElement(), this.createContainerElements(), this.createRenderableComponents(), this.createContent(), this.hide();\n                },\n                hide: function() {\n                    this.hidden || this.isInRange && !this.isTransparent || ((this.baseElement || this.layerElement).style.display = \"none\", this.hidden = !0);\n                },\n                show: function() {\n                    this.isInRange && !this.isTransparent && (this.data.hd || ((this.baseElement || this.layerElement).style.display = \"block\"), this.hidden = !1, this._isFirstFrame = !0);\n                },\n                renderFrame: function() {\n                    this.data.hd || this.hidden || (this.renderTransform(), this.renderRenderable(), this.renderElement(), this.renderInnerContent(), this._isFirstFrame && (this._isFirstFrame = !1));\n                },\n                renderInnerContent: function() {},\n                prepareFrame: function(t) {\n                    this._mdf = !1, this.prepareRenderableFrame(t), this.prepareProperties(t, this.isInRange), this.checkTransparency();\n                },\n                destroy: function() {\n                    this.innerElem = null, this.destroyBaseElement();\n                }\n            })\n        ], RenderableDOMElement), extendPrototype([\n            BaseElement,\n            TransformElement,\n            SVGBaseElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableDOMElement\n        ], IImageElement), IImageElement.prototype.createContent = function() {\n            var t = this.globalData.getAssetsPath(this.assetData);\n            this.innerElem = createNS(\"image\"), this.innerElem.setAttribute(\"width\", this.assetData.w + \"px\"), this.innerElem.setAttribute(\"height\", this.assetData.h + \"px\"), this.innerElem.setAttribute(\"preserveAspectRatio\", this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio), this.innerElem.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", t), this.layerElement.appendChild(this.innerElem);\n        }, IImageElement.prototype.sourceRectAtTime = function() {\n            return this.sourceRect;\n        }, IShapeElement.prototype = {\n            addShapeToModifiers: function(t) {\n                var e, r = this.shapeModifiers.length;\n                for(e = 0; e < r; e += 1)this.shapeModifiers[e].addShape(t);\n            },\n            isShapeInAnimatedModifiers: function(t) {\n                for(var e = this.shapeModifiers.length; 0 < e;)if (this.shapeModifiers[0].isAnimatedWithShape(t)) return !0;\n                return !1;\n            },\n            renderModifiers: function() {\n                if (this.shapeModifiers.length) {\n                    var t, e = this.shapes.length;\n                    for(t = 0; t < e; t += 1)this.shapes[t].sh.reset();\n                    for(t = (e = this.shapeModifiers.length) - 1; t >= 0 && !this.shapeModifiers[t].processShapes(this._isFirstFrame); t -= 1);\n                }\n            },\n            searchProcessedElement: function(t) {\n                for(var e = this.processedElements, r = 0, i = e.length; r < i;){\n                    if (e[r].elem === t) return e[r].pos;\n                    r += 1;\n                }\n                return 0;\n            },\n            addProcessedElement: function(t, e) {\n                for(var r = this.processedElements, i = r.length; i;)if (r[i -= 1].elem === t) return void (r[i].pos = e);\n                r.push(new ProcessedElement(t, e));\n            },\n            prepareFrame: function(t) {\n                this.prepareRenderableFrame(t), this.prepareProperties(t, this.isInRange);\n            }\n        };\n        var lineCapEnum = {\n            1: \"butt\",\n            2: \"round\",\n            3: \"square\"\n        }, lineJoinEnum = {\n            1: \"miter\",\n            2: \"round\",\n            3: \"bevel\"\n        };\n        function SVGShapeData(t, e, r) {\n            this.caches = [], this.styles = [], this.transformers = t, this.lStr = \"\", this.sh = r, this.lvl = e, this._isAnimated = !!r.k;\n            for(var i = 0, a = t.length; i < a;){\n                if (t[i].mProps.dynamicProperties.length) {\n                    this._isAnimated = !0;\n                    break;\n                }\n                i += 1;\n            }\n        }\n        function SVGStyleData(t, e) {\n            this.data = t, this.type = t.ty, this.d = \"\", this.lvl = e, this._mdf = !1, this.closed = !0 === t.hd, this.pElem = createNS(\"path\"), this.msElem = null;\n        }\n        function DashProperty(t, e, r, i) {\n            var a;\n            this.elem = t, this.frameId = -1, this.dataProps = createSizedArray(e.length), this.renderer = r, this.k = !1, this.dashStr = \"\", this.dashArray = createTypedArray(\"float32\", e.length ? e.length - 1 : 0), this.dashoffset = createTypedArray(\"float32\", 1), this.initDynamicPropertyContainer(i);\n            var s, n = e.length || 0;\n            for(a = 0; a < n; a += 1)s = PropertyFactory.getProp(t, e[a].v, 0, 0, this), this.k = s.k || this.k, this.dataProps[a] = {\n                n: e[a].n,\n                p: s\n            };\n            this.k || this.getValue(!0), this._isAnimated = this.k;\n        }\n        function SVGStrokeStyleData(t, e, r) {\n            this.initDynamicPropertyContainer(t), this.getValue = this.iterateDynamicProperties, this.o = PropertyFactory.getProp(t, e.o, 0, .01, this), this.w = PropertyFactory.getProp(t, e.w, 0, null, this), this.d = new DashProperty(t, e.d || {}, \"svg\", this), this.c = PropertyFactory.getProp(t, e.c, 1, 255, this), this.style = r, this._isAnimated = !!this._isAnimated;\n        }\n        function SVGFillStyleData(t, e, r) {\n            this.initDynamicPropertyContainer(t), this.getValue = this.iterateDynamicProperties, this.o = PropertyFactory.getProp(t, e.o, 0, .01, this), this.c = PropertyFactory.getProp(t, e.c, 1, 255, this), this.style = r;\n        }\n        function SVGNoStyleData(t, e, r) {\n            this.initDynamicPropertyContainer(t), this.getValue = this.iterateDynamicProperties, this.style = r;\n        }\n        function GradientProperty(t, e, r) {\n            this.data = e, this.c = createTypedArray(\"uint8c\", 4 * e.p);\n            var i = e.k.k[0].s ? e.k.k[0].s.length - 4 * e.p : e.k.k.length - 4 * e.p;\n            this.o = createTypedArray(\"float32\", i), this._cmdf = !1, this._omdf = !1, this._collapsable = this.checkCollapsable(), this._hasOpacity = i, this.initDynamicPropertyContainer(r), this.prop = PropertyFactory.getProp(t, e.k, 1, null, this), this.k = this.prop.k, this.getValue(!0);\n        }\n        function SVGGradientFillStyleData(t, e, r) {\n            this.initDynamicPropertyContainer(t), this.getValue = this.iterateDynamicProperties, this.initGradientData(t, e, r);\n        }\n        function SVGGradientStrokeStyleData(t, e, r) {\n            this.initDynamicPropertyContainer(t), this.getValue = this.iterateDynamicProperties, this.w = PropertyFactory.getProp(t, e.w, 0, null, this), this.d = new DashProperty(t, e.d || {}, \"svg\", this), this.initGradientData(t, e, r), this._isAnimated = !!this._isAnimated;\n        }\n        function ShapeGroupData() {\n            this.it = [], this.prevViewData = [], this.gr = createNS(\"g\");\n        }\n        function SVGTransformData(t, e, r) {\n            this.transform = {\n                mProps: t,\n                op: e,\n                container: r\n            }, this.elements = [], this._isAnimated = this.transform.mProps.dynamicProperties.length || this.transform.op.effectsSequence.length;\n        }\n        SVGShapeData.prototype.setAsAnimated = function() {\n            this._isAnimated = !0;\n        }, SVGStyleData.prototype.reset = function() {\n            this.d = \"\", this._mdf = !1;\n        }, DashProperty.prototype.getValue = function(t) {\n            if ((this.elem.globalData.frameId !== this.frameId || t) && (this.frameId = this.elem.globalData.frameId, this.iterateDynamicProperties(), this._mdf = this._mdf || t, this._mdf)) {\n                var e = 0, r = this.dataProps.length;\n                for(\"svg\" === this.renderer && (this.dashStr = \"\"), e = 0; e < r; e += 1)\"o\" !== this.dataProps[e].n ? \"svg\" === this.renderer ? this.dashStr += \" \" + this.dataProps[e].p.v : this.dashArray[e] = this.dataProps[e].p.v : this.dashoffset[0] = this.dataProps[e].p.v;\n            }\n        }, extendPrototype([\n            DynamicPropertyContainer\n        ], DashProperty), extendPrototype([\n            DynamicPropertyContainer\n        ], SVGStrokeStyleData), extendPrototype([\n            DynamicPropertyContainer\n        ], SVGFillStyleData), extendPrototype([\n            DynamicPropertyContainer\n        ], SVGNoStyleData), GradientProperty.prototype.comparePoints = function(t, e) {\n            for(var r = 0, i = this.o.length / 2; r < i;){\n                if (Math.abs(t[4 * r] - t[4 * e + 2 * r]) > .01) return !1;\n                r += 1;\n            }\n            return !0;\n        }, GradientProperty.prototype.checkCollapsable = function() {\n            if (this.o.length / 2 != this.c.length / 4) return !1;\n            if (this.data.k.k[0].s) for(var t = 0, e = this.data.k.k.length; t < e;){\n                if (!this.comparePoints(this.data.k.k[t].s, this.data.p)) return !1;\n                t += 1;\n            }\n            else if (!this.comparePoints(this.data.k.k, this.data.p)) return !1;\n            return !0;\n        }, GradientProperty.prototype.getValue = function(t) {\n            if (this.prop.getValue(), this._mdf = !1, this._cmdf = !1, this._omdf = !1, this.prop._mdf || t) {\n                var e, r, i, a = 4 * this.data.p;\n                for(e = 0; e < a; e += 1)r = e % 4 == 0 ? 100 : 255, i = Math.round(this.prop.v[e] * r), this.c[e] !== i && (this.c[e] = i, this._cmdf = !t);\n                if (this.o.length) for(a = this.prop.v.length, e = 4 * this.data.p; e < a; e += 1)r = e % 2 == 0 ? 100 : 1, i = e % 2 == 0 ? Math.round(100 * this.prop.v[e]) : this.prop.v[e], this.o[e - 4 * this.data.p] !== i && (this.o[e - 4 * this.data.p] = i, this._omdf = !t);\n                this._mdf = !t;\n            }\n        }, extendPrototype([\n            DynamicPropertyContainer\n        ], GradientProperty), SVGGradientFillStyleData.prototype.initGradientData = function(t, e, r) {\n            this.o = PropertyFactory.getProp(t, e.o, 0, .01, this), this.s = PropertyFactory.getProp(t, e.s, 1, null, this), this.e = PropertyFactory.getProp(t, e.e, 1, null, this), this.h = PropertyFactory.getProp(t, e.h || {\n                k: 0\n            }, 0, .01, this), this.a = PropertyFactory.getProp(t, e.a || {\n                k: 0\n            }, 0, degToRads, this), this.g = new GradientProperty(t, e.g, this), this.style = r, this.stops = [], this.setGradientData(r.pElem, e), this.setGradientOpacity(e, r), this._isAnimated = !!this._isAnimated;\n        }, SVGGradientFillStyleData.prototype.setGradientData = function(t, e) {\n            var r = createElementID(), i = createNS(1 === e.t ? \"linearGradient\" : \"radialGradient\");\n            i.setAttribute(\"id\", r), i.setAttribute(\"spreadMethod\", \"pad\"), i.setAttribute(\"gradientUnits\", \"userSpaceOnUse\");\n            var a, s, n, o = [];\n            for(n = 4 * e.g.p, s = 0; s < n; s += 4)a = createNS(\"stop\"), i.appendChild(a), o.push(a);\n            t.setAttribute(\"gf\" === e.ty ? \"fill\" : \"stroke\", \"url(\" + getLocationHref() + \"#\" + r + \")\"), this.gf = i, this.cst = o;\n        }, SVGGradientFillStyleData.prototype.setGradientOpacity = function(t, e) {\n            if (this.g._hasOpacity && !this.g._collapsable) {\n                var r, i, a, s = createNS(\"mask\"), n = createNS(\"path\");\n                s.appendChild(n);\n                var o = createElementID(), h = createElementID();\n                s.setAttribute(\"id\", h);\n                var l = createNS(1 === t.t ? \"linearGradient\" : \"radialGradient\");\n                l.setAttribute(\"id\", o), l.setAttribute(\"spreadMethod\", \"pad\"), l.setAttribute(\"gradientUnits\", \"userSpaceOnUse\"), a = t.g.k.k[0].s ? t.g.k.k[0].s.length : t.g.k.k.length;\n                var p = this.stops;\n                for(i = 4 * t.g.p; i < a; i += 2)(r = createNS(\"stop\")).setAttribute(\"stop-color\", \"rgb(255,255,255)\"), l.appendChild(r), p.push(r);\n                n.setAttribute(\"gf\" === t.ty ? \"fill\" : \"stroke\", \"url(\" + getLocationHref() + \"#\" + o + \")\"), \"gs\" === t.ty && (n.setAttribute(\"stroke-linecap\", lineCapEnum[t.lc || 2]), n.setAttribute(\"stroke-linejoin\", lineJoinEnum[t.lj || 2]), 1 === t.lj && n.setAttribute(\"stroke-miterlimit\", t.ml)), this.of = l, this.ms = s, this.ost = p, this.maskId = h, e.msElem = n;\n            }\n        }, extendPrototype([\n            DynamicPropertyContainer\n        ], SVGGradientFillStyleData), extendPrototype([\n            SVGGradientFillStyleData,\n            DynamicPropertyContainer\n        ], SVGGradientStrokeStyleData);\n        var buildShapeString = function(t, e, r, i) {\n            if (0 === e) return \"\";\n            var a, s = t.o, n = t.i, o = t.v, h = \" M\" + i.applyToPointStringified(o[0][0], o[0][1]);\n            for(a = 1; a < e; a += 1)h += \" C\" + i.applyToPointStringified(s[a - 1][0], s[a - 1][1]) + \" \" + i.applyToPointStringified(n[a][0], n[a][1]) + \" \" + i.applyToPointStringified(o[a][0], o[a][1]);\n            return r && e && (h += \" C\" + i.applyToPointStringified(s[a - 1][0], s[a - 1][1]) + \" \" + i.applyToPointStringified(n[0][0], n[0][1]) + \" \" + i.applyToPointStringified(o[0][0], o[0][1]), h += \"z\"), h;\n        }, SVGElementsRenderer = function() {\n            var t = new Matrix, e = new Matrix;\n            function r(t, e, r) {\n                (r || e.transform.op._mdf) && e.transform.container.setAttribute(\"opacity\", e.transform.op.v), (r || e.transform.mProps._mdf) && e.transform.container.setAttribute(\"transform\", e.transform.mProps.v.to2dCSS());\n            }\n            function i() {}\n            function a(r, i, a) {\n                var s, n, o, h, l, p, f, c, m, d, u, y = i.styles.length, g = i.lvl;\n                for(p = 0; p < y; p += 1){\n                    if (h = i.sh._mdf || a, i.styles[p].lvl < g) {\n                        for(c = e.reset(), d = g - i.styles[p].lvl, u = i.transformers.length - 1; !h && d > 0;)h = i.transformers[u].mProps._mdf || h, d -= 1, u -= 1;\n                        if (h) for(d = g - i.styles[p].lvl, u = i.transformers.length - 1; d > 0;)m = i.transformers[u].mProps.v.props, c.transform(m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]), d -= 1, u -= 1;\n                    } else c = t;\n                    if (n = (f = i.sh.paths)._length, h) {\n                        for(o = \"\", s = 0; s < n; s += 1)(l = f.shapes[s]) && l._length && (o += buildShapeString(l, l._length, l.c, c));\n                        i.caches[p] = o;\n                    } else o = i.caches[p];\n                    i.styles[p].d += !0 === r.hd ? \"\" : o, i.styles[p]._mdf = h || i.styles[p]._mdf;\n                }\n            }\n            function s(t, e, r) {\n                var i = e.style;\n                (e.c._mdf || r) && i.pElem.setAttribute(\"fill\", \"rgb(\" + bmFloor(e.c.v[0]) + \",\" + bmFloor(e.c.v[1]) + \",\" + bmFloor(e.c.v[2]) + \")\"), (e.o._mdf || r) && i.pElem.setAttribute(\"fill-opacity\", e.o.v);\n            }\n            function n(t, e, r) {\n                o(t, e, r), h(t, e, r);\n            }\n            function o(t, e, r) {\n                var i, a, s, n, o, h = e.gf, l = e.g._hasOpacity, p = e.s.v, f = e.e.v;\n                if (e.o._mdf || r) {\n                    var c = \"gf\" === t.ty ? \"fill-opacity\" : \"stroke-opacity\";\n                    e.style.pElem.setAttribute(c, e.o.v);\n                }\n                if (e.s._mdf || r) {\n                    var m = 1 === t.t ? \"x1\" : \"cx\", d = \"x1\" === m ? \"y1\" : \"cy\";\n                    h.setAttribute(m, p[0]), h.setAttribute(d, p[1]), l && !e.g._collapsable && (e.of.setAttribute(m, p[0]), e.of.setAttribute(d, p[1]));\n                }\n                if (e.g._cmdf || r) {\n                    i = e.cst;\n                    var u = e.g.c;\n                    for(s = i.length, a = 0; a < s; a += 1)(n = i[a]).setAttribute(\"offset\", u[4 * a] + \"%\"), n.setAttribute(\"stop-color\", \"rgb(\" + u[4 * a + 1] + \",\" + u[4 * a + 2] + \",\" + u[4 * a + 3] + \")\");\n                }\n                if (l && (e.g._omdf || r)) {\n                    var y = e.g.o;\n                    for(s = (i = e.g._collapsable ? e.cst : e.ost).length, a = 0; a < s; a += 1)n = i[a], e.g._collapsable || n.setAttribute(\"offset\", y[2 * a] + \"%\"), n.setAttribute(\"stop-opacity\", y[2 * a + 1]);\n                }\n                if (1 === t.t) (e.e._mdf || r) && (h.setAttribute(\"x2\", f[0]), h.setAttribute(\"y2\", f[1]), l && !e.g._collapsable && (e.of.setAttribute(\"x2\", f[0]), e.of.setAttribute(\"y2\", f[1])));\n                else if ((e.s._mdf || e.e._mdf || r) && (o = Math.sqrt(Math.pow(p[0] - f[0], 2) + Math.pow(p[1] - f[1], 2)), h.setAttribute(\"r\", o), l && !e.g._collapsable && e.of.setAttribute(\"r\", o)), e.e._mdf || e.h._mdf || e.a._mdf || r) {\n                    o || (o = Math.sqrt(Math.pow(p[0] - f[0], 2) + Math.pow(p[1] - f[1], 2)));\n                    var g = Math.atan2(f[1] - p[1], f[0] - p[0]), v = e.h.v;\n                    v >= 1 ? v = .99 : v <= -1 && (v = -.99);\n                    var b = o * v, x = Math.cos(g + e.a.v) * b + p[0], P = Math.sin(g + e.a.v) * b + p[1];\n                    h.setAttribute(\"fx\", x), h.setAttribute(\"fy\", P), l && !e.g._collapsable && (e.of.setAttribute(\"fx\", x), e.of.setAttribute(\"fy\", P));\n                }\n            }\n            function h(t, e, r) {\n                var i = e.style, a = e.d;\n                a && (a._mdf || r) && a.dashStr && (i.pElem.setAttribute(\"stroke-dasharray\", a.dashStr), i.pElem.setAttribute(\"stroke-dashoffset\", a.dashoffset[0])), e.c && (e.c._mdf || r) && i.pElem.setAttribute(\"stroke\", \"rgb(\" + bmFloor(e.c.v[0]) + \",\" + bmFloor(e.c.v[1]) + \",\" + bmFloor(e.c.v[2]) + \")\"), (e.o._mdf || r) && i.pElem.setAttribute(\"stroke-opacity\", e.o.v), (e.w._mdf || r) && (i.pElem.setAttribute(\"stroke-width\", e.w.v), i.msElem && i.msElem.setAttribute(\"stroke-width\", e.w.v));\n            }\n            return {\n                createRenderFunction: function(t) {\n                    switch(t.ty){\n                        case \"fl\":\n                            return s;\n                        case \"gf\":\n                            return o;\n                        case \"gs\":\n                            return n;\n                        case \"st\":\n                            return h;\n                        case \"sh\":\n                        case \"el\":\n                        case \"rc\":\n                        case \"sr\":\n                            return a;\n                        case \"tr\":\n                            return r;\n                        case \"no\":\n                            return i;\n                        default:\n                            return null;\n                    }\n                }\n            };\n        }();\n        function SVGShapeElement(t, e, r) {\n            this.shapes = [], this.shapesData = t.shapes, this.stylesList = [], this.shapeModifiers = [], this.itemsData = [], this.processedElements = [], this.animatedContents = [], this.initElement(t, e, r), this.prevViewData = [];\n        }\n        function LetterProps(t, e, r, i, a, s) {\n            this.o = t, this.sw = e, this.sc = r, this.fc = i, this.m = a, this.p = s, this._mdf = {\n                o: !0,\n                sw: !!e,\n                sc: !!r,\n                fc: !!i,\n                m: !0,\n                p: !0\n            };\n        }\n        function TextProperty(t, e) {\n            this._frameId = initialDefaultFrame, this.pv = \"\", this.v = \"\", this.kf = !1, this._isFirstFrame = !0, this._mdf = !1, this.data = e, this.elem = t, this.comp = this.elem.comp, this.keysIndex = 0, this.canResize = !1, this.minimumFontSize = 1, this.effectsSequence = [], this.currentData = {\n                ascent: 0,\n                boxWidth: this.defaultBoxWidth,\n                f: \"\",\n                fStyle: \"\",\n                fWeight: \"\",\n                fc: \"\",\n                j: \"\",\n                justifyOffset: \"\",\n                l: [],\n                lh: 0,\n                lineWidths: [],\n                ls: \"\",\n                of: \"\",\n                s: \"\",\n                sc: \"\",\n                sw: 0,\n                t: 0,\n                tr: 0,\n                sz: 0,\n                ps: null,\n                fillColorAnim: !1,\n                strokeColorAnim: !1,\n                strokeWidthAnim: !1,\n                yOffset: 0,\n                finalSize: 0,\n                finalText: [],\n                finalLineHeight: 0,\n                __complete: !1\n            }, this.copyData(this.currentData, this.data.d.k[0].s), this.searchProperty() || this.completeTextData(this.currentData);\n        }\n        extendPrototype([\n            BaseElement,\n            TransformElement,\n            SVGBaseElement,\n            IShapeElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableDOMElement\n        ], SVGShapeElement), SVGShapeElement.prototype.initSecondaryElement = function() {}, SVGShapeElement.prototype.identityMatrix = new Matrix, SVGShapeElement.prototype.buildExpressionInterface = function() {}, SVGShapeElement.prototype.createContent = function() {\n            this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], !0), this.filterUniqueShapes();\n        }, SVGShapeElement.prototype.filterUniqueShapes = function() {\n            var t, e, r, i, a = this.shapes.length, s = this.stylesList.length, n = [], o = !1;\n            for(r = 0; r < s; r += 1){\n                for(i = this.stylesList[r], o = !1, n.length = 0, t = 0; t < a; t += 1)-1 !== (e = this.shapes[t]).styles.indexOf(i) && (n.push(e), o = e._isAnimated || o);\n                n.length > 1 && o && this.setShapesAsAnimated(n);\n            }\n        }, SVGShapeElement.prototype.setShapesAsAnimated = function(t) {\n            var e, r = t.length;\n            for(e = 0; e < r; e += 1)t[e].setAsAnimated();\n        }, SVGShapeElement.prototype.createStyleElement = function(t, e) {\n            var r, i = new SVGStyleData(t, e), a = i.pElem;\n            if (\"st\" === t.ty) r = new SVGStrokeStyleData(this, t, i);\n            else if (\"fl\" === t.ty) r = new SVGFillStyleData(this, t, i);\n            else if (\"gf\" === t.ty || \"gs\" === t.ty) {\n                r = new (\"gf\" === t.ty ? SVGGradientFillStyleData : SVGGradientStrokeStyleData)(this, t, i), this.globalData.defs.appendChild(r.gf), r.maskId && (this.globalData.defs.appendChild(r.ms), this.globalData.defs.appendChild(r.of), a.setAttribute(\"mask\", \"url(\" + getLocationHref() + \"#\" + r.maskId + \")\"));\n            } else \"no\" === t.ty && (r = new SVGNoStyleData(this, t, i));\n            return \"st\" !== t.ty && \"gs\" !== t.ty || (a.setAttribute(\"stroke-linecap\", lineCapEnum[t.lc || 2]), a.setAttribute(\"stroke-linejoin\", lineJoinEnum[t.lj || 2]), a.setAttribute(\"fill-opacity\", \"0\"), 1 === t.lj && a.setAttribute(\"stroke-miterlimit\", t.ml)), 2 === t.r && a.setAttribute(\"fill-rule\", \"evenodd\"), t.ln && a.setAttribute(\"id\", t.ln), t.cl && a.setAttribute(\"class\", t.cl), t.bm && (a.style[\"mix-blend-mode\"] = getBlendMode(t.bm)), this.stylesList.push(i), this.addToAnimatedContents(t, r), r;\n        }, SVGShapeElement.prototype.createGroupElement = function(t) {\n            var e = new ShapeGroupData;\n            return t.ln && e.gr.setAttribute(\"id\", t.ln), t.cl && e.gr.setAttribute(\"class\", t.cl), t.bm && (e.gr.style[\"mix-blend-mode\"] = getBlendMode(t.bm)), e;\n        }, SVGShapeElement.prototype.createTransformElement = function(t, e) {\n            var r = TransformPropertyFactory.getTransformProperty(this, t, this), i = new SVGTransformData(r, r.o, e);\n            return this.addToAnimatedContents(t, i), i;\n        }, SVGShapeElement.prototype.createShapeElement = function(t, e, r) {\n            var i = 4;\n            \"rc\" === t.ty ? i = 5 : \"el\" === t.ty ? i = 6 : \"sr\" === t.ty && (i = 7);\n            var a = new SVGShapeData(e, r, ShapePropertyFactory.getShapeProp(this, t, i, this));\n            return this.shapes.push(a), this.addShapeToModifiers(a), this.addToAnimatedContents(t, a), a;\n        }, SVGShapeElement.prototype.addToAnimatedContents = function(t, e) {\n            for(var r = 0, i = this.animatedContents.length; r < i;){\n                if (this.animatedContents[r].element === e) return;\n                r += 1;\n            }\n            this.animatedContents.push({\n                fn: SVGElementsRenderer.createRenderFunction(t),\n                element: e,\n                data: t\n            });\n        }, SVGShapeElement.prototype.setElementStyles = function(t) {\n            var e, r = t.styles, i = this.stylesList.length;\n            for(e = 0; e < i; e += 1)this.stylesList[e].closed || r.push(this.stylesList[e]);\n        }, SVGShapeElement.prototype.reloadShapes = function() {\n            var t;\n            this._isFirstFrame = !0;\n            var e = this.itemsData.length;\n            for(t = 0; t < e; t += 1)this.prevViewData[t] = this.itemsData[t];\n            for(this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.layerElement, 0, [], !0), this.filterUniqueShapes(), e = this.dynamicProperties.length, t = 0; t < e; t += 1)this.dynamicProperties[t].getValue();\n            this.renderModifiers();\n        }, SVGShapeElement.prototype.searchShapes = function(t, e, r, i, a, s, n) {\n            var o, h, l, p, f, c, m = [].concat(s), d = t.length - 1, u = [], y = [];\n            for(o = d; o >= 0; o -= 1){\n                if ((c = this.searchProcessedElement(t[o])) ? e[o] = r[c - 1] : t[o]._render = n, \"fl\" === t[o].ty || \"st\" === t[o].ty || \"gf\" === t[o].ty || \"gs\" === t[o].ty || \"no\" === t[o].ty) c ? e[o].style.closed = !1 : e[o] = this.createStyleElement(t[o], a), t[o]._render && e[o].style.pElem.parentNode !== i && i.appendChild(e[o].style.pElem), u.push(e[o].style);\n                else if (\"gr\" === t[o].ty) {\n                    if (c) for(l = e[o].it.length, h = 0; h < l; h += 1)e[o].prevViewData[h] = e[o].it[h];\n                    else e[o] = this.createGroupElement(t[o]);\n                    this.searchShapes(t[o].it, e[o].it, e[o].prevViewData, e[o].gr, a + 1, m, n), t[o]._render && e[o].gr.parentNode !== i && i.appendChild(e[o].gr);\n                } else \"tr\" === t[o].ty ? (c || (e[o] = this.createTransformElement(t[o], i)), p = e[o].transform, m.push(p)) : \"sh\" === t[o].ty || \"rc\" === t[o].ty || \"el\" === t[o].ty || \"sr\" === t[o].ty ? (c || (e[o] = this.createShapeElement(t[o], m, a)), this.setElementStyles(e[o])) : \"tm\" === t[o].ty || \"rd\" === t[o].ty || \"ms\" === t[o].ty || \"pb\" === t[o].ty || \"zz\" === t[o].ty || \"op\" === t[o].ty ? (c ? (f = e[o]).closed = !1 : ((f = ShapeModifiers.getModifier(t[o].ty)).init(this, t[o]), e[o] = f, this.shapeModifiers.push(f)), y.push(f)) : \"rp\" === t[o].ty && (c ? (f = e[o]).closed = !0 : (f = ShapeModifiers.getModifier(t[o].ty), e[o] = f, f.init(this, t, o, e), this.shapeModifiers.push(f), n = !1), y.push(f));\n                this.addProcessedElement(t[o], o + 1);\n            }\n            for(d = u.length, o = 0; o < d; o += 1)u[o].closed = !0;\n            for(d = y.length, o = 0; o < d; o += 1)y[o].closed = !0;\n        }, SVGShapeElement.prototype.renderInnerContent = function() {\n            var t;\n            this.renderModifiers();\n            var e = this.stylesList.length;\n            for(t = 0; t < e; t += 1)this.stylesList[t].reset();\n            for(this.renderShape(), t = 0; t < e; t += 1)(this.stylesList[t]._mdf || this._isFirstFrame) && (this.stylesList[t].msElem && (this.stylesList[t].msElem.setAttribute(\"d\", this.stylesList[t].d), this.stylesList[t].d = \"M0 0\" + this.stylesList[t].d), this.stylesList[t].pElem.setAttribute(\"d\", this.stylesList[t].d || \"M0 0\"));\n        }, SVGShapeElement.prototype.renderShape = function() {\n            var t, e, r = this.animatedContents.length;\n            for(t = 0; t < r; t += 1)e = this.animatedContents[t], (this._isFirstFrame || e.element._isAnimated) && !0 !== e.data && e.fn(e.data, e.element, this._isFirstFrame);\n        }, SVGShapeElement.prototype.destroy = function() {\n            this.destroyBaseElement(), this.shapesData = null, this.itemsData = null;\n        }, LetterProps.prototype.update = function(t, e, r, i, a, s) {\n            this._mdf.o = !1, this._mdf.sw = !1, this._mdf.sc = !1, this._mdf.fc = !1, this._mdf.m = !1, this._mdf.p = !1;\n            var n = !1;\n            return this.o !== t && (this.o = t, this._mdf.o = !0, n = !0), this.sw !== e && (this.sw = e, this._mdf.sw = !0, n = !0), this.sc !== r && (this.sc = r, this._mdf.sc = !0, n = !0), this.fc !== i && (this.fc = i, this._mdf.fc = !0, n = !0), this.m !== a && (this.m = a, this._mdf.m = !0, n = !0), !s.length || this.p[0] === s[0] && this.p[1] === s[1] && this.p[4] === s[4] && this.p[5] === s[5] && this.p[12] === s[12] && this.p[13] === s[13] || (this.p = s, this._mdf.p = !0, n = !0), n;\n        }, TextProperty.prototype.defaultBoxWidth = [\n            0,\n            0\n        ], TextProperty.prototype.copyData = function(t, e) {\n            for(var r in e)Object.prototype.hasOwnProperty.call(e, r) && (t[r] = e[r]);\n            return t;\n        }, TextProperty.prototype.setCurrentData = function(t) {\n            t.__complete || this.completeTextData(t), this.currentData = t, this.currentData.boxWidth = this.currentData.boxWidth || this.defaultBoxWidth, this._mdf = !0;\n        }, TextProperty.prototype.searchProperty = function() {\n            return this.searchKeyframes();\n        }, TextProperty.prototype.searchKeyframes = function() {\n            return this.kf = this.data.d.k.length > 1, this.kf && this.addEffect(this.getKeyframeValue.bind(this)), this.kf;\n        }, TextProperty.prototype.addEffect = function(t) {\n            this.effectsSequence.push(t), this.elem.addDynamicProperty(this);\n        }, TextProperty.prototype.getValue = function(t) {\n            if (this.elem.globalData.frameId !== this.frameId && this.effectsSequence.length || t) {\n                this.currentData.t = this.data.d.k[this.keysIndex].s.t;\n                var e = this.currentData, r = this.keysIndex;\n                if (this.lock) this.setCurrentData(this.currentData);\n                else {\n                    var i;\n                    this.lock = !0, this._mdf = !1;\n                    var a = this.effectsSequence.length, s = t || this.data.d.k[this.keysIndex].s;\n                    for(i = 0; i < a; i += 1)s = r !== this.keysIndex ? this.effectsSequence[i](s, s.t) : this.effectsSequence[i](this.currentData, s.t);\n                    e !== s && this.setCurrentData(s), this.v = this.currentData, this.pv = this.v, this.lock = !1, this.frameId = this.elem.globalData.frameId;\n                }\n            }\n        }, TextProperty.prototype.getKeyframeValue = function() {\n            for(var t = this.data.d.k, e = this.elem.comp.renderedFrame, r = 0, i = t.length; r <= i - 1 && !(r === i - 1 || t[r + 1].t > e);)r += 1;\n            return this.keysIndex !== r && (this.keysIndex = r), this.data.d.k[this.keysIndex].s;\n        }, TextProperty.prototype.buildFinalText = function(t) {\n            for(var e, r, i = [], a = 0, s = t.length, n = !1; a < s;)e = t.charCodeAt(a), FontManager.isCombinedCharacter(e) ? i[i.length - 1] += t.charAt(a) : e >= 55296 && e <= 56319 ? (r = t.charCodeAt(a + 1)) >= 56320 && r <= 57343 ? (n || FontManager.isModifier(e, r) ? (i[i.length - 1] += t.substr(a, 2), n = !1) : i.push(t.substr(a, 2)), a += 1) : i.push(t.charAt(a)) : e > 56319 ? (r = t.charCodeAt(a + 1), FontManager.isZeroWidthJoiner(e, r) ? (n = !0, i[i.length - 1] += t.substr(a, 2), a += 1) : i.push(t.charAt(a))) : FontManager.isZeroWidthJoiner(e) ? (i[i.length - 1] += t.charAt(a), n = !0) : i.push(t.charAt(a)), a += 1;\n            return i;\n        }, TextProperty.prototype.completeTextData = function(t) {\n            t.__complete = !0;\n            var e, r, i, a, s, n, o, h = this.elem.globalData.fontManager, l = this.data, p = [], f = 0, c = l.m.g, m = 0, d = 0, u = 0, y = [], g = 0, v = 0, b = h.getFontByName(t.f), x = 0, P = getFontProperties(b);\n            t.fWeight = P.weight, t.fStyle = P.style, t.finalSize = t.s, t.finalText = this.buildFinalText(t.t), r = t.finalText.length, t.finalLineHeight = t.lh;\n            var E, S = t.tr / 1e3 * t.finalSize;\n            if (t.sz) for(var C, _, A = !0, k = t.sz[0], w = t.sz[1]; A;){\n                C = 0, g = 0, r = (_ = this.buildFinalText(t.t)).length, S = t.tr / 1e3 * t.finalSize;\n                var T = -1;\n                for(e = 0; e < r; e += 1)E = _[e].charCodeAt(0), i = !1, \" \" === _[e] ? T = e : 13 !== E && 3 !== E || (g = 0, i = !0, C += t.finalLineHeight || 1.2 * t.finalSize), h.chars ? (o = h.getCharData(_[e], b.fStyle, b.fFamily), x = i ? 0 : o.w * t.finalSize / 100) : x = h.measureText(_[e], t.f, t.finalSize), g + x > k && \" \" !== _[e] ? (-1 === T ? r += 1 : e = T, C += t.finalLineHeight || 1.2 * t.finalSize, _.splice(e, T === e ? 1 : 0, \"\\r\"), T = -1, g = 0) : (g += x, g += S);\n                C += b.ascent * t.finalSize / 100, this.canResize && t.finalSize > this.minimumFontSize && w < C ? (t.finalSize -= 1, t.finalLineHeight = t.finalSize * t.lh / t.s) : (t.finalText = _, r = t.finalText.length, A = !1);\n            }\n            g = -S, x = 0;\n            var M, D = 0;\n            for(e = 0; e < r; e += 1)if (i = !1, 13 === (E = (M = t.finalText[e]).charCodeAt(0)) || 3 === E ? (D = 0, y.push(g), v = g > v ? g : v, g = -2 * S, a = \"\", i = !0, u += 1) : a = M, h.chars ? (o = h.getCharData(M, b.fStyle, h.getFontByName(t.f).fFamily), x = i ? 0 : o.w * t.finalSize / 100) : x = h.measureText(a, t.f, t.finalSize), \" \" === M ? D += x + S : (g += x + S + D, D = 0), p.push({\n                l: x,\n                an: x,\n                add: m,\n                n: i,\n                anIndexes: [],\n                val: a,\n                line: u,\n                animatorJustifyOffset: 0\n            }), 2 == c) {\n                if (m += x, \"\" === a || \" \" === a || e === r - 1) {\n                    for(\"\" !== a && \" \" !== a || (m -= x); d <= e;)p[d].an = m, p[d].ind = f, p[d].extra = x, d += 1;\n                    f += 1, m = 0;\n                }\n            } else if (3 == c) {\n                if (m += x, \"\" === a || e === r - 1) {\n                    for(\"\" === a && (m -= x); d <= e;)p[d].an = m, p[d].ind = f, p[d].extra = x, d += 1;\n                    m = 0, f += 1;\n                }\n            } else p[f].ind = f, p[f].extra = 0, f += 1;\n            if (t.l = p, v = g > v ? g : v, y.push(g), t.sz) t.boxWidth = t.sz[0], t.justifyOffset = 0;\n            else switch(t.boxWidth = v, t.j){\n                case 1:\n                    t.justifyOffset = -t.boxWidth;\n                    break;\n                case 2:\n                    t.justifyOffset = -t.boxWidth / 2;\n                    break;\n                default:\n                    t.justifyOffset = 0;\n            }\n            t.lineWidths = y;\n            var F, I, R, B, V = l.a;\n            n = V.length;\n            var L = [];\n            for(s = 0; s < n; s += 1){\n                for((F = V[s]).a.sc && (t.strokeColorAnim = !0), F.a.sw && (t.strokeWidthAnim = !0), (F.a.fc || F.a.fh || F.a.fs || F.a.fb) && (t.fillColorAnim = !0), B = 0, R = F.s.b, e = 0; e < r; e += 1)(I = p[e]).anIndexes[s] = B, (1 == R && \"\" !== I.val || 2 == R && \"\" !== I.val && \" \" !== I.val || 3 == R && (I.n || \" \" == I.val || e == r - 1) || 4 == R && (I.n || e == r - 1)) && (1 === F.s.rn && L.push(B), B += 1);\n                l.a[s].s.totalChars = B;\n                var z, G = -1;\n                if (1 === F.s.rn) for(e = 0; e < r; e += 1)G != (I = p[e]).anIndexes[s] && (G = I.anIndexes[s], z = L.splice(Math.floor(Math.random() * L.length), 1)[0]), I.anIndexes[s] = z;\n            }\n            t.yOffset = t.finalLineHeight || 1.2 * t.finalSize, t.ls = t.ls || 0, t.ascent = b.ascent * t.finalSize / 100;\n        }, TextProperty.prototype.updateDocumentData = function(t, e) {\n            e = void 0 === e ? this.keysIndex : e;\n            var r = this.copyData({}, this.data.d.k[e].s);\n            r = this.copyData(r, t), this.data.d.k[e].s = r, this.recalculate(e), this.elem.addDynamicProperty(this);\n        }, TextProperty.prototype.recalculate = function(t) {\n            var e = this.data.d.k[t].s;\n            e.__complete = !1, this.keysIndex = 0, this._isFirstFrame = !0, this.getValue(e);\n        }, TextProperty.prototype.canResizeFont = function(t) {\n            this.canResize = t, this.recalculate(this.keysIndex), this.elem.addDynamicProperty(this);\n        }, TextProperty.prototype.setMinimumFontSize = function(t) {\n            this.minimumFontSize = Math.floor(t) || 1, this.recalculate(this.keysIndex), this.elem.addDynamicProperty(this);\n        };\n        var TextSelectorProp = function() {\n            var t = Math.max, e = Math.min, r = Math.floor;\n            function i(t, e) {\n                this._currentTextLength = -1, this.k = !1, this.data = e, this.elem = t, this.comp = t.comp, this.finalS = 0, this.finalE = 0, this.initDynamicPropertyContainer(t), this.s = PropertyFactory.getProp(t, e.s || {\n                    k: 0\n                }, 0, 0, this), this.e = \"e\" in e ? PropertyFactory.getProp(t, e.e, 0, 0, this) : {\n                    v: 100\n                }, this.o = PropertyFactory.getProp(t, e.o || {\n                    k: 0\n                }, 0, 0, this), this.xe = PropertyFactory.getProp(t, e.xe || {\n                    k: 0\n                }, 0, 0, this), this.ne = PropertyFactory.getProp(t, e.ne || {\n                    k: 0\n                }, 0, 0, this), this.sm = PropertyFactory.getProp(t, e.sm || {\n                    k: 100\n                }, 0, 0, this), this.a = PropertyFactory.getProp(t, e.a, 0, .01, this), this.dynamicProperties.length || this.getValue();\n            }\n            return i.prototype = {\n                getMult: function(i) {\n                    this._currentTextLength !== this.elem.textProperty.currentData.l.length && this.getValue();\n                    var a = 0, s = 0, n = 1, o = 1;\n                    this.ne.v > 0 ? a = this.ne.v / 100 : s = -this.ne.v / 100, this.xe.v > 0 ? n = 1 - this.xe.v / 100 : o = 1 + this.xe.v / 100;\n                    var h = BezierFactory.getBezierEasing(a, s, n, o).get, l = 0, p = this.finalS, f = this.finalE, c = this.data.sh;\n                    if (2 === c) l = h(l = f === p ? i >= f ? 1 : 0 : t(0, e(.5 / (f - p) + (i - p) / (f - p), 1)));\n                    else if (3 === c) l = h(l = f === p ? i >= f ? 0 : 1 : 1 - t(0, e(.5 / (f - p) + (i - p) / (f - p), 1)));\n                    else if (4 === c) f === p ? l = 0 : (l = t(0, e(.5 / (f - p) + (i - p) / (f - p), 1))) < .5 ? l *= 2 : l = 1 - 2 * (l - .5), l = h(l);\n                    else if (5 === c) {\n                        if (f === p) l = 0;\n                        else {\n                            var m = f - p, d = -m / 2 + (i = e(t(0, i + .5 - p), f - p)), u = m / 2;\n                            l = Math.sqrt(1 - d * d / (u * u));\n                        }\n                        l = h(l);\n                    } else 6 === c ? (f === p ? l = 0 : (i = e(t(0, i + .5 - p), f - p), l = (1 + Math.cos(Math.PI + 2 * Math.PI * i / (f - p))) / 2), l = h(l)) : (i >= r(p) && (l = t(0, e(i - p < 0 ? e(f, 1) - (p - i) : f - i, 1))), l = h(l));\n                    if (100 !== this.sm.v) {\n                        var y = .01 * this.sm.v;\n                        0 === y && (y = 1e-8);\n                        var g = .5 - .5 * y;\n                        l < g ? l = 0 : (l = (l - g) / y) > 1 && (l = 1);\n                    }\n                    return l * this.a.v;\n                },\n                getValue: function(t) {\n                    this.iterateDynamicProperties(), this._mdf = t || this._mdf, this._currentTextLength = this.elem.textProperty.currentData.l.length || 0, t && 2 === this.data.r && (this.e.v = this._currentTextLength);\n                    var e = 2 === this.data.r ? 1 : 100 / this.data.totalChars, r = this.o.v / e, i = this.s.v / e + r, a = this.e.v / e + r;\n                    if (i > a) {\n                        var s = i;\n                        i = a, a = s;\n                    }\n                    this.finalS = i, this.finalE = a;\n                }\n            }, extendPrototype([\n                DynamicPropertyContainer\n            ], i), {\n                getTextSelectorProp: function(t, e, r) {\n                    return new i(t, e, r);\n                }\n            };\n        }();\n        function TextAnimatorDataProperty(t, e, r) {\n            var i = {\n                propType: !1\n            }, a = PropertyFactory.getProp, s = e.a;\n            this.a = {\n                r: s.r ? a(t, s.r, 0, degToRads, r) : i,\n                rx: s.rx ? a(t, s.rx, 0, degToRads, r) : i,\n                ry: s.ry ? a(t, s.ry, 0, degToRads, r) : i,\n                sk: s.sk ? a(t, s.sk, 0, degToRads, r) : i,\n                sa: s.sa ? a(t, s.sa, 0, degToRads, r) : i,\n                s: s.s ? a(t, s.s, 1, .01, r) : i,\n                a: s.a ? a(t, s.a, 1, 0, r) : i,\n                o: s.o ? a(t, s.o, 0, .01, r) : i,\n                p: s.p ? a(t, s.p, 1, 0, r) : i,\n                sw: s.sw ? a(t, s.sw, 0, 0, r) : i,\n                sc: s.sc ? a(t, s.sc, 1, 0, r) : i,\n                fc: s.fc ? a(t, s.fc, 1, 0, r) : i,\n                fh: s.fh ? a(t, s.fh, 0, 0, r) : i,\n                fs: s.fs ? a(t, s.fs, 0, .01, r) : i,\n                fb: s.fb ? a(t, s.fb, 0, .01, r) : i,\n                t: s.t ? a(t, s.t, 0, 0, r) : i\n            }, this.s = TextSelectorProp.getTextSelectorProp(t, e.s, r), this.s.t = e.s.t;\n        }\n        function TextAnimatorProperty(t, e, r) {\n            this._isFirstFrame = !0, this._hasMaskedPath = !1, this._frameId = -1, this._textData = t, this._renderType = e, this._elem = r, this._animatorsData = createSizedArray(this._textData.a.length), this._pathData = {}, this._moreOptions = {\n                alignment: {}\n            }, this.renderedLetters = [], this.lettersChangedFlag = !1, this.initDynamicPropertyContainer(r);\n        }\n        function ITextElement() {}\n        TextAnimatorProperty.prototype.searchProperties = function() {\n            var t, e, r = this._textData.a.length, i = PropertyFactory.getProp;\n            for(t = 0; t < r; t += 1)e = this._textData.a[t], this._animatorsData[t] = new TextAnimatorDataProperty(this._elem, e, this);\n            this._textData.p && \"m\" in this._textData.p ? (this._pathData = {\n                a: i(this._elem, this._textData.p.a, 0, 0, this),\n                f: i(this._elem, this._textData.p.f, 0, 0, this),\n                l: i(this._elem, this._textData.p.l, 0, 0, this),\n                r: i(this._elem, this._textData.p.r, 0, 0, this),\n                p: i(this._elem, this._textData.p.p, 0, 0, this),\n                m: this._elem.maskManager.getMaskProperty(this._textData.p.m)\n            }, this._hasMaskedPath = !0) : this._hasMaskedPath = !1, this._moreOptions.alignment = i(this._elem, this._textData.m.a, 1, 0, this);\n        }, TextAnimatorProperty.prototype.getMeasures = function(t, e) {\n            if (this.lettersChangedFlag = e, this._mdf || this._isFirstFrame || e || this._hasMaskedPath && this._pathData.m._mdf) {\n                this._isFirstFrame = !1;\n                var r, i, a, s, n, o, h, l, p, f, c, m, d, u, y, g, v, b, x, P = this._moreOptions.alignment.v, E = this._animatorsData, S = this._textData, C = this.mHelper, _ = this._renderType, A = this.renderedLetters.length, k = t.l;\n                if (this._hasMaskedPath) {\n                    if (x = this._pathData.m, !this._pathData.n || this._pathData._mdf) {\n                        var w, T = x.v;\n                        for(this._pathData.r.v && (T = T.reverse()), n = {\n                            tLength: 0,\n                            segments: []\n                        }, s = T._length - 1, g = 0, a = 0; a < s; a += 1)w = bez.buildBezierData(T.v[a], T.v[a + 1], [\n                            T.o[a][0] - T.v[a][0],\n                            T.o[a][1] - T.v[a][1]\n                        ], [\n                            T.i[a + 1][0] - T.v[a + 1][0],\n                            T.i[a + 1][1] - T.v[a + 1][1]\n                        ]), n.tLength += w.segmentLength, n.segments.push(w), g += w.segmentLength;\n                        a = s, x.v.c && (w = bez.buildBezierData(T.v[a], T.v[0], [\n                            T.o[a][0] - T.v[a][0],\n                            T.o[a][1] - T.v[a][1]\n                        ], [\n                            T.i[0][0] - T.v[0][0],\n                            T.i[0][1] - T.v[0][1]\n                        ]), n.tLength += w.segmentLength, n.segments.push(w), g += w.segmentLength), this._pathData.pi = n;\n                    }\n                    if (n = this._pathData.pi, o = this._pathData.f.v, c = 0, f = 1, l = 0, p = !0, u = n.segments, o < 0 && x.v.c) for(n.tLength < Math.abs(o) && (o = -Math.abs(o) % n.tLength), f = (d = u[c = u.length - 1].points).length - 1; o < 0;)o += d[f].partialLength, (f -= 1) < 0 && (f = (d = u[c -= 1].points).length - 1);\n                    m = (d = u[c].points)[f - 1], y = (h = d[f]).partialLength;\n                }\n                s = k.length, r = 0, i = 0;\n                var M, D, F, I, R, B = 1.2 * t.finalSize * .714, V = !0;\n                F = E.length;\n                var L, z, G, O, N, H, j, q, W, $, Y, X, Z = -1, K = o, J = c, U = f, Q = -1, tt = \"\", et = this.defaultPropsArray;\n                if (2 === t.j || 1 === t.j) {\n                    var rt = 0, it = 0, at = 2 === t.j ? -.5 : -1, st = 0, nt = !0;\n                    for(a = 0; a < s; a += 1)if (k[a].n) {\n                        for(rt && (rt += it); st < a;)k[st].animatorJustifyOffset = rt, st += 1;\n                        rt = 0, nt = !0;\n                    } else {\n                        for(D = 0; D < F; D += 1)(M = E[D].a).t.propType && (nt && 2 === t.j && (it += M.t.v * at), (R = E[D].s.getMult(k[a].anIndexes[D], S.a[D].s.totalChars)).length ? rt += M.t.v * R[0] * at : rt += M.t.v * R * at);\n                        nt = !1;\n                    }\n                    for(rt && (rt += it); st < a;)k[st].animatorJustifyOffset = rt, st += 1;\n                }\n                for(a = 0; a < s; a += 1){\n                    if (C.reset(), O = 1, k[a].n) r = 0, i += t.yOffset, i += V ? 1 : 0, o = K, V = !1, this._hasMaskedPath && (f = U, m = (d = u[c = J].points)[f - 1], y = (h = d[f]).partialLength, l = 0), tt = \"\", Y = \"\", W = \"\", X = \"\", et = this.defaultPropsArray;\n                    else {\n                        if (this._hasMaskedPath) {\n                            if (Q !== k[a].line) {\n                                switch(t.j){\n                                    case 1:\n                                        o += g - t.lineWidths[k[a].line];\n                                        break;\n                                    case 2:\n                                        o += (g - t.lineWidths[k[a].line]) / 2;\n                                }\n                                Q = k[a].line;\n                            }\n                            Z !== k[a].ind && (k[Z] && (o += k[Z].extra), o += k[a].an / 2, Z = k[a].ind), o += P[0] * k[a].an * .005;\n                            var ot = 0;\n                            for(D = 0; D < F; D += 1)(M = E[D].a).p.propType && ((R = E[D].s.getMult(k[a].anIndexes[D], S.a[D].s.totalChars)).length ? ot += M.p.v[0] * R[0] : ot += M.p.v[0] * R), M.a.propType && ((R = E[D].s.getMult(k[a].anIndexes[D], S.a[D].s.totalChars)).length ? ot += M.a.v[0] * R[0] : ot += M.a.v[0] * R);\n                            for(p = !0, this._pathData.a.v && (o = .5 * k[0].an + (g - this._pathData.f.v - .5 * k[0].an - .5 * k[k.length - 1].an) * Z / (s - 1), o += this._pathData.f.v); p;)l + y >= o + ot || !d ? (v = (o + ot - l) / h.partialLength, z = m.point[0] + (h.point[0] - m.point[0]) * v, G = m.point[1] + (h.point[1] - m.point[1]) * v, C.translate(-P[0] * k[a].an * .005, -P[1] * B * .01), p = !1) : d && (l += h.partialLength, (f += 1) >= d.length && (f = 0, u[c += 1] ? d = u[c].points : x.v.c ? (f = 0, d = u[c = 0].points) : (l -= h.partialLength, d = null)), d && (m = h, y = (h = d[f]).partialLength));\n                            L = k[a].an / 2 - k[a].add, C.translate(-L, 0, 0);\n                        } else L = k[a].an / 2 - k[a].add, C.translate(-L, 0, 0), C.translate(-P[0] * k[a].an * .005, -P[1] * B * .01, 0);\n                        for(D = 0; D < F; D += 1)(M = E[D].a).t.propType && (R = E[D].s.getMult(k[a].anIndexes[D], S.a[D].s.totalChars), 0 === r && 0 === t.j || (this._hasMaskedPath ? R.length ? o += M.t.v * R[0] : o += M.t.v * R : R.length ? r += M.t.v * R[0] : r += M.t.v * R));\n                        for(t.strokeWidthAnim && (H = t.sw || 0), t.strokeColorAnim && (N = t.sc ? [\n                            t.sc[0],\n                            t.sc[1],\n                            t.sc[2]\n                        ] : [\n                            0,\n                            0,\n                            0\n                        ]), t.fillColorAnim && t.fc && (j = [\n                            t.fc[0],\n                            t.fc[1],\n                            t.fc[2]\n                        ]), D = 0; D < F; D += 1)(M = E[D].a).a.propType && ((R = E[D].s.getMult(k[a].anIndexes[D], S.a[D].s.totalChars)).length ? C.translate(-M.a.v[0] * R[0], -M.a.v[1] * R[1], M.a.v[2] * R[2]) : C.translate(-M.a.v[0] * R, -M.a.v[1] * R, M.a.v[2] * R));\n                        for(D = 0; D < F; D += 1)(M = E[D].a).s.propType && ((R = E[D].s.getMult(k[a].anIndexes[D], S.a[D].s.totalChars)).length ? C.scale(1 + (M.s.v[0] - 1) * R[0], 1 + (M.s.v[1] - 1) * R[1], 1) : C.scale(1 + (M.s.v[0] - 1) * R, 1 + (M.s.v[1] - 1) * R, 1));\n                        for(D = 0; D < F; D += 1){\n                            if (M = E[D].a, R = E[D].s.getMult(k[a].anIndexes[D], S.a[D].s.totalChars), M.sk.propType && (R.length ? C.skewFromAxis(-M.sk.v * R[0], M.sa.v * R[1]) : C.skewFromAxis(-M.sk.v * R, M.sa.v * R)), M.r.propType && (R.length ? C.rotateZ(-M.r.v * R[2]) : C.rotateZ(-M.r.v * R)), M.ry.propType && (R.length ? C.rotateY(M.ry.v * R[1]) : C.rotateY(M.ry.v * R)), M.rx.propType && (R.length ? C.rotateX(M.rx.v * R[0]) : C.rotateX(M.rx.v * R)), M.o.propType && (R.length ? O += (M.o.v * R[0] - O) * R[0] : O += (M.o.v * R - O) * R), t.strokeWidthAnim && M.sw.propType && (R.length ? H += M.sw.v * R[0] : H += M.sw.v * R), t.strokeColorAnim && M.sc.propType) for(q = 0; q < 3; q += 1)R.length ? N[q] += (M.sc.v[q] - N[q]) * R[0] : N[q] += (M.sc.v[q] - N[q]) * R;\n                            if (t.fillColorAnim && t.fc) {\n                                if (M.fc.propType) for(q = 0; q < 3; q += 1)R.length ? j[q] += (M.fc.v[q] - j[q]) * R[0] : j[q] += (M.fc.v[q] - j[q]) * R;\n                                M.fh.propType && (j = R.length ? addHueToRGB(j, M.fh.v * R[0]) : addHueToRGB(j, M.fh.v * R)), M.fs.propType && (j = R.length ? addSaturationToRGB(j, M.fs.v * R[0]) : addSaturationToRGB(j, M.fs.v * R)), M.fb.propType && (j = R.length ? addBrightnessToRGB(j, M.fb.v * R[0]) : addBrightnessToRGB(j, M.fb.v * R));\n                            }\n                        }\n                        for(D = 0; D < F; D += 1)(M = E[D].a).p.propType && (R = E[D].s.getMult(k[a].anIndexes[D], S.a[D].s.totalChars), this._hasMaskedPath ? R.length ? C.translate(0, M.p.v[1] * R[0], -M.p.v[2] * R[1]) : C.translate(0, M.p.v[1] * R, -M.p.v[2] * R) : R.length ? C.translate(M.p.v[0] * R[0], M.p.v[1] * R[1], -M.p.v[2] * R[2]) : C.translate(M.p.v[0] * R, M.p.v[1] * R, -M.p.v[2] * R));\n                        if (t.strokeWidthAnim && (W = H < 0 ? 0 : H), t.strokeColorAnim && ($ = \"rgb(\" + Math.round(255 * N[0]) + \",\" + Math.round(255 * N[1]) + \",\" + Math.round(255 * N[2]) + \")\"), t.fillColorAnim && t.fc && (Y = \"rgb(\" + Math.round(255 * j[0]) + \",\" + Math.round(255 * j[1]) + \",\" + Math.round(255 * j[2]) + \")\"), this._hasMaskedPath) {\n                            if (C.translate(0, -t.ls), C.translate(0, P[1] * B * .01 + i, 0), this._pathData.p.v) {\n                                b = (h.point[1] - m.point[1]) / (h.point[0] - m.point[0]);\n                                var ht = 180 * Math.atan(b) / Math.PI;\n                                h.point[0] < m.point[0] && (ht += 180), C.rotate(-ht * Math.PI / 180);\n                            }\n                            C.translate(z, G, 0), o -= P[0] * k[a].an * .005, k[a + 1] && Z !== k[a + 1].ind && (o += k[a].an / 2, o += .001 * t.tr * t.finalSize);\n                        } else {\n                            switch(C.translate(r, i, 0), t.ps && C.translate(t.ps[0], t.ps[1] + t.ascent, 0), t.j){\n                                case 1:\n                                    C.translate(k[a].animatorJustifyOffset + t.justifyOffset + (t.boxWidth - t.lineWidths[k[a].line]), 0, 0);\n                                    break;\n                                case 2:\n                                    C.translate(k[a].animatorJustifyOffset + t.justifyOffset + (t.boxWidth - t.lineWidths[k[a].line]) / 2, 0, 0);\n                            }\n                            C.translate(0, -t.ls), C.translate(L, 0, 0), C.translate(P[0] * k[a].an * .005, P[1] * B * .01, 0), r += k[a].l + .001 * t.tr * t.finalSize;\n                        }\n                        \"html\" === _ ? tt = C.toCSS() : \"svg\" === _ ? tt = C.to2dCSS() : et = [\n                            C.props[0],\n                            C.props[1],\n                            C.props[2],\n                            C.props[3],\n                            C.props[4],\n                            C.props[5],\n                            C.props[6],\n                            C.props[7],\n                            C.props[8],\n                            C.props[9],\n                            C.props[10],\n                            C.props[11],\n                            C.props[12],\n                            C.props[13],\n                            C.props[14],\n                            C.props[15]\n                        ], X = O;\n                    }\n                    A <= a ? (I = new LetterProps(X, W, $, Y, tt, et), this.renderedLetters.push(I), A += 1, this.lettersChangedFlag = !0) : (I = this.renderedLetters[a], this.lettersChangedFlag = I.update(X, W, $, Y, tt, et) || this.lettersChangedFlag);\n                }\n            }\n        }, TextAnimatorProperty.prototype.getValue = function() {\n            this._elem.globalData.frameId !== this._frameId && (this._frameId = this._elem.globalData.frameId, this.iterateDynamicProperties());\n        }, TextAnimatorProperty.prototype.mHelper = new Matrix, TextAnimatorProperty.prototype.defaultPropsArray = [], extendPrototype([\n            DynamicPropertyContainer\n        ], TextAnimatorProperty), ITextElement.prototype.initElement = function(t, e, r) {\n            this.lettersChangedFlag = !0, this.initFrame(), this.initBaseData(t, e, r), this.textProperty = new TextProperty(this, t.t, this.dynamicProperties), this.textAnimator = new TextAnimatorProperty(t.t, this.renderType, this), this.initTransform(t, e, r), this.initHierarchy(), this.initRenderable(), this.initRendererElement(), this.createContainerElements(), this.createRenderableComponents(), this.createContent(), this.hide(), this.textAnimator.searchProperties(this.dynamicProperties);\n        }, ITextElement.prototype.prepareFrame = function(t) {\n            this._mdf = !1, this.prepareRenderableFrame(t), this.prepareProperties(t, this.isInRange), (this.textProperty._mdf || this.textProperty._isFirstFrame) && (this.buildNewText(), this.textProperty._isFirstFrame = !1, this.textProperty._mdf = !1);\n        }, ITextElement.prototype.createPathShape = function(t, e) {\n            var r, i, a = e.length, s = \"\";\n            for(r = 0; r < a; r += 1)\"sh\" === e[r].ty && (i = e[r].ks.k, s += buildShapeString(i, i.i.length, !0, t));\n            return s;\n        }, ITextElement.prototype.updateDocumentData = function(t, e) {\n            this.textProperty.updateDocumentData(t, e);\n        }, ITextElement.prototype.canResizeFont = function(t) {\n            this.textProperty.canResizeFont(t);\n        }, ITextElement.prototype.setMinimumFontSize = function(t) {\n            this.textProperty.setMinimumFontSize(t);\n        }, ITextElement.prototype.applyTextPropertiesToMatrix = function(t, e, r, i, a) {\n            switch(t.ps && e.translate(t.ps[0], t.ps[1] + t.ascent, 0), e.translate(0, -t.ls, 0), t.j){\n                case 1:\n                    e.translate(t.justifyOffset + (t.boxWidth - t.lineWidths[r]), 0, 0);\n                    break;\n                case 2:\n                    e.translate(t.justifyOffset + (t.boxWidth - t.lineWidths[r]) / 2, 0, 0);\n            }\n            e.translate(i, a, 0);\n        }, ITextElement.prototype.buildColor = function(t) {\n            return \"rgb(\" + Math.round(255 * t[0]) + \",\" + Math.round(255 * t[1]) + \",\" + Math.round(255 * t[2]) + \")\";\n        }, ITextElement.prototype.emptyProp = new LetterProps, ITextElement.prototype.destroy = function() {};\n        var emptyShapeData = {\n            shapes: []\n        };\n        function SVGTextLottieElement(t, e, r) {\n            this.textSpans = [], this.renderType = \"svg\", this.initElement(t, e, r);\n        }\n        function ISolidElement(t, e, r) {\n            this.initElement(t, e, r);\n        }\n        function NullElement(t, e, r) {\n            this.initFrame(), this.initBaseData(t, e, r), this.initFrame(), this.initTransform(t, e, r), this.initHierarchy();\n        }\n        function SVGRendererBase() {}\n        function ICompElement() {}\n        function SVGCompElement(t, e, r) {\n            this.layers = t.layers, this.supports3d = !0, this.completeLayers = !1, this.pendingElements = [], this.elements = this.layers ? createSizedArray(this.layers.length) : [], this.initElement(t, e, r), this.tm = t.tm ? PropertyFactory.getProp(this, t.tm, 0, e.frameRate, this) : {\n                _placeholder: !0\n            };\n        }\n        function SVGRenderer(t, e) {\n            this.animationItem = t, this.layers = null, this.renderedFrame = -1, this.svgElement = createNS(\"svg\");\n            var r = \"\";\n            if (e && e.title) {\n                var i = createNS(\"title\"), a = createElementID();\n                i.setAttribute(\"id\", a), i.textContent = e.title, this.svgElement.appendChild(i), r += a;\n            }\n            if (e && e.description) {\n                var s = createNS(\"desc\"), n = createElementID();\n                s.setAttribute(\"id\", n), s.textContent = e.description, this.svgElement.appendChild(s), r += \" \" + n;\n            }\n            r && this.svgElement.setAttribute(\"aria-labelledby\", r);\n            var o = createNS(\"defs\");\n            this.svgElement.appendChild(o);\n            var h = createNS(\"g\");\n            this.svgElement.appendChild(h), this.layerElement = h, this.renderConfig = {\n                preserveAspectRatio: e && e.preserveAspectRatio || \"xMidYMid meet\",\n                imagePreserveAspectRatio: e && e.imagePreserveAspectRatio || \"xMidYMid slice\",\n                contentVisibility: e && e.contentVisibility || \"visible\",\n                progressiveLoad: e && e.progressiveLoad || !1,\n                hideOnTransparent: !(e && !1 === e.hideOnTransparent),\n                viewBoxOnly: e && e.viewBoxOnly || !1,\n                viewBoxSize: e && e.viewBoxSize || !1,\n                className: e && e.className || \"\",\n                id: e && e.id || \"\",\n                focusable: e && e.focusable,\n                filterSize: {\n                    width: e && e.filterSize && e.filterSize.width || \"100%\",\n                    height: e && e.filterSize && e.filterSize.height || \"100%\",\n                    x: e && e.filterSize && e.filterSize.x || \"0%\",\n                    y: e && e.filterSize && e.filterSize.y || \"0%\"\n                },\n                width: e && e.width,\n                height: e && e.height,\n                runExpressions: !e || void 0 === e.runExpressions || e.runExpressions\n            }, this.globalData = {\n                _mdf: !1,\n                frameNum: -1,\n                defs: o,\n                renderConfig: this.renderConfig\n            }, this.elements = [], this.pendingElements = [], this.destroyed = !1, this.rendererType = \"svg\";\n        }\n        function CVContextData() {\n            var t;\n            this.saved = [], this.cArrPos = 0, this.cTr = new Matrix, this.cO = 1;\n            for(this.savedOp = createTypedArray(\"float32\", 15), t = 0; t < 15; t += 1)this.saved[t] = createTypedArray(\"float32\", 16);\n            this._length = 15;\n        }\n        function ShapeTransformManager() {\n            this.sequences = {}, this.sequenceList = [], this.transform_key_count = 0;\n        }\n        extendPrototype([\n            BaseElement,\n            TransformElement,\n            SVGBaseElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableDOMElement,\n            ITextElement\n        ], SVGTextLottieElement), SVGTextLottieElement.prototype.createContent = function() {\n            this.data.singleShape && !this.globalData.fontManager.chars && (this.textContainer = createNS(\"text\"));\n        }, SVGTextLottieElement.prototype.buildTextContents = function(t) {\n            for(var e = 0, r = t.length, i = [], a = \"\"; e < r;)t[e] === String.fromCharCode(13) || t[e] === String.fromCharCode(3) ? (i.push(a), a = \"\") : a += t[e], e += 1;\n            return i.push(a), i;\n        }, SVGTextLottieElement.prototype.buildShapeData = function(t, e) {\n            if (t.shapes && t.shapes.length) {\n                var r = t.shapes[0];\n                if (r.it) {\n                    var i = r.it[r.it.length - 1];\n                    i.s && (i.s.k[0] = e, i.s.k[1] = e);\n                }\n            }\n            return t;\n        }, SVGTextLottieElement.prototype.buildNewText = function() {\n            var t, e;\n            this.addDynamicProperty(this);\n            var r = this.textProperty.currentData;\n            this.renderedLetters = createSizedArray(r ? r.l.length : 0), r.fc ? this.layerElement.setAttribute(\"fill\", this.buildColor(r.fc)) : this.layerElement.setAttribute(\"fill\", \"rgba(0,0,0,0)\"), r.sc && (this.layerElement.setAttribute(\"stroke\", this.buildColor(r.sc)), this.layerElement.setAttribute(\"stroke-width\", r.sw)), this.layerElement.setAttribute(\"font-size\", r.finalSize);\n            var i = this.globalData.fontManager.getFontByName(r.f);\n            if (i.fClass) this.layerElement.setAttribute(\"class\", i.fClass);\n            else {\n                this.layerElement.setAttribute(\"font-family\", i.fFamily);\n                var a = r.fWeight, s = r.fStyle;\n                this.layerElement.setAttribute(\"font-style\", s), this.layerElement.setAttribute(\"font-weight\", a);\n            }\n            this.layerElement.setAttribute(\"aria-label\", r.t);\n            var n, o = r.l || [], h = !!this.globalData.fontManager.chars;\n            e = o.length;\n            var l = this.mHelper, p = this.data.singleShape, f = 0, c = 0, m = !0, d = .001 * r.tr * r.finalSize;\n            if (!p || h || r.sz) {\n                var u, y = this.textSpans.length;\n                for(t = 0; t < e; t += 1){\n                    if (this.textSpans[t] || (this.textSpans[t] = {\n                        span: null,\n                        childSpan: null,\n                        glyph: null\n                    }), !h || !p || 0 === t) {\n                        if (n = y > t ? this.textSpans[t].span : createNS(h ? \"g\" : \"text\"), y <= t) {\n                            if (n.setAttribute(\"stroke-linecap\", \"butt\"), n.setAttribute(\"stroke-linejoin\", \"round\"), n.setAttribute(\"stroke-miterlimit\", \"4\"), this.textSpans[t].span = n, h) {\n                                var g = createNS(\"g\");\n                                n.appendChild(g), this.textSpans[t].childSpan = g;\n                            }\n                            this.textSpans[t].span = n, this.layerElement.appendChild(n);\n                        }\n                        n.style.display = \"inherit\";\n                    }\n                    if (l.reset(), p && (o[t].n && (f = -d, c += r.yOffset, c += m ? 1 : 0, m = !1), this.applyTextPropertiesToMatrix(r, l, o[t].line, f, c), f += o[t].l || 0, f += d), h) {\n                        var v;\n                        if (1 === (u = this.globalData.fontManager.getCharData(r.finalText[t], i.fStyle, this.globalData.fontManager.getFontByName(r.f).fFamily)).t) v = new SVGCompElement(u.data, this.globalData, this);\n                        else {\n                            var b = emptyShapeData;\n                            u.data && u.data.shapes && (b = this.buildShapeData(u.data, r.finalSize)), v = new SVGShapeElement(b, this.globalData, this);\n                        }\n                        if (this.textSpans[t].glyph) {\n                            var x = this.textSpans[t].glyph;\n                            this.textSpans[t].childSpan.removeChild(x.layerElement), x.destroy();\n                        }\n                        this.textSpans[t].glyph = v, v._debug = !0, v.prepareFrame(0), v.renderFrame(), this.textSpans[t].childSpan.appendChild(v.layerElement), 1 === u.t && this.textSpans[t].childSpan.setAttribute(\"transform\", \"scale(\" + r.finalSize / 100 + \",\" + r.finalSize / 100 + \")\");\n                    } else p && n.setAttribute(\"transform\", \"translate(\" + l.props[12] + \",\" + l.props[13] + \")\"), n.textContent = o[t].val, n.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\");\n                }\n                p && n && n.setAttribute(\"d\", \"\");\n            } else {\n                var P = this.textContainer, E = \"start\";\n                switch(r.j){\n                    case 1:\n                        E = \"end\";\n                        break;\n                    case 2:\n                        E = \"middle\";\n                        break;\n                    default:\n                        E = \"start\";\n                }\n                P.setAttribute(\"text-anchor\", E), P.setAttribute(\"letter-spacing\", d);\n                var S = this.buildTextContents(r.finalText);\n                for(e = S.length, c = r.ps ? r.ps[1] + r.ascent : 0, t = 0; t < e; t += 1)(n = this.textSpans[t].span || createNS(\"tspan\")).textContent = S[t], n.setAttribute(\"x\", 0), n.setAttribute(\"y\", c), n.style.display = \"inherit\", P.appendChild(n), this.textSpans[t] || (this.textSpans[t] = {\n                    span: null,\n                    glyph: null\n                }), this.textSpans[t].span = n, c += r.finalLineHeight;\n                this.layerElement.appendChild(P);\n            }\n            for(; t < this.textSpans.length;)this.textSpans[t].span.style.display = \"none\", t += 1;\n            this._sizeChanged = !0;\n        }, SVGTextLottieElement.prototype.sourceRectAtTime = function() {\n            if (this.prepareFrame(this.comp.renderedFrame - this.data.st), this.renderInnerContent(), this._sizeChanged) {\n                this._sizeChanged = !1;\n                var t = this.layerElement.getBBox();\n                this.bbox = {\n                    top: t.y,\n                    left: t.x,\n                    width: t.width,\n                    height: t.height\n                };\n            }\n            return this.bbox;\n        }, SVGTextLottieElement.prototype.getValue = function() {\n            var t, e, r = this.textSpans.length;\n            for(this.renderedFrame = this.comp.renderedFrame, t = 0; t < r; t += 1)(e = this.textSpans[t].glyph) && (e.prepareFrame(this.comp.renderedFrame - this.data.st), e._mdf && (this._mdf = !0));\n        }, SVGTextLottieElement.prototype.renderInnerContent = function() {\n            if ((!this.data.singleShape || this._mdf) && (this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag), this.lettersChangedFlag || this.textAnimator.lettersChangedFlag)) {\n                var t, e;\n                this._sizeChanged = !0;\n                var r, i, a, s = this.textAnimator.renderedLetters, n = this.textProperty.currentData.l;\n                for(e = n.length, t = 0; t < e; t += 1)n[t].n || (r = s[t], i = this.textSpans[t].span, (a = this.textSpans[t].glyph) && a.renderFrame(), r._mdf.m && i.setAttribute(\"transform\", r.m), r._mdf.o && i.setAttribute(\"opacity\", r.o), r._mdf.sw && i.setAttribute(\"stroke-width\", r.sw), r._mdf.sc && i.setAttribute(\"stroke\", r.sc), r._mdf.fc && i.setAttribute(\"fill\", r.fc));\n            }\n        }, extendPrototype([\n            IImageElement\n        ], ISolidElement), ISolidElement.prototype.createContent = function() {\n            var t = createNS(\"rect\");\n            t.setAttribute(\"width\", this.data.sw), t.setAttribute(\"height\", this.data.sh), t.setAttribute(\"fill\", this.data.sc), this.layerElement.appendChild(t);\n        }, NullElement.prototype.prepareFrame = function(t) {\n            this.prepareProperties(t, !0);\n        }, NullElement.prototype.renderFrame = function() {}, NullElement.prototype.getBaseElement = function() {\n            return null;\n        }, NullElement.prototype.destroy = function() {}, NullElement.prototype.sourceRectAtTime = function() {}, NullElement.prototype.hide = function() {}, extendPrototype([\n            BaseElement,\n            TransformElement,\n            HierarchyElement,\n            FrameElement\n        ], NullElement), extendPrototype([\n            BaseRenderer\n        ], SVGRendererBase), SVGRendererBase.prototype.createNull = function(t) {\n            return new NullElement(t, this.globalData, this);\n        }, SVGRendererBase.prototype.createShape = function(t) {\n            return new SVGShapeElement(t, this.globalData, this);\n        }, SVGRendererBase.prototype.createText = function(t) {\n            return new SVGTextLottieElement(t, this.globalData, this);\n        }, SVGRendererBase.prototype.createImage = function(t) {\n            return new IImageElement(t, this.globalData, this);\n        }, SVGRendererBase.prototype.createSolid = function(t) {\n            return new ISolidElement(t, this.globalData, this);\n        }, SVGRendererBase.prototype.configAnimation = function(t) {\n            this.svgElement.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\"), this.svgElement.setAttribute(\"xmlns:xlink\", \"http://www.w3.org/1999/xlink\"), this.renderConfig.viewBoxSize ? this.svgElement.setAttribute(\"viewBox\", this.renderConfig.viewBoxSize) : this.svgElement.setAttribute(\"viewBox\", \"0 0 \" + t.w + \" \" + t.h), this.renderConfig.viewBoxOnly || (this.svgElement.setAttribute(\"width\", t.w), this.svgElement.setAttribute(\"height\", t.h), this.svgElement.style.width = \"100%\", this.svgElement.style.height = \"100%\", this.svgElement.style.transform = \"translate3d(0,0,0)\", this.svgElement.style.contentVisibility = this.renderConfig.contentVisibility), this.renderConfig.width && this.svgElement.setAttribute(\"width\", this.renderConfig.width), this.renderConfig.height && this.svgElement.setAttribute(\"height\", this.renderConfig.height), this.renderConfig.className && this.svgElement.setAttribute(\"class\", this.renderConfig.className), this.renderConfig.id && this.svgElement.setAttribute(\"id\", this.renderConfig.id), void 0 !== this.renderConfig.focusable && this.svgElement.setAttribute(\"focusable\", this.renderConfig.focusable), this.svgElement.setAttribute(\"preserveAspectRatio\", this.renderConfig.preserveAspectRatio), this.animationItem.wrapper.appendChild(this.svgElement);\n            var e = this.globalData.defs;\n            this.setupGlobalData(t, e), this.globalData.progressiveLoad = this.renderConfig.progressiveLoad, this.data = t;\n            var r = createNS(\"clipPath\"), i = createNS(\"rect\");\n            i.setAttribute(\"width\", t.w), i.setAttribute(\"height\", t.h), i.setAttribute(\"x\", 0), i.setAttribute(\"y\", 0);\n            var a = createElementID();\n            r.setAttribute(\"id\", a), r.appendChild(i), this.layerElement.setAttribute(\"clip-path\", \"url(\" + getLocationHref() + \"#\" + a + \")\"), e.appendChild(r), this.layers = t.layers, this.elements = createSizedArray(t.layers.length);\n        }, SVGRendererBase.prototype.destroy = function() {\n            var t;\n            this.animationItem.wrapper && (this.animationItem.wrapper.innerText = \"\"), this.layerElement = null, this.globalData.defs = null;\n            var e = this.layers ? this.layers.length : 0;\n            for(t = 0; t < e; t += 1)this.elements[t] && this.elements[t].destroy();\n            this.elements.length = 0, this.destroyed = !0, this.animationItem = null;\n        }, SVGRendererBase.prototype.updateContainerSize = function() {}, SVGRendererBase.prototype.findIndexByInd = function(t) {\n            var e = 0, r = this.layers.length;\n            for(e = 0; e < r; e += 1)if (this.layers[e].ind === t) return e;\n            return -1;\n        }, SVGRendererBase.prototype.buildItem = function(t) {\n            var e = this.elements;\n            if (!e[t] && 99 !== this.layers[t].ty) {\n                e[t] = !0;\n                var r = this.createItem(this.layers[t]);\n                if (e[t] = r, getExpressionsPlugin() && (0 === this.layers[t].ty && this.globalData.projectInterface.registerComposition(r), r.initExpressions()), this.appendElementInPos(r, t), this.layers[t].tt) {\n                    var i = \"tp\" in this.layers[t] ? this.findIndexByInd(this.layers[t].tp) : t - 1;\n                    if (-1 === i) return;\n                    if (this.elements[i] && !0 !== this.elements[i]) {\n                        var a = e[i].getMatte(this.layers[t].tt);\n                        r.setMatte(a);\n                    } else this.buildItem(i), this.addPendingElement(r);\n                }\n            }\n        }, SVGRendererBase.prototype.checkPendingElements = function() {\n            for(; this.pendingElements.length;){\n                var t = this.pendingElements.pop();\n                if (t.checkParenting(), t.data.tt) for(var e = 0, r = this.elements.length; e < r;){\n                    if (this.elements[e] === t) {\n                        var i = \"tp\" in t.data ? this.findIndexByInd(t.data.tp) : e - 1, a = this.elements[i].getMatte(this.layers[e].tt);\n                        t.setMatte(a);\n                        break;\n                    }\n                    e += 1;\n                }\n            }\n        }, SVGRendererBase.prototype.renderFrame = function(t) {\n            if (this.renderedFrame !== t && !this.destroyed) {\n                var e;\n                null === t ? t = this.renderedFrame : this.renderedFrame = t, this.globalData.frameNum = t, this.globalData.frameId += 1, this.globalData.projectInterface.currentFrame = t, this.globalData._mdf = !1;\n                var r = this.layers.length;\n                for(this.completeLayers || this.checkLayers(t), e = r - 1; e >= 0; e -= 1)(this.completeLayers || this.elements[e]) && this.elements[e].prepareFrame(t - this.layers[e].st);\n                if (this.globalData._mdf) for(e = 0; e < r; e += 1)(this.completeLayers || this.elements[e]) && this.elements[e].renderFrame();\n            }\n        }, SVGRendererBase.prototype.appendElementInPos = function(t, e) {\n            var r = t.getBaseElement();\n            if (r) {\n                for(var i, a = 0; a < e;)this.elements[a] && !0 !== this.elements[a] && this.elements[a].getBaseElement() && (i = this.elements[a].getBaseElement()), a += 1;\n                i ? this.layerElement.insertBefore(r, i) : this.layerElement.appendChild(r);\n            }\n        }, SVGRendererBase.prototype.hide = function() {\n            this.layerElement.style.display = \"none\";\n        }, SVGRendererBase.prototype.show = function() {\n            this.layerElement.style.display = \"block\";\n        }, extendPrototype([\n            BaseElement,\n            TransformElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableDOMElement\n        ], ICompElement), ICompElement.prototype.initElement = function(t, e, r) {\n            this.initFrame(), this.initBaseData(t, e, r), this.initTransform(t, e, r), this.initRenderable(), this.initHierarchy(), this.initRendererElement(), this.createContainerElements(), this.createRenderableComponents(), !this.data.xt && e.progressiveLoad || this.buildAllItems(), this.hide();\n        }, ICompElement.prototype.prepareFrame = function(t) {\n            if (this._mdf = !1, this.prepareRenderableFrame(t), this.prepareProperties(t, this.isInRange), this.isInRange || this.data.xt) {\n                if (this.tm._placeholder) this.renderedFrame = t / this.data.sr;\n                else {\n                    var e = this.tm.v;\n                    e === this.data.op && (e = this.data.op - 1), this.renderedFrame = e;\n                }\n                var r, i = this.elements.length;\n                for(this.completeLayers || this.checkLayers(this.renderedFrame), r = i - 1; r >= 0; r -= 1)(this.completeLayers || this.elements[r]) && (this.elements[r].prepareFrame(this.renderedFrame - this.layers[r].st), this.elements[r]._mdf && (this._mdf = !0));\n            }\n        }, ICompElement.prototype.renderInnerContent = function() {\n            var t, e = this.layers.length;\n            for(t = 0; t < e; t += 1)(this.completeLayers || this.elements[t]) && this.elements[t].renderFrame();\n        }, ICompElement.prototype.setElements = function(t) {\n            this.elements = t;\n        }, ICompElement.prototype.getElements = function() {\n            return this.elements;\n        }, ICompElement.prototype.destroyElements = function() {\n            var t, e = this.layers.length;\n            for(t = 0; t < e; t += 1)this.elements[t] && this.elements[t].destroy();\n        }, ICompElement.prototype.destroy = function() {\n            this.destroyElements(), this.destroyBaseElement();\n        }, extendPrototype([\n            SVGRendererBase,\n            ICompElement,\n            SVGBaseElement\n        ], SVGCompElement), SVGCompElement.prototype.createComp = function(t) {\n            return new SVGCompElement(t, this.globalData, this);\n        }, extendPrototype([\n            SVGRendererBase\n        ], SVGRenderer), SVGRenderer.prototype.createComp = function(t) {\n            return new SVGCompElement(t, this.globalData, this);\n        }, CVContextData.prototype.duplicate = function() {\n            var t = 2 * this._length, e = this.savedOp;\n            this.savedOp = createTypedArray(\"float32\", t), this.savedOp.set(e);\n            var r = 0;\n            for(r = this._length; r < t; r += 1)this.saved[r] = createTypedArray(\"float32\", 16);\n            this._length = t;\n        }, CVContextData.prototype.reset = function() {\n            this.cArrPos = 0, this.cTr.reset(), this.cO = 1;\n        }, CVContextData.prototype.popTransform = function() {\n            var t, e = this.saved[this.cArrPos], r = this.cTr.props;\n            for(t = 0; t < 16; t += 1)r[t] = e[t];\n            return e;\n        }, CVContextData.prototype.popOpacity = function() {\n            var t = this.savedOp[this.cArrPos];\n            return this.cO = t, t;\n        }, CVContextData.prototype.pop = function() {\n            return this.cArrPos -= 1, {\n                transform: this.popTransform(),\n                opacity: this.popOpacity()\n            };\n        }, CVContextData.prototype.push = function() {\n            var t, e = this.cTr.props;\n            this._length <= this.cArrPos && this.duplicate();\n            var r = this.saved[this.cArrPos];\n            for(t = 0; t < 16; t += 1)r[t] = e[t];\n            this.savedOp[this.cArrPos] = this.cO, this.cArrPos += 1;\n        }, CVContextData.prototype.getTransform = function() {\n            return this.cTr;\n        }, CVContextData.prototype.getOpacity = function() {\n            return this.cO;\n        }, CVContextData.prototype.setOpacity = function(t) {\n            this.cO = t;\n        }, ShapeTransformManager.prototype = {\n            addTransformSequence: function(t) {\n                var e, r = t.length, i = \"_\";\n                for(e = 0; e < r; e += 1)i += t[e].transform.key + \"_\";\n                var a = this.sequences[i];\n                return a || (a = {\n                    transforms: [].concat(t),\n                    finalTransform: new Matrix,\n                    _mdf: !1\n                }, this.sequences[i] = a, this.sequenceList.push(a)), a;\n            },\n            processSequence: function(t, e) {\n                for(var r, i = 0, a = t.transforms.length, s = e; i < a && !e;){\n                    if (t.transforms[i].transform.mProps._mdf) {\n                        s = !0;\n                        break;\n                    }\n                    i += 1;\n                }\n                if (s) for(t.finalTransform.reset(), i = a - 1; i >= 0; i -= 1)r = t.transforms[i].transform.mProps.v.props, t.finalTransform.transform(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], r[10], r[11], r[12], r[13], r[14], r[15]);\n                t._mdf = s;\n            },\n            processSequences: function(t) {\n                var e, r = this.sequenceList.length;\n                for(e = 0; e < r; e += 1)this.processSequence(this.sequenceList[e], t);\n            },\n            getNewKey: function() {\n                return this.transform_key_count += 1, \"_\" + this.transform_key_count;\n            }\n        };\n        var lumaLoader = function() {\n            var t = \"__lottie_element_luma_buffer\", e = null, r = null, i = null;\n            function a() {\n                var a, s, n;\n                e || (a = createNS(\"svg\"), s = createNS(\"filter\"), n = createNS(\"feColorMatrix\"), s.setAttribute(\"id\", t), n.setAttribute(\"type\", \"matrix\"), n.setAttribute(\"color-interpolation-filters\", \"sRGB\"), n.setAttribute(\"values\", \"0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0\"), s.appendChild(n), a.appendChild(s), a.setAttribute(\"id\", t + \"_svg\"), featureSupport.svgLumaHidden && (a.style.display = \"none\"), i = a, document.body.appendChild(i), e = createTag(\"canvas\"), (r = e.getContext(\"2d\")).filter = \"url(#\" + t + \")\", r.fillStyle = \"rgba(0,0,0,0)\", r.fillRect(0, 0, 1, 1));\n            }\n            return {\n                load: a,\n                get: function(i) {\n                    return e || a(), e.width = i.width, e.height = i.height, r.filter = \"url(#\" + t + \")\", e;\n                }\n            };\n        };\n        function createCanvas(t, e) {\n            if (featureSupport.offscreenCanvas) return new OffscreenCanvas(t, e);\n            var r = createTag(\"canvas\");\n            return r.width = t, r.height = e, r;\n        }\n        var assetLoader = {\n            loadLumaCanvas: lumaLoader.load,\n            getLumaCanvas: lumaLoader.get,\n            createCanvas: createCanvas\n        };\n        function CVEffects() {}\n        function CVMaskElement(t, e) {\n            var r;\n            this.data = t, this.element = e, this.masksProperties = this.data.masksProperties || [], this.viewData = createSizedArray(this.masksProperties.length);\n            var i = this.masksProperties.length, a = !1;\n            for(r = 0; r < i; r += 1)\"n\" !== this.masksProperties[r].mode && (a = !0), this.viewData[r] = ShapePropertyFactory.getShapeProp(this.element, this.masksProperties[r], 3);\n            this.hasMasks = a, a && this.element.addRenderableComponent(this);\n        }\n        function CVBaseElement() {}\n        CVEffects.prototype.renderFrame = function() {}, CVMaskElement.prototype.renderFrame = function() {\n            if (this.hasMasks) {\n                var t, e, r, i, a = this.element.finalTransform.mat, s = this.element.canvasContext, n = this.masksProperties.length;\n                for(s.beginPath(), t = 0; t < n; t += 1)if (\"n\" !== this.masksProperties[t].mode) {\n                    var o;\n                    this.masksProperties[t].inv && (s.moveTo(0, 0), s.lineTo(this.element.globalData.compSize.w, 0), s.lineTo(this.element.globalData.compSize.w, this.element.globalData.compSize.h), s.lineTo(0, this.element.globalData.compSize.h), s.lineTo(0, 0)), i = this.viewData[t].v, e = a.applyToPointArray(i.v[0][0], i.v[0][1], 0), s.moveTo(e[0], e[1]);\n                    var h = i._length;\n                    for(o = 1; o < h; o += 1)r = a.applyToTriplePoints(i.o[o - 1], i.i[o], i.v[o]), s.bezierCurveTo(r[0], r[1], r[2], r[3], r[4], r[5]);\n                    r = a.applyToTriplePoints(i.o[o - 1], i.i[0], i.v[0]), s.bezierCurveTo(r[0], r[1], r[2], r[3], r[4], r[5]);\n                }\n                this.element.globalData.renderer.save(!0), s.clip();\n            }\n        }, CVMaskElement.prototype.getMaskProperty = MaskElement.prototype.getMaskProperty, CVMaskElement.prototype.destroy = function() {\n            this.element = null;\n        };\n        var operationsMap = {\n            1: \"source-in\",\n            2: \"source-out\",\n            3: \"source-in\",\n            4: \"source-out\"\n        };\n        function CVShapeData(t, e, r, i) {\n            this.styledShapes = [], this.tr = [\n                0,\n                0,\n                0,\n                0,\n                0,\n                0\n            ];\n            var a, s = 4;\n            \"rc\" === e.ty ? s = 5 : \"el\" === e.ty ? s = 6 : \"sr\" === e.ty && (s = 7), this.sh = ShapePropertyFactory.getShapeProp(t, e, s, t);\n            var n, o = r.length;\n            for(a = 0; a < o; a += 1)r[a].closed || (n = {\n                transforms: i.addTransformSequence(r[a].transforms),\n                trNodes: []\n            }, this.styledShapes.push(n), r[a].elements.push(n));\n        }\n        function CVShapeElement(t, e, r) {\n            this.shapes = [], this.shapesData = t.shapes, this.stylesList = [], this.itemsData = [], this.prevViewData = [], this.shapeModifiers = [], this.processedElements = [], this.transformsManager = new ShapeTransformManager, this.initElement(t, e, r);\n        }\n        function CVTextElement(t, e, r) {\n            this.textSpans = [], this.yOffset = 0, this.fillColorAnim = !1, this.strokeColorAnim = !1, this.strokeWidthAnim = !1, this.stroke = !1, this.fill = !1, this.justifyOffset = 0, this.currentRender = null, this.renderType = \"canvas\", this.values = {\n                fill: \"rgba(0,0,0,0)\",\n                stroke: \"rgba(0,0,0,0)\",\n                sWidth: 0,\n                fValue: \"\"\n            }, this.initElement(t, e, r);\n        }\n        function CVImageElement(t, e, r) {\n            this.assetData = e.getAssetData(t.refId), this.img = e.imageLoader.getAsset(this.assetData), this.initElement(t, e, r);\n        }\n        function CVSolidElement(t, e, r) {\n            this.initElement(t, e, r);\n        }\n        function CanvasRendererBase(t, e) {\n            this.animationItem = t, this.renderConfig = {\n                clearCanvas: !e || void 0 === e.clearCanvas || e.clearCanvas,\n                context: e && e.context || null,\n                progressiveLoad: e && e.progressiveLoad || !1,\n                preserveAspectRatio: e && e.preserveAspectRatio || \"xMidYMid meet\",\n                imagePreserveAspectRatio: e && e.imagePreserveAspectRatio || \"xMidYMid slice\",\n                contentVisibility: e && e.contentVisibility || \"visible\",\n                className: e && e.className || \"\",\n                id: e && e.id || \"\"\n            }, this.renderConfig.dpr = e && e.dpr || 1, this.animationItem.wrapper && (this.renderConfig.dpr = e && e.dpr || window.devicePixelRatio || 1), this.renderedFrame = -1, this.globalData = {\n                frameNum: -1,\n                _mdf: !1,\n                renderConfig: this.renderConfig,\n                currentGlobalAlpha: -1\n            }, this.contextData = new CVContextData, this.elements = [], this.pendingElements = [], this.transformMat = new Matrix, this.completeLayers = !1, this.rendererType = \"canvas\";\n        }\n        function CVCompElement(t, e, r) {\n            this.completeLayers = !1, this.layers = t.layers, this.pendingElements = [], this.elements = createSizedArray(this.layers.length), this.initElement(t, e, r), this.tm = t.tm ? PropertyFactory.getProp(this, t.tm, 0, e.frameRate, this) : {\n                _placeholder: !0\n            };\n        }\n        function CanvasRenderer(t, e) {\n            this.animationItem = t, this.renderConfig = {\n                clearCanvas: !e || void 0 === e.clearCanvas || e.clearCanvas,\n                context: e && e.context || null,\n                progressiveLoad: e && e.progressiveLoad || !1,\n                preserveAspectRatio: e && e.preserveAspectRatio || \"xMidYMid meet\",\n                imagePreserveAspectRatio: e && e.imagePreserveAspectRatio || \"xMidYMid slice\",\n                contentVisibility: e && e.contentVisibility || \"visible\",\n                className: e && e.className || \"\",\n                id: e && e.id || \"\",\n                runExpressions: !e || void 0 === e.runExpressions || e.runExpressions\n            }, this.renderConfig.dpr = e && e.dpr || 1, this.animationItem.wrapper && (this.renderConfig.dpr = e && e.dpr || window.devicePixelRatio || 1), this.renderedFrame = -1, this.globalData = {\n                frameNum: -1,\n                _mdf: !1,\n                renderConfig: this.renderConfig,\n                currentGlobalAlpha: -1\n            }, this.contextData = new CVContextData, this.elements = [], this.pendingElements = [], this.transformMat = new Matrix, this.completeLayers = !1, this.rendererType = \"canvas\";\n        }\n        function HBaseElement() {}\n        function HSolidElement(t, e, r) {\n            this.initElement(t, e, r);\n        }\n        function HShapeElement(t, e, r) {\n            this.shapes = [], this.shapesData = t.shapes, this.stylesList = [], this.shapeModifiers = [], this.itemsData = [], this.processedElements = [], this.animatedContents = [], this.shapesContainer = createNS(\"g\"), this.initElement(t, e, r), this.prevViewData = [], this.currentBBox = {\n                x: 999999,\n                y: -999999,\n                h: 0,\n                w: 0\n            };\n        }\n        function HTextElement(t, e, r) {\n            this.textSpans = [], this.textPaths = [], this.currentBBox = {\n                x: 999999,\n                y: -999999,\n                h: 0,\n                w: 0\n            }, this.renderType = \"svg\", this.isMasked = !1, this.initElement(t, e, r);\n        }\n        function HCameraElement(t, e, r) {\n            this.initFrame(), this.initBaseData(t, e, r), this.initHierarchy();\n            var i = PropertyFactory.getProp;\n            if (this.pe = i(this, t.pe, 0, 0, this), t.ks.p.s ? (this.px = i(this, t.ks.p.x, 1, 0, this), this.py = i(this, t.ks.p.y, 1, 0, this), this.pz = i(this, t.ks.p.z, 1, 0, this)) : this.p = i(this, t.ks.p, 1, 0, this), t.ks.a && (this.a = i(this, t.ks.a, 1, 0, this)), t.ks.or.k.length && t.ks.or.k[0].to) {\n                var a, s = t.ks.or.k.length;\n                for(a = 0; a < s; a += 1)t.ks.or.k[a].to = null, t.ks.or.k[a].ti = null;\n            }\n            this.or = i(this, t.ks.or, 1, degToRads, this), this.or.sh = !0, this.rx = i(this, t.ks.rx, 0, degToRads, this), this.ry = i(this, t.ks.ry, 0, degToRads, this), this.rz = i(this, t.ks.rz, 0, degToRads, this), this.mat = new Matrix, this._prevMat = new Matrix, this._isFirstFrame = !0, this.finalTransform = {\n                mProp: this\n            };\n        }\n        function HImageElement(t, e, r) {\n            this.assetData = e.getAssetData(t.refId), this.initElement(t, e, r);\n        }\n        function HybridRendererBase(t, e) {\n            this.animationItem = t, this.layers = null, this.renderedFrame = -1, this.renderConfig = {\n                className: e && e.className || \"\",\n                imagePreserveAspectRatio: e && e.imagePreserveAspectRatio || \"xMidYMid slice\",\n                hideOnTransparent: !(e && !1 === e.hideOnTransparent),\n                filterSize: {\n                    width: e && e.filterSize && e.filterSize.width || \"400%\",\n                    height: e && e.filterSize && e.filterSize.height || \"400%\",\n                    x: e && e.filterSize && e.filterSize.x || \"-100%\",\n                    y: e && e.filterSize && e.filterSize.y || \"-100%\"\n                }\n            }, this.globalData = {\n                _mdf: !1,\n                frameNum: -1,\n                renderConfig: this.renderConfig\n            }, this.pendingElements = [], this.elements = [], this.threeDElements = [], this.destroyed = !1, this.camera = null, this.supports3d = !0, this.rendererType = \"html\";\n        }\n        function HCompElement(t, e, r) {\n            this.layers = t.layers, this.supports3d = !t.hasMask, this.completeLayers = !1, this.pendingElements = [], this.elements = this.layers ? createSizedArray(this.layers.length) : [], this.initElement(t, e, r), this.tm = t.tm ? PropertyFactory.getProp(this, t.tm, 0, e.frameRate, this) : {\n                _placeholder: !0\n            };\n        }\n        function HybridRenderer(t, e) {\n            this.animationItem = t, this.layers = null, this.renderedFrame = -1, this.renderConfig = {\n                className: e && e.className || \"\",\n                imagePreserveAspectRatio: e && e.imagePreserveAspectRatio || \"xMidYMid slice\",\n                hideOnTransparent: !(e && !1 === e.hideOnTransparent),\n                filterSize: {\n                    width: e && e.filterSize && e.filterSize.width || \"400%\",\n                    height: e && e.filterSize && e.filterSize.height || \"400%\",\n                    x: e && e.filterSize && e.filterSize.x || \"-100%\",\n                    y: e && e.filterSize && e.filterSize.y || \"-100%\"\n                },\n                runExpressions: !e || void 0 === e.runExpressions || e.runExpressions\n            }, this.globalData = {\n                _mdf: !1,\n                frameNum: -1,\n                renderConfig: this.renderConfig\n            }, this.pendingElements = [], this.elements = [], this.threeDElements = [], this.destroyed = !1, this.camera = null, this.supports3d = !0, this.rendererType = \"html\";\n        }\n        CVBaseElement.prototype = {\n            createElements: function() {},\n            initRendererElement: function() {},\n            createContainerElements: function() {\n                if (this.data.tt >= 1) {\n                    this.buffers = [];\n                    var t = this.globalData.canvasContext, e = assetLoader.createCanvas(t.canvas.width, t.canvas.height);\n                    this.buffers.push(e);\n                    var r = assetLoader.createCanvas(t.canvas.width, t.canvas.height);\n                    this.buffers.push(r), this.data.tt >= 3 && !document._isProxy && assetLoader.loadLumaCanvas();\n                }\n                this.canvasContext = this.globalData.canvasContext, this.transformCanvas = this.globalData.transformCanvas, this.renderableEffectsManager = new CVEffects(this);\n            },\n            createContent: function() {},\n            setBlendMode: function() {\n                var t = this.globalData;\n                if (t.blendMode !== this.data.bm) {\n                    t.blendMode = this.data.bm;\n                    var e = getBlendMode(this.data.bm);\n                    t.canvasContext.globalCompositeOperation = e;\n                }\n            },\n            createRenderableComponents: function() {\n                this.maskManager = new CVMaskElement(this.data, this);\n            },\n            hideElement: function() {\n                this.hidden || this.isInRange && !this.isTransparent || (this.hidden = !0);\n            },\n            showElement: function() {\n                this.isInRange && !this.isTransparent && (this.hidden = !1, this._isFirstFrame = !0, this.maskManager._isFirstFrame = !0);\n            },\n            clearCanvas: function(t) {\n                t.clearRect(this.transformCanvas.tx, this.transformCanvas.ty, this.transformCanvas.w * this.transformCanvas.sx, this.transformCanvas.h * this.transformCanvas.sy);\n            },\n            prepareLayer: function() {\n                if (this.data.tt >= 1) {\n                    var t = this.buffers[0].getContext(\"2d\");\n                    this.clearCanvas(t), t.drawImage(this.canvasContext.canvas, 0, 0), this.currentTransform = this.canvasContext.getTransform(), this.canvasContext.setTransform(1, 0, 0, 1, 0, 0), this.clearCanvas(this.canvasContext), this.canvasContext.setTransform(this.currentTransform);\n                }\n            },\n            exitLayer: function() {\n                if (this.data.tt >= 1) {\n                    var t = this.buffers[1], e = t.getContext(\"2d\");\n                    if (this.clearCanvas(e), e.drawImage(this.canvasContext.canvas, 0, 0), this.canvasContext.setTransform(1, 0, 0, 1, 0, 0), this.clearCanvas(this.canvasContext), this.canvasContext.setTransform(this.currentTransform), this.comp.getElementById(\"tp\" in this.data ? this.data.tp : this.data.ind - 1).renderFrame(!0), this.canvasContext.setTransform(1, 0, 0, 1, 0, 0), this.data.tt >= 3 && !document._isProxy) {\n                        var r = assetLoader.getLumaCanvas(this.canvasContext.canvas);\n                        r.getContext(\"2d\").drawImage(this.canvasContext.canvas, 0, 0), this.clearCanvas(this.canvasContext), this.canvasContext.drawImage(r, 0, 0);\n                    }\n                    this.canvasContext.globalCompositeOperation = operationsMap[this.data.tt], this.canvasContext.drawImage(t, 0, 0), this.canvasContext.globalCompositeOperation = \"destination-over\", this.canvasContext.drawImage(this.buffers[0], 0, 0), this.canvasContext.setTransform(this.currentTransform), this.canvasContext.globalCompositeOperation = \"source-over\";\n                }\n            },\n            renderFrame: function(t) {\n                if (!this.hidden && !this.data.hd && (1 !== this.data.td || t)) {\n                    this.renderTransform(), this.renderRenderable(), this.setBlendMode();\n                    var e = 0 === this.data.ty;\n                    this.prepareLayer(), this.globalData.renderer.save(e), this.globalData.renderer.ctxTransform(this.finalTransform.mat.props), this.globalData.renderer.ctxOpacity(this.finalTransform.mProp.o.v), this.renderInnerContent(), this.globalData.renderer.restore(e), this.exitLayer(), this.maskManager.hasMasks && this.globalData.renderer.restore(!0), this._isFirstFrame && (this._isFirstFrame = !1);\n                }\n            },\n            destroy: function() {\n                this.canvasContext = null, this.data = null, this.globalData = null, this.maskManager.destroy();\n            },\n            mHelper: new Matrix\n        }, CVBaseElement.prototype.hide = CVBaseElement.prototype.hideElement, CVBaseElement.prototype.show = CVBaseElement.prototype.showElement, CVShapeData.prototype.setAsAnimated = SVGShapeData.prototype.setAsAnimated, extendPrototype([\n            BaseElement,\n            TransformElement,\n            CVBaseElement,\n            IShapeElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableElement\n        ], CVShapeElement), CVShapeElement.prototype.initElement = RenderableDOMElement.prototype.initElement, CVShapeElement.prototype.transformHelper = {\n            opacity: 1,\n            _opMdf: !1\n        }, CVShapeElement.prototype.dashResetter = [], CVShapeElement.prototype.createContent = function() {\n            this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, !0, []);\n        }, CVShapeElement.prototype.createStyleElement = function(t, e) {\n            var r = {\n                data: t,\n                type: t.ty,\n                preTransforms: this.transformsManager.addTransformSequence(e),\n                transforms: [],\n                elements: [],\n                closed: !0 === t.hd\n            }, i = {};\n            if (\"fl\" === t.ty || \"st\" === t.ty ? (i.c = PropertyFactory.getProp(this, t.c, 1, 255, this), i.c.k || (r.co = \"rgb(\" + bmFloor(i.c.v[0]) + \",\" + bmFloor(i.c.v[1]) + \",\" + bmFloor(i.c.v[2]) + \")\")) : \"gf\" !== t.ty && \"gs\" !== t.ty || (i.s = PropertyFactory.getProp(this, t.s, 1, null, this), i.e = PropertyFactory.getProp(this, t.e, 1, null, this), i.h = PropertyFactory.getProp(this, t.h || {\n                k: 0\n            }, 0, .01, this), i.a = PropertyFactory.getProp(this, t.a || {\n                k: 0\n            }, 0, degToRads, this), i.g = new GradientProperty(this, t.g, this)), i.o = PropertyFactory.getProp(this, t.o, 0, .01, this), \"st\" === t.ty || \"gs\" === t.ty) {\n                if (r.lc = lineCapEnum[t.lc || 2], r.lj = lineJoinEnum[t.lj || 2], 1 == t.lj && (r.ml = t.ml), i.w = PropertyFactory.getProp(this, t.w, 0, null, this), i.w.k || (r.wi = i.w.v), t.d) {\n                    var a = new DashProperty(this, t.d, \"canvas\", this);\n                    i.d = a, i.d.k || (r.da = i.d.dashArray, r.do = i.d.dashoffset[0]);\n                }\n            } else r.r = 2 === t.r ? \"evenodd\" : \"nonzero\";\n            return this.stylesList.push(r), i.style = r, i;\n        }, CVShapeElement.prototype.createGroupElement = function() {\n            return {\n                it: [],\n                prevViewData: []\n            };\n        }, CVShapeElement.prototype.createTransformElement = function(t) {\n            return {\n                transform: {\n                    opacity: 1,\n                    _opMdf: !1,\n                    key: this.transformsManager.getNewKey(),\n                    op: PropertyFactory.getProp(this, t.o, 0, .01, this),\n                    mProps: TransformPropertyFactory.getTransformProperty(this, t, this)\n                }\n            };\n        }, CVShapeElement.prototype.createShapeElement = function(t) {\n            var e = new CVShapeData(this, t, this.stylesList, this.transformsManager);\n            return this.shapes.push(e), this.addShapeToModifiers(e), e;\n        }, CVShapeElement.prototype.reloadShapes = function() {\n            var t;\n            this._isFirstFrame = !0;\n            var e = this.itemsData.length;\n            for(t = 0; t < e; t += 1)this.prevViewData[t] = this.itemsData[t];\n            for(this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, !0, []), e = this.dynamicProperties.length, t = 0; t < e; t += 1)this.dynamicProperties[t].getValue();\n            this.renderModifiers(), this.transformsManager.processSequences(this._isFirstFrame);\n        }, CVShapeElement.prototype.addTransformToStyleList = function(t) {\n            var e, r = this.stylesList.length;\n            for(e = 0; e < r; e += 1)this.stylesList[e].closed || this.stylesList[e].transforms.push(t);\n        }, CVShapeElement.prototype.removeTransformFromStyleList = function() {\n            var t, e = this.stylesList.length;\n            for(t = 0; t < e; t += 1)this.stylesList[t].closed || this.stylesList[t].transforms.pop();\n        }, CVShapeElement.prototype.closeStyles = function(t) {\n            var e, r = t.length;\n            for(e = 0; e < r; e += 1)t[e].closed = !0;\n        }, CVShapeElement.prototype.searchShapes = function(t, e, r, i, a) {\n            var s, n, o, h, l, p, f = t.length - 1, c = [], m = [], d = [].concat(a);\n            for(s = f; s >= 0; s -= 1){\n                if ((h = this.searchProcessedElement(t[s])) ? e[s] = r[h - 1] : t[s]._shouldRender = i, \"fl\" === t[s].ty || \"st\" === t[s].ty || \"gf\" === t[s].ty || \"gs\" === t[s].ty) h ? e[s].style.closed = !1 : e[s] = this.createStyleElement(t[s], d), c.push(e[s].style);\n                else if (\"gr\" === t[s].ty) {\n                    if (h) for(o = e[s].it.length, n = 0; n < o; n += 1)e[s].prevViewData[n] = e[s].it[n];\n                    else e[s] = this.createGroupElement(t[s]);\n                    this.searchShapes(t[s].it, e[s].it, e[s].prevViewData, i, d);\n                } else \"tr\" === t[s].ty ? (h || (p = this.createTransformElement(t[s]), e[s] = p), d.push(e[s]), this.addTransformToStyleList(e[s])) : \"sh\" === t[s].ty || \"rc\" === t[s].ty || \"el\" === t[s].ty || \"sr\" === t[s].ty ? h || (e[s] = this.createShapeElement(t[s])) : \"tm\" === t[s].ty || \"rd\" === t[s].ty || \"pb\" === t[s].ty || \"zz\" === t[s].ty || \"op\" === t[s].ty ? (h ? (l = e[s]).closed = !1 : ((l = ShapeModifiers.getModifier(t[s].ty)).init(this, t[s]), e[s] = l, this.shapeModifiers.push(l)), m.push(l)) : \"rp\" === t[s].ty && (h ? (l = e[s]).closed = !0 : (l = ShapeModifiers.getModifier(t[s].ty), e[s] = l, l.init(this, t, s, e), this.shapeModifiers.push(l), i = !1), m.push(l));\n                this.addProcessedElement(t[s], s + 1);\n            }\n            for(this.removeTransformFromStyleList(), this.closeStyles(c), f = m.length, s = 0; s < f; s += 1)m[s].closed = !0;\n        }, CVShapeElement.prototype.renderInnerContent = function() {\n            this.transformHelper.opacity = 1, this.transformHelper._opMdf = !1, this.renderModifiers(), this.transformsManager.processSequences(this._isFirstFrame), this.renderShape(this.transformHelper, this.shapesData, this.itemsData, !0);\n        }, CVShapeElement.prototype.renderShapeTransform = function(t, e) {\n            (t._opMdf || e.op._mdf || this._isFirstFrame) && (e.opacity = t.opacity, e.opacity *= e.op.v, e._opMdf = !0);\n        }, CVShapeElement.prototype.drawLayer = function() {\n            var t, e, r, i, a, s, n, o, h, l = this.stylesList.length, p = this.globalData.renderer, f = this.globalData.canvasContext;\n            for(t = 0; t < l; t += 1)if ((\"st\" !== (o = (h = this.stylesList[t]).type) && \"gs\" !== o || 0 !== h.wi) && h.data._shouldRender && 0 !== h.coOp && 0 !== this.globalData.currentGlobalAlpha) {\n                for(p.save(), s = h.elements, \"st\" === o || \"gs\" === o ? (f.strokeStyle = \"st\" === o ? h.co : h.grd, f.lineWidth = h.wi, f.lineCap = h.lc, f.lineJoin = h.lj, f.miterLimit = h.ml || 0) : f.fillStyle = \"fl\" === o ? h.co : h.grd, p.ctxOpacity(h.coOp), \"st\" !== o && \"gs\" !== o && f.beginPath(), p.ctxTransform(h.preTransforms.finalTransform.props), r = s.length, e = 0; e < r; e += 1){\n                    for(\"st\" !== o && \"gs\" !== o || (f.beginPath(), h.da && (f.setLineDash(h.da), f.lineDashOffset = h.do)), a = (n = s[e].trNodes).length, i = 0; i < a; i += 1)\"m\" === n[i].t ? f.moveTo(n[i].p[0], n[i].p[1]) : \"c\" === n[i].t ? f.bezierCurveTo(n[i].pts[0], n[i].pts[1], n[i].pts[2], n[i].pts[3], n[i].pts[4], n[i].pts[5]) : f.closePath();\n                    \"st\" !== o && \"gs\" !== o || (f.stroke(), h.da && f.setLineDash(this.dashResetter));\n                }\n                \"st\" !== o && \"gs\" !== o && f.fill(h.r), p.restore();\n            }\n        }, CVShapeElement.prototype.renderShape = function(t, e, r, i) {\n            var a, s;\n            for(s = t, a = e.length - 1; a >= 0; a -= 1)\"tr\" === e[a].ty ? (s = r[a].transform, this.renderShapeTransform(t, s)) : \"sh\" === e[a].ty || \"el\" === e[a].ty || \"rc\" === e[a].ty || \"sr\" === e[a].ty ? this.renderPath(e[a], r[a]) : \"fl\" === e[a].ty ? this.renderFill(e[a], r[a], s) : \"st\" === e[a].ty ? this.renderStroke(e[a], r[a], s) : \"gf\" === e[a].ty || \"gs\" === e[a].ty ? this.renderGradientFill(e[a], r[a], s) : \"gr\" === e[a].ty ? this.renderShape(s, e[a].it, r[a].it) : e[a].ty;\n            i && this.drawLayer();\n        }, CVShapeElement.prototype.renderStyledShape = function(t, e) {\n            if (this._isFirstFrame || e._mdf || t.transforms._mdf) {\n                var r, i, a, s = t.trNodes, n = e.paths, o = n._length;\n                s.length = 0;\n                var h = t.transforms.finalTransform;\n                for(a = 0; a < o; a += 1){\n                    var l = n.shapes[a];\n                    if (l && l.v) {\n                        for(i = l._length, r = 1; r < i; r += 1)1 === r && s.push({\n                            t: \"m\",\n                            p: h.applyToPointArray(l.v[0][0], l.v[0][1], 0)\n                        }), s.push({\n                            t: \"c\",\n                            pts: h.applyToTriplePoints(l.o[r - 1], l.i[r], l.v[r])\n                        });\n                        1 === i && s.push({\n                            t: \"m\",\n                            p: h.applyToPointArray(l.v[0][0], l.v[0][1], 0)\n                        }), l.c && i && (s.push({\n                            t: \"c\",\n                            pts: h.applyToTriplePoints(l.o[r - 1], l.i[0], l.v[0])\n                        }), s.push({\n                            t: \"z\"\n                        }));\n                    }\n                }\n                t.trNodes = s;\n            }\n        }, CVShapeElement.prototype.renderPath = function(t, e) {\n            if (!0 !== t.hd && t._shouldRender) {\n                var r, i = e.styledShapes.length;\n                for(r = 0; r < i; r += 1)this.renderStyledShape(e.styledShapes[r], e.sh);\n            }\n        }, CVShapeElement.prototype.renderFill = function(t, e, r) {\n            var i = e.style;\n            (e.c._mdf || this._isFirstFrame) && (i.co = \"rgb(\" + bmFloor(e.c.v[0]) + \",\" + bmFloor(e.c.v[1]) + \",\" + bmFloor(e.c.v[2]) + \")\"), (e.o._mdf || r._opMdf || this._isFirstFrame) && (i.coOp = e.o.v * r.opacity);\n        }, CVShapeElement.prototype.renderGradientFill = function(t, e, r) {\n            var i, a = e.style;\n            if (!a.grd || e.g._mdf || e.s._mdf || e.e._mdf || 1 !== t.t && (e.h._mdf || e.a._mdf)) {\n                var s, n = this.globalData.canvasContext, o = e.s.v, h = e.e.v;\n                if (1 === t.t) i = n.createLinearGradient(o[0], o[1], h[0], h[1]);\n                else {\n                    var l = Math.sqrt(Math.pow(o[0] - h[0], 2) + Math.pow(o[1] - h[1], 2)), p = Math.atan2(h[1] - o[1], h[0] - o[0]), f = e.h.v;\n                    f >= 1 ? f = .99 : f <= -1 && (f = -.99);\n                    var c = l * f, m = Math.cos(p + e.a.v) * c + o[0], d = Math.sin(p + e.a.v) * c + o[1];\n                    i = n.createRadialGradient(m, d, 0, o[0], o[1], l);\n                }\n                var u = t.g.p, y = e.g.c, g = 1;\n                for(s = 0; s < u; s += 1)e.g._hasOpacity && e.g._collapsable && (g = e.g.o[2 * s + 1]), i.addColorStop(y[4 * s] / 100, \"rgba(\" + y[4 * s + 1] + \",\" + y[4 * s + 2] + \",\" + y[4 * s + 3] + \",\" + g + \")\");\n                a.grd = i;\n            }\n            a.coOp = e.o.v * r.opacity;\n        }, CVShapeElement.prototype.renderStroke = function(t, e, r) {\n            var i = e.style, a = e.d;\n            a && (a._mdf || this._isFirstFrame) && (i.da = a.dashArray, i.do = a.dashoffset[0]), (e.c._mdf || this._isFirstFrame) && (i.co = \"rgb(\" + bmFloor(e.c.v[0]) + \",\" + bmFloor(e.c.v[1]) + \",\" + bmFloor(e.c.v[2]) + \")\"), (e.o._mdf || r._opMdf || this._isFirstFrame) && (i.coOp = e.o.v * r.opacity), (e.w._mdf || this._isFirstFrame) && (i.wi = e.w.v);\n        }, CVShapeElement.prototype.destroy = function() {\n            this.shapesData = null, this.globalData = null, this.canvasContext = null, this.stylesList.length = 0, this.itemsData.length = 0;\n        }, extendPrototype([\n            BaseElement,\n            TransformElement,\n            CVBaseElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableElement,\n            ITextElement\n        ], CVTextElement), CVTextElement.prototype.tHelper = createTag(\"canvas\").getContext(\"2d\"), CVTextElement.prototype.buildNewText = function() {\n            var t = this.textProperty.currentData;\n            this.renderedLetters = createSizedArray(t.l ? t.l.length : 0);\n            var e = !1;\n            t.fc ? (e = !0, this.values.fill = this.buildColor(t.fc)) : this.values.fill = \"rgba(0,0,0,0)\", this.fill = e;\n            var r = !1;\n            t.sc && (r = !0, this.values.stroke = this.buildColor(t.sc), this.values.sWidth = t.sw);\n            var i, a, s, n, o, h, l, p, f, c, m, d, u = this.globalData.fontManager.getFontByName(t.f), y = t.l, g = this.mHelper;\n            this.stroke = r, this.values.fValue = t.finalSize + \"px \" + this.globalData.fontManager.getFontByName(t.f).fFamily, a = t.finalText.length;\n            var v = this.data.singleShape, b = .001 * t.tr * t.finalSize, x = 0, P = 0, E = !0, S = 0;\n            for(i = 0; i < a; i += 1){\n                n = (s = this.globalData.fontManager.getCharData(t.finalText[i], u.fStyle, this.globalData.fontManager.getFontByName(t.f).fFamily)) && s.data || {}, g.reset(), v && y[i].n && (x = -b, P += t.yOffset, P += E ? 1 : 0, E = !1), f = (l = n.shapes ? n.shapes[0].it : []).length, g.scale(t.finalSize / 100, t.finalSize / 100), v && this.applyTextPropertiesToMatrix(t, g, y[i].line, x, P), m = createSizedArray(f - 1);\n                var C = 0;\n                for(p = 0; p < f; p += 1)if (\"sh\" === l[p].ty) {\n                    for(h = l[p].ks.k.i.length, c = l[p].ks.k, d = [], o = 1; o < h; o += 1)1 === o && d.push(g.applyToX(c.v[0][0], c.v[0][1], 0), g.applyToY(c.v[0][0], c.v[0][1], 0)), d.push(g.applyToX(c.o[o - 1][0], c.o[o - 1][1], 0), g.applyToY(c.o[o - 1][0], c.o[o - 1][1], 0), g.applyToX(c.i[o][0], c.i[o][1], 0), g.applyToY(c.i[o][0], c.i[o][1], 0), g.applyToX(c.v[o][0], c.v[o][1], 0), g.applyToY(c.v[o][0], c.v[o][1], 0));\n                    d.push(g.applyToX(c.o[o - 1][0], c.o[o - 1][1], 0), g.applyToY(c.o[o - 1][0], c.o[o - 1][1], 0), g.applyToX(c.i[0][0], c.i[0][1], 0), g.applyToY(c.i[0][0], c.i[0][1], 0), g.applyToX(c.v[0][0], c.v[0][1], 0), g.applyToY(c.v[0][0], c.v[0][1], 0)), m[C] = d, C += 1;\n                }\n                v && (x += y[i].l, x += b), this.textSpans[S] ? this.textSpans[S].elem = m : this.textSpans[S] = {\n                    elem: m\n                }, S += 1;\n            }\n        }, CVTextElement.prototype.renderInnerContent = function() {\n            var t, e, r, i, a, s, n = this.canvasContext;\n            n.font = this.values.fValue, n.lineCap = \"butt\", n.lineJoin = \"miter\", n.miterLimit = 4, this.data.singleShape || this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag);\n            var o, h = this.textAnimator.renderedLetters, l = this.textProperty.currentData.l;\n            e = l.length;\n            var p, f, c = null, m = null, d = null;\n            for(t = 0; t < e; t += 1)if (!l[t].n) {\n                if ((o = h[t]) && (this.globalData.renderer.save(), this.globalData.renderer.ctxTransform(o.p), this.globalData.renderer.ctxOpacity(o.o)), this.fill) {\n                    for(o && o.fc ? c !== o.fc && (c = o.fc, n.fillStyle = o.fc) : c !== this.values.fill && (c = this.values.fill, n.fillStyle = this.values.fill), i = (p = this.textSpans[t].elem).length, this.globalData.canvasContext.beginPath(), r = 0; r < i; r += 1)for(s = (f = p[r]).length, this.globalData.canvasContext.moveTo(f[0], f[1]), a = 2; a < s; a += 6)this.globalData.canvasContext.bezierCurveTo(f[a], f[a + 1], f[a + 2], f[a + 3], f[a + 4], f[a + 5]);\n                    this.globalData.canvasContext.closePath(), this.globalData.canvasContext.fill();\n                }\n                if (this.stroke) {\n                    for(o && o.sw ? d !== o.sw && (d = o.sw, n.lineWidth = o.sw) : d !== this.values.sWidth && (d = this.values.sWidth, n.lineWidth = this.values.sWidth), o && o.sc ? m !== o.sc && (m = o.sc, n.strokeStyle = o.sc) : m !== this.values.stroke && (m = this.values.stroke, n.strokeStyle = this.values.stroke), i = (p = this.textSpans[t].elem).length, this.globalData.canvasContext.beginPath(), r = 0; r < i; r += 1)for(s = (f = p[r]).length, this.globalData.canvasContext.moveTo(f[0], f[1]), a = 2; a < s; a += 6)this.globalData.canvasContext.bezierCurveTo(f[a], f[a + 1], f[a + 2], f[a + 3], f[a + 4], f[a + 5]);\n                    this.globalData.canvasContext.closePath(), this.globalData.canvasContext.stroke();\n                }\n                o && this.globalData.renderer.restore();\n            }\n        }, extendPrototype([\n            BaseElement,\n            TransformElement,\n            CVBaseElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableElement\n        ], CVImageElement), CVImageElement.prototype.initElement = SVGShapeElement.prototype.initElement, CVImageElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame, CVImageElement.prototype.createContent = function() {\n            if (this.img.width && (this.assetData.w !== this.img.width || this.assetData.h !== this.img.height)) {\n                var t = createTag(\"canvas\");\n                t.width = this.assetData.w, t.height = this.assetData.h;\n                var e, r, i = t.getContext(\"2d\"), a = this.img.width, s = this.img.height, n = a / s, o = this.assetData.w / this.assetData.h, h = this.assetData.pr || this.globalData.renderConfig.imagePreserveAspectRatio;\n                n > o && \"xMidYMid slice\" === h || n < o && \"xMidYMid slice\" !== h ? e = (r = s) * o : r = (e = a) / o, i.drawImage(this.img, (a - e) / 2, (s - r) / 2, e, r, 0, 0, this.assetData.w, this.assetData.h), this.img = t;\n            }\n        }, CVImageElement.prototype.renderInnerContent = function() {\n            this.canvasContext.drawImage(this.img, 0, 0);\n        }, CVImageElement.prototype.destroy = function() {\n            this.img = null;\n        }, extendPrototype([\n            BaseElement,\n            TransformElement,\n            CVBaseElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableElement\n        ], CVSolidElement), CVSolidElement.prototype.initElement = SVGShapeElement.prototype.initElement, CVSolidElement.prototype.prepareFrame = IImageElement.prototype.prepareFrame, CVSolidElement.prototype.renderInnerContent = function() {\n            var t = this.canvasContext;\n            t.fillStyle = this.data.sc, t.fillRect(0, 0, this.data.sw, this.data.sh);\n        }, extendPrototype([\n            BaseRenderer\n        ], CanvasRendererBase), CanvasRendererBase.prototype.createShape = function(t) {\n            return new CVShapeElement(t, this.globalData, this);\n        }, CanvasRendererBase.prototype.createText = function(t) {\n            return new CVTextElement(t, this.globalData, this);\n        }, CanvasRendererBase.prototype.createImage = function(t) {\n            return new CVImageElement(t, this.globalData, this);\n        }, CanvasRendererBase.prototype.createSolid = function(t) {\n            return new CVSolidElement(t, this.globalData, this);\n        }, CanvasRendererBase.prototype.createNull = SVGRenderer.prototype.createNull, CanvasRendererBase.prototype.ctxTransform = function(t) {\n            if (1 !== t[0] || 0 !== t[1] || 0 !== t[4] || 1 !== t[5] || 0 !== t[12] || 0 !== t[13]) if (this.renderConfig.clearCanvas) {\n                this.transformMat.cloneFromProps(t);\n                var e = this.contextData.getTransform(), r = e.props;\n                this.transformMat.transform(r[0], r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8], r[9], r[10], r[11], r[12], r[13], r[14], r[15]), e.cloneFromProps(this.transformMat.props);\n                var i = e.props;\n                this.canvasContext.setTransform(i[0], i[1], i[4], i[5], i[12], i[13]);\n            } else this.canvasContext.transform(t[0], t[1], t[4], t[5], t[12], t[13]);\n        }, CanvasRendererBase.prototype.ctxOpacity = function(t) {\n            var e = this.contextData.getOpacity();\n            if (!this.renderConfig.clearCanvas) return this.canvasContext.globalAlpha *= t < 0 ? 0 : t, void (this.globalData.currentGlobalAlpha = e);\n            e *= t < 0 ? 0 : t, this.contextData.setOpacity(e), this.globalData.currentGlobalAlpha !== e && (this.canvasContext.globalAlpha = e, this.globalData.currentGlobalAlpha = e);\n        }, CanvasRendererBase.prototype.reset = function() {\n            this.renderConfig.clearCanvas ? this.contextData.reset() : this.canvasContext.restore();\n        }, CanvasRendererBase.prototype.save = function(t) {\n            this.renderConfig.clearCanvas ? (t && this.canvasContext.save(), this.contextData.push()) : this.canvasContext.save();\n        }, CanvasRendererBase.prototype.restore = function(t) {\n            if (this.renderConfig.clearCanvas) {\n                t && (this.canvasContext.restore(), this.globalData.blendMode = \"source-over\");\n                var e = this.contextData.pop(), r = e.transform, i = e.opacity;\n                this.canvasContext.setTransform(r[0], r[1], r[4], r[5], r[12], r[13]), this.globalData.currentGlobalAlpha !== i && (this.canvasContext.globalAlpha = i, this.globalData.currentGlobalAlpha = i);\n            } else this.canvasContext.restore();\n        }, CanvasRendererBase.prototype.configAnimation = function(t) {\n            if (this.animationItem.wrapper) {\n                this.animationItem.container = createTag(\"canvas\");\n                var e = this.animationItem.container.style;\n                e.width = \"100%\", e.height = \"100%\";\n                var r = \"0px 0px 0px\";\n                e.transformOrigin = r, e.mozTransformOrigin = r, e.webkitTransformOrigin = r, e[\"-webkit-transform\"] = r, e.contentVisibility = this.renderConfig.contentVisibility, this.animationItem.wrapper.appendChild(this.animationItem.container), this.canvasContext = this.animationItem.container.getContext(\"2d\"), this.renderConfig.className && this.animationItem.container.setAttribute(\"class\", this.renderConfig.className), this.renderConfig.id && this.animationItem.container.setAttribute(\"id\", this.renderConfig.id);\n            } else this.canvasContext = this.renderConfig.context;\n            this.data = t, this.layers = t.layers, this.transformCanvas = {\n                w: t.w,\n                h: t.h,\n                sx: 0,\n                sy: 0,\n                tx: 0,\n                ty: 0\n            }, this.setupGlobalData(t, document.body), this.globalData.canvasContext = this.canvasContext, this.globalData.renderer = this, this.globalData.isDashed = !1, this.globalData.progressiveLoad = this.renderConfig.progressiveLoad, this.globalData.transformCanvas = this.transformCanvas, this.elements = createSizedArray(t.layers.length), this.updateContainerSize();\n        }, CanvasRendererBase.prototype.updateContainerSize = function(t, e) {\n            var r, i, a, s;\n            if (this.reset(), t ? (r = t, i = e, this.canvasContext.canvas.width = r, this.canvasContext.canvas.height = i) : (this.animationItem.wrapper && this.animationItem.container ? (r = this.animationItem.wrapper.offsetWidth, i = this.animationItem.wrapper.offsetHeight) : (r = this.canvasContext.canvas.width, i = this.canvasContext.canvas.height), this.canvasContext.canvas.width = r * this.renderConfig.dpr, this.canvasContext.canvas.height = i * this.renderConfig.dpr), -1 !== this.renderConfig.preserveAspectRatio.indexOf(\"meet\") || -1 !== this.renderConfig.preserveAspectRatio.indexOf(\"slice\")) {\n                var n = this.renderConfig.preserveAspectRatio.split(\" \"), o = n[1] || \"meet\", h = n[0] || \"xMidYMid\", l = h.substr(0, 4), p = h.substr(4);\n                a = r / i, (s = this.transformCanvas.w / this.transformCanvas.h) > a && \"meet\" === o || s < a && \"slice\" === o ? (this.transformCanvas.sx = r / (this.transformCanvas.w / this.renderConfig.dpr), this.transformCanvas.sy = r / (this.transformCanvas.w / this.renderConfig.dpr)) : (this.transformCanvas.sx = i / (this.transformCanvas.h / this.renderConfig.dpr), this.transformCanvas.sy = i / (this.transformCanvas.h / this.renderConfig.dpr)), this.transformCanvas.tx = \"xMid\" === l && (s < a && \"meet\" === o || s > a && \"slice\" === o) ? (r - this.transformCanvas.w * (i / this.transformCanvas.h)) / 2 * this.renderConfig.dpr : \"xMax\" === l && (s < a && \"meet\" === o || s > a && \"slice\" === o) ? (r - this.transformCanvas.w * (i / this.transformCanvas.h)) * this.renderConfig.dpr : 0, this.transformCanvas.ty = \"YMid\" === p && (s > a && \"meet\" === o || s < a && \"slice\" === o) ? (i - this.transformCanvas.h * (r / this.transformCanvas.w)) / 2 * this.renderConfig.dpr : \"YMax\" === p && (s > a && \"meet\" === o || s < a && \"slice\" === o) ? (i - this.transformCanvas.h * (r / this.transformCanvas.w)) * this.renderConfig.dpr : 0;\n            } else \"none\" === this.renderConfig.preserveAspectRatio ? (this.transformCanvas.sx = r / (this.transformCanvas.w / this.renderConfig.dpr), this.transformCanvas.sy = i / (this.transformCanvas.h / this.renderConfig.dpr), this.transformCanvas.tx = 0, this.transformCanvas.ty = 0) : (this.transformCanvas.sx = this.renderConfig.dpr, this.transformCanvas.sy = this.renderConfig.dpr, this.transformCanvas.tx = 0, this.transformCanvas.ty = 0);\n            this.transformCanvas.props = [\n                this.transformCanvas.sx,\n                0,\n                0,\n                0,\n                0,\n                this.transformCanvas.sy,\n                0,\n                0,\n                0,\n                0,\n                1,\n                0,\n                this.transformCanvas.tx,\n                this.transformCanvas.ty,\n                0,\n                1\n            ], this.ctxTransform(this.transformCanvas.props), this.canvasContext.beginPath(), this.canvasContext.rect(0, 0, this.transformCanvas.w, this.transformCanvas.h), this.canvasContext.closePath(), this.canvasContext.clip(), this.renderFrame(this.renderedFrame, !0);\n        }, CanvasRendererBase.prototype.destroy = function() {\n            var t;\n            for(this.renderConfig.clearCanvas && this.animationItem.wrapper && (this.animationItem.wrapper.innerText = \"\"), t = (this.layers ? this.layers.length : 0) - 1; t >= 0; t -= 1)this.elements[t] && this.elements[t].destroy();\n            this.elements.length = 0, this.globalData.canvasContext = null, this.animationItem.container = null, this.destroyed = !0;\n        }, CanvasRendererBase.prototype.renderFrame = function(t, e) {\n            if ((this.renderedFrame !== t || !0 !== this.renderConfig.clearCanvas || e) && !this.destroyed && -1 !== t) {\n                var r;\n                this.renderedFrame = t, this.globalData.frameNum = t - this.animationItem._isFirstFrame, this.globalData.frameId += 1, this.globalData._mdf = !this.renderConfig.clearCanvas || e, this.globalData.projectInterface.currentFrame = t;\n                var i = this.layers.length;\n                for(this.completeLayers || this.checkLayers(t), r = 0; r < i; r += 1)(this.completeLayers || this.elements[r]) && this.elements[r].prepareFrame(t - this.layers[r].st);\n                if (this.globalData._mdf) {\n                    for(!0 === this.renderConfig.clearCanvas ? this.canvasContext.clearRect(0, 0, this.transformCanvas.w, this.transformCanvas.h) : this.save(), r = i - 1; r >= 0; r -= 1)(this.completeLayers || this.elements[r]) && this.elements[r].renderFrame();\n                    !0 !== this.renderConfig.clearCanvas && this.restore();\n                }\n            }\n        }, CanvasRendererBase.prototype.buildItem = function(t) {\n            var e = this.elements;\n            if (!e[t] && 99 !== this.layers[t].ty) {\n                var r = this.createItem(this.layers[t], this, this.globalData);\n                e[t] = r, r.initExpressions();\n            }\n        }, CanvasRendererBase.prototype.checkPendingElements = function() {\n            for(; this.pendingElements.length;){\n                this.pendingElements.pop().checkParenting();\n            }\n        }, CanvasRendererBase.prototype.hide = function() {\n            this.animationItem.container.style.display = \"none\";\n        }, CanvasRendererBase.prototype.show = function() {\n            this.animationItem.container.style.display = \"block\";\n        }, extendPrototype([\n            CanvasRendererBase,\n            ICompElement,\n            CVBaseElement\n        ], CVCompElement), CVCompElement.prototype.renderInnerContent = function() {\n            var t, e = this.canvasContext;\n            for(e.beginPath(), e.moveTo(0, 0), e.lineTo(this.data.w, 0), e.lineTo(this.data.w, this.data.h), e.lineTo(0, this.data.h), e.lineTo(0, 0), e.clip(), t = this.layers.length - 1; t >= 0; t -= 1)(this.completeLayers || this.elements[t]) && this.elements[t].renderFrame();\n        }, CVCompElement.prototype.destroy = function() {\n            var t;\n            for(t = this.layers.length - 1; t >= 0; t -= 1)this.elements[t] && this.elements[t].destroy();\n            this.layers = null, this.elements = null;\n        }, CVCompElement.prototype.createComp = function(t) {\n            return new CVCompElement(t, this.globalData, this);\n        }, extendPrototype([\n            CanvasRendererBase\n        ], CanvasRenderer), CanvasRenderer.prototype.createComp = function(t) {\n            return new CVCompElement(t, this.globalData, this);\n        }, HBaseElement.prototype = {\n            checkBlendMode: function() {},\n            initRendererElement: function() {\n                this.baseElement = createTag(this.data.tg || \"div\"), this.data.hasMask ? (this.svgElement = createNS(\"svg\"), this.layerElement = createNS(\"g\"), this.maskedElement = this.layerElement, this.svgElement.appendChild(this.layerElement), this.baseElement.appendChild(this.svgElement)) : this.layerElement = this.baseElement, styleDiv(this.baseElement);\n            },\n            createContainerElements: function() {\n                this.renderableEffectsManager = new CVEffects(this), this.transformedElement = this.baseElement, this.maskedElement = this.layerElement, this.data.ln && this.layerElement.setAttribute(\"id\", this.data.ln), this.data.cl && this.layerElement.setAttribute(\"class\", this.data.cl), 0 !== this.data.bm && this.setBlendMode();\n            },\n            renderElement: function() {\n                var t = this.transformedElement ? this.transformedElement.style : {};\n                if (this.finalTransform._matMdf) {\n                    var e = this.finalTransform.mat.toCSS();\n                    t.transform = e, t.webkitTransform = e;\n                }\n                this.finalTransform._opMdf && (t.opacity = this.finalTransform.mProp.o.v);\n            },\n            renderFrame: function() {\n                this.data.hd || this.hidden || (this.renderTransform(), this.renderRenderable(), this.renderElement(), this.renderInnerContent(), this._isFirstFrame && (this._isFirstFrame = !1));\n            },\n            destroy: function() {\n                this.layerElement = null, this.transformedElement = null, this.matteElement && (this.matteElement = null), this.maskManager && (this.maskManager.destroy(), this.maskManager = null);\n            },\n            createRenderableComponents: function() {\n                this.maskManager = new MaskElement(this.data, this, this.globalData);\n            },\n            addEffects: function() {},\n            setMatte: function() {}\n        }, HBaseElement.prototype.getBaseElement = SVGBaseElement.prototype.getBaseElement, HBaseElement.prototype.destroyBaseElement = HBaseElement.prototype.destroy, HBaseElement.prototype.buildElementParenting = BaseRenderer.prototype.buildElementParenting, extendPrototype([\n            BaseElement,\n            TransformElement,\n            HBaseElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableDOMElement\n        ], HSolidElement), HSolidElement.prototype.createContent = function() {\n            var t;\n            this.data.hasMask ? ((t = createNS(\"rect\")).setAttribute(\"width\", this.data.sw), t.setAttribute(\"height\", this.data.sh), t.setAttribute(\"fill\", this.data.sc), this.svgElement.setAttribute(\"width\", this.data.sw), this.svgElement.setAttribute(\"height\", this.data.sh)) : ((t = createTag(\"div\")).style.width = this.data.sw + \"px\", t.style.height = this.data.sh + \"px\", t.style.backgroundColor = this.data.sc), this.layerElement.appendChild(t);\n        }, extendPrototype([\n            BaseElement,\n            TransformElement,\n            HSolidElement,\n            SVGShapeElement,\n            HBaseElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableElement\n        ], HShapeElement), HShapeElement.prototype._renderShapeFrame = HShapeElement.prototype.renderInnerContent, HShapeElement.prototype.createContent = function() {\n            var t;\n            if (this.baseElement.style.fontSize = 0, this.data.hasMask) this.layerElement.appendChild(this.shapesContainer), t = this.svgElement;\n            else {\n                t = createNS(\"svg\");\n                var e = this.comp.data ? this.comp.data : this.globalData.compSize;\n                t.setAttribute(\"width\", e.w), t.setAttribute(\"height\", e.h), t.appendChild(this.shapesContainer), this.layerElement.appendChild(t);\n            }\n            this.searchShapes(this.shapesData, this.itemsData, this.prevViewData, this.shapesContainer, 0, [], !0), this.filterUniqueShapes(), this.shapeCont = t;\n        }, HShapeElement.prototype.getTransformedPoint = function(t, e) {\n            var r, i = t.length;\n            for(r = 0; r < i; r += 1)e = t[r].mProps.v.applyToPointArray(e[0], e[1], 0);\n            return e;\n        }, HShapeElement.prototype.calculateShapeBoundingBox = function(t, e) {\n            var r, i, a, s, n, o = t.sh.v, h = t.transformers, l = o._length;\n            if (!(l <= 1)) {\n                for(r = 0; r < l - 1; r += 1)i = this.getTransformedPoint(h, o.v[r]), a = this.getTransformedPoint(h, o.o[r]), s = this.getTransformedPoint(h, o.i[r + 1]), n = this.getTransformedPoint(h, o.v[r + 1]), this.checkBounds(i, a, s, n, e);\n                o.c && (i = this.getTransformedPoint(h, o.v[r]), a = this.getTransformedPoint(h, o.o[r]), s = this.getTransformedPoint(h, o.i[0]), n = this.getTransformedPoint(h, o.v[0]), this.checkBounds(i, a, s, n, e));\n            }\n        }, HShapeElement.prototype.checkBounds = function(t, e, r, i, a) {\n            this.getBoundsOfCurve(t, e, r, i);\n            var s = this.shapeBoundingBox;\n            a.x = bmMin(s.left, a.x), a.xMax = bmMax(s.right, a.xMax), a.y = bmMin(s.top, a.y), a.yMax = bmMax(s.bottom, a.yMax);\n        }, HShapeElement.prototype.shapeBoundingBox = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, HShapeElement.prototype.tempBoundingBox = {\n            x: 0,\n            xMax: 0,\n            y: 0,\n            yMax: 0,\n            width: 0,\n            height: 0\n        }, HShapeElement.prototype.getBoundsOfCurve = function(t, e, r, i) {\n            for(var a, s, n, o, h, l, p, f = [\n                [\n                    t[0],\n                    i[0]\n                ],\n                [\n                    t[1],\n                    i[1]\n                ]\n            ], c = 0; c < 2; ++c)s = 6 * t[c] - 12 * e[c] + 6 * r[c], a = -3 * t[c] + 9 * e[c] - 9 * r[c] + 3 * i[c], n = 3 * e[c] - 3 * t[c], s |= 0, n |= 0, 0 === (a |= 0) && 0 === s || (0 === a ? (o = -n / s) > 0 && o < 1 && f[c].push(this.calculateF(o, t, e, r, i, c)) : (h = s * s - 4 * n * a) >= 0 && ((l = (-s + bmSqrt(h)) / (2 * a)) > 0 && l < 1 && f[c].push(this.calculateF(l, t, e, r, i, c)), (p = (-s - bmSqrt(h)) / (2 * a)) > 0 && p < 1 && f[c].push(this.calculateF(p, t, e, r, i, c))));\n            this.shapeBoundingBox.left = bmMin.apply(null, f[0]), this.shapeBoundingBox.top = bmMin.apply(null, f[1]), this.shapeBoundingBox.right = bmMax.apply(null, f[0]), this.shapeBoundingBox.bottom = bmMax.apply(null, f[1]);\n        }, HShapeElement.prototype.calculateF = function(t, e, r, i, a, s) {\n            return bmPow(1 - t, 3) * e[s] + 3 * bmPow(1 - t, 2) * t * r[s] + 3 * (1 - t) * bmPow(t, 2) * i[s] + bmPow(t, 3) * a[s];\n        }, HShapeElement.prototype.calculateBoundingBox = function(t, e) {\n            var r, i = t.length;\n            for(r = 0; r < i; r += 1)t[r] && t[r].sh ? this.calculateShapeBoundingBox(t[r], e) : t[r] && t[r].it ? this.calculateBoundingBox(t[r].it, e) : t[r] && t[r].style && t[r].w && this.expandStrokeBoundingBox(t[r].w, e);\n        }, HShapeElement.prototype.expandStrokeBoundingBox = function(t, e) {\n            var r = 0;\n            if (t.keyframes) {\n                for(var i = 0; i < t.keyframes.length; i += 1){\n                    var a = t.keyframes[i].s;\n                    a > r && (r = a);\n                }\n                r *= t.mult;\n            } else r = t.v * t.mult;\n            e.x -= r, e.xMax += r, e.y -= r, e.yMax += r;\n        }, HShapeElement.prototype.currentBoxContains = function(t) {\n            return this.currentBBox.x <= t.x && this.currentBBox.y <= t.y && this.currentBBox.width + this.currentBBox.x >= t.x + t.width && this.currentBBox.height + this.currentBBox.y >= t.y + t.height;\n        }, HShapeElement.prototype.renderInnerContent = function() {\n            if (this._renderShapeFrame(), !this.hidden && (this._isFirstFrame || this._mdf)) {\n                var t = this.tempBoundingBox, e = 999999;\n                if (t.x = e, t.xMax = -e, t.y = e, t.yMax = -e, this.calculateBoundingBox(this.itemsData, t), t.width = t.xMax < t.x ? 0 : t.xMax - t.x, t.height = t.yMax < t.y ? 0 : t.yMax - t.y, this.currentBoxContains(t)) return;\n                var r = !1;\n                if (this.currentBBox.w !== t.width && (this.currentBBox.w = t.width, this.shapeCont.setAttribute(\"width\", t.width), r = !0), this.currentBBox.h !== t.height && (this.currentBBox.h = t.height, this.shapeCont.setAttribute(\"height\", t.height), r = !0), r || this.currentBBox.x !== t.x || this.currentBBox.y !== t.y) {\n                    this.currentBBox.w = t.width, this.currentBBox.h = t.height, this.currentBBox.x = t.x, this.currentBBox.y = t.y, this.shapeCont.setAttribute(\"viewBox\", this.currentBBox.x + \" \" + this.currentBBox.y + \" \" + this.currentBBox.w + \" \" + this.currentBBox.h);\n                    var i = this.shapeCont.style, a = \"translate(\" + this.currentBBox.x + \"px,\" + this.currentBBox.y + \"px)\";\n                    i.transform = a, i.webkitTransform = a;\n                }\n            }\n        }, extendPrototype([\n            BaseElement,\n            TransformElement,\n            HBaseElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableDOMElement,\n            ITextElement\n        ], HTextElement), HTextElement.prototype.createContent = function() {\n            if (this.isMasked = this.checkMasks(), this.isMasked) {\n                this.renderType = \"svg\", this.compW = this.comp.data.w, this.compH = this.comp.data.h, this.svgElement.setAttribute(\"width\", this.compW), this.svgElement.setAttribute(\"height\", this.compH);\n                var t = createNS(\"g\");\n                this.maskedElement.appendChild(t), this.innerElem = t;\n            } else this.renderType = \"html\", this.innerElem = this.layerElement;\n            this.checkParenting();\n        }, HTextElement.prototype.buildNewText = function() {\n            var t = this.textProperty.currentData;\n            this.renderedLetters = createSizedArray(t.l ? t.l.length : 0);\n            var e = this.innerElem.style, r = t.fc ? this.buildColor(t.fc) : \"rgba(0,0,0,0)\";\n            e.fill = r, e.color = r, t.sc && (e.stroke = this.buildColor(t.sc), e.strokeWidth = t.sw + \"px\");\n            var i, a, s = this.globalData.fontManager.getFontByName(t.f);\n            if (!this.globalData.fontManager.chars) if (e.fontSize = t.finalSize + \"px\", e.lineHeight = t.finalSize + \"px\", s.fClass) this.innerElem.className = s.fClass;\n            else {\n                e.fontFamily = s.fFamily;\n                var n = t.fWeight, o = t.fStyle;\n                e.fontStyle = o, e.fontWeight = n;\n            }\n            var h, l, p, f = t.l;\n            a = f.length;\n            var c, m = this.mHelper, d = \"\", u = 0;\n            for(i = 0; i < a; i += 1){\n                if (this.globalData.fontManager.chars ? (this.textPaths[u] ? h = this.textPaths[u] : ((h = createNS(\"path\")).setAttribute(\"stroke-linecap\", lineCapEnum[1]), h.setAttribute(\"stroke-linejoin\", lineJoinEnum[2]), h.setAttribute(\"stroke-miterlimit\", \"4\")), this.isMasked || (this.textSpans[u] ? p = (l = this.textSpans[u]).children[0] : ((l = createTag(\"div\")).style.lineHeight = 0, (p = createNS(\"svg\")).appendChild(h), styleDiv(l)))) : this.isMasked ? h = this.textPaths[u] ? this.textPaths[u] : createNS(\"text\") : this.textSpans[u] ? (l = this.textSpans[u], h = this.textPaths[u]) : (styleDiv(l = createTag(\"span\")), styleDiv(h = createTag(\"span\")), l.appendChild(h)), this.globalData.fontManager.chars) {\n                    var y, g = this.globalData.fontManager.getCharData(t.finalText[i], s.fStyle, this.globalData.fontManager.getFontByName(t.f).fFamily);\n                    if (y = g ? g.data : null, m.reset(), y && y.shapes && y.shapes.length && (c = y.shapes[0].it, m.scale(t.finalSize / 100, t.finalSize / 100), d = this.createPathShape(m, c), h.setAttribute(\"d\", d)), this.isMasked) this.innerElem.appendChild(h);\n                    else {\n                        if (this.innerElem.appendChild(l), y && y.shapes) {\n                            document.body.appendChild(p);\n                            var v = p.getBBox();\n                            p.setAttribute(\"width\", v.width + 2), p.setAttribute(\"height\", v.height + 2), p.setAttribute(\"viewBox\", v.x - 1 + \" \" + (v.y - 1) + \" \" + (v.width + 2) + \" \" + (v.height + 2));\n                            var b = p.style, x = \"translate(\" + (v.x - 1) + \"px,\" + (v.y - 1) + \"px)\";\n                            b.transform = x, b.webkitTransform = x, f[i].yOffset = v.y - 1;\n                        } else p.setAttribute(\"width\", 1), p.setAttribute(\"height\", 1);\n                        l.appendChild(p);\n                    }\n                } else if (h.textContent = f[i].val, h.setAttributeNS(\"http://www.w3.org/XML/1998/namespace\", \"xml:space\", \"preserve\"), this.isMasked) this.innerElem.appendChild(h);\n                else {\n                    this.innerElem.appendChild(l);\n                    var P = h.style, E = \"translate3d(0,\" + -t.finalSize / 1.2 + \"px,0)\";\n                    P.transform = E, P.webkitTransform = E;\n                }\n                this.isMasked ? this.textSpans[u] = h : this.textSpans[u] = l, this.textSpans[u].style.display = \"block\", this.textPaths[u] = h, u += 1;\n            }\n            for(; u < this.textSpans.length;)this.textSpans[u].style.display = \"none\", u += 1;\n        }, HTextElement.prototype.renderInnerContent = function() {\n            var t;\n            if (this.data.singleShape) {\n                if (!this._isFirstFrame && !this.lettersChangedFlag) return;\n                if (this.isMasked && this.finalTransform._matMdf) {\n                    this.svgElement.setAttribute(\"viewBox\", -this.finalTransform.mProp.p.v[0] + \" \" + -this.finalTransform.mProp.p.v[1] + \" \" + this.compW + \" \" + this.compH), t = this.svgElement.style;\n                    var e = \"translate(\" + -this.finalTransform.mProp.p.v[0] + \"px,\" + -this.finalTransform.mProp.p.v[1] + \"px)\";\n                    t.transform = e, t.webkitTransform = e;\n                }\n            }\n            if (this.textAnimator.getMeasures(this.textProperty.currentData, this.lettersChangedFlag), this.lettersChangedFlag || this.textAnimator.lettersChangedFlag) {\n                var r, i, a, s, n, o = 0, h = this.textAnimator.renderedLetters, l = this.textProperty.currentData.l;\n                for(i = l.length, r = 0; r < i; r += 1)l[r].n ? o += 1 : (s = this.textSpans[r], n = this.textPaths[r], a = h[o], o += 1, a._mdf.m && (this.isMasked ? s.setAttribute(\"transform\", a.m) : (s.style.webkitTransform = a.m, s.style.transform = a.m)), s.style.opacity = a.o, a.sw && a._mdf.sw && n.setAttribute(\"stroke-width\", a.sw), a.sc && a._mdf.sc && n.setAttribute(\"stroke\", a.sc), a.fc && a._mdf.fc && (n.setAttribute(\"fill\", a.fc), n.style.color = a.fc));\n                if (this.innerElem.getBBox && !this.hidden && (this._isFirstFrame || this._mdf)) {\n                    var p = this.innerElem.getBBox();\n                    this.currentBBox.w !== p.width && (this.currentBBox.w = p.width, this.svgElement.setAttribute(\"width\", p.width)), this.currentBBox.h !== p.height && (this.currentBBox.h = p.height, this.svgElement.setAttribute(\"height\", p.height));\n                    if (this.currentBBox.w !== p.width + 2 || this.currentBBox.h !== p.height + 2 || this.currentBBox.x !== p.x - 1 || this.currentBBox.y !== p.y - 1) {\n                        this.currentBBox.w = p.width + 2, this.currentBBox.h = p.height + 2, this.currentBBox.x = p.x - 1, this.currentBBox.y = p.y - 1, this.svgElement.setAttribute(\"viewBox\", this.currentBBox.x + \" \" + this.currentBBox.y + \" \" + this.currentBBox.w + \" \" + this.currentBBox.h), t = this.svgElement.style;\n                        var f = \"translate(\" + this.currentBBox.x + \"px,\" + this.currentBBox.y + \"px)\";\n                        t.transform = f, t.webkitTransform = f;\n                    }\n                }\n            }\n        }, extendPrototype([\n            BaseElement,\n            FrameElement,\n            HierarchyElement\n        ], HCameraElement), HCameraElement.prototype.setup = function() {\n            var t, e, r, i, a = this.comp.threeDElements.length;\n            for(t = 0; t < a; t += 1)if (\"3d\" === (e = this.comp.threeDElements[t]).type) {\n                r = e.perspectiveElem.style, i = e.container.style;\n                var s = this.pe.v + \"px\", n = \"matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)\";\n                r.perspective = s, r.webkitPerspective = s, i.transformOrigin = \"0px 0px 0px\", i.mozTransformOrigin = \"0px 0px 0px\", i.webkitTransformOrigin = \"0px 0px 0px\", r.transform = n, r.webkitTransform = n;\n            }\n        }, HCameraElement.prototype.createElements = function() {}, HCameraElement.prototype.hide = function() {}, HCameraElement.prototype.renderFrame = function() {\n            var t, e, r = this._isFirstFrame;\n            if (this.hierarchy) for(e = this.hierarchy.length, t = 0; t < e; t += 1)r = this.hierarchy[t].finalTransform.mProp._mdf || r;\n            if (r || this.pe._mdf || this.p && this.p._mdf || this.px && (this.px._mdf || this.py._mdf || this.pz._mdf) || this.rx._mdf || this.ry._mdf || this.rz._mdf || this.or._mdf || this.a && this.a._mdf) {\n                if (this.mat.reset(), this.hierarchy) for(t = e = this.hierarchy.length - 1; t >= 0; t -= 1){\n                    var i = this.hierarchy[t].finalTransform.mProp;\n                    this.mat.translate(-i.p.v[0], -i.p.v[1], i.p.v[2]), this.mat.rotateX(-i.or.v[0]).rotateY(-i.or.v[1]).rotateZ(i.or.v[2]), this.mat.rotateX(-i.rx.v).rotateY(-i.ry.v).rotateZ(i.rz.v), this.mat.scale(1 / i.s.v[0], 1 / i.s.v[1], 1 / i.s.v[2]), this.mat.translate(i.a.v[0], i.a.v[1], i.a.v[2]);\n                }\n                if (this.p ? this.mat.translate(-this.p.v[0], -this.p.v[1], this.p.v[2]) : this.mat.translate(-this.px.v, -this.py.v, this.pz.v), this.a) {\n                    var a;\n                    a = this.p ? [\n                        this.p.v[0] - this.a.v[0],\n                        this.p.v[1] - this.a.v[1],\n                        this.p.v[2] - this.a.v[2]\n                    ] : [\n                        this.px.v - this.a.v[0],\n                        this.py.v - this.a.v[1],\n                        this.pz.v - this.a.v[2]\n                    ];\n                    var s = Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2)), n = [\n                        a[0] / s,\n                        a[1] / s,\n                        a[2] / s\n                    ], o = Math.sqrt(n[2] * n[2] + n[0] * n[0]), h = Math.atan2(n[1], o), l = Math.atan2(n[0], -n[2]);\n                    this.mat.rotateY(l).rotateX(-h);\n                }\n                this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v), this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]), this.mat.translate(this.globalData.compSize.w / 2, this.globalData.compSize.h / 2, 0), this.mat.translate(0, 0, this.pe.v);\n                var p = !this._prevMat.equals(this.mat);\n                if ((p || this.pe._mdf) && this.comp.threeDElements) {\n                    var f, c, m;\n                    for(e = this.comp.threeDElements.length, t = 0; t < e; t += 1)if (\"3d\" === (f = this.comp.threeDElements[t]).type) {\n                        if (p) {\n                            var d = this.mat.toCSS();\n                            (m = f.container.style).transform = d, m.webkitTransform = d;\n                        }\n                        this.pe._mdf && ((c = f.perspectiveElem.style).perspective = this.pe.v + \"px\", c.webkitPerspective = this.pe.v + \"px\");\n                    }\n                    this.mat.clone(this._prevMat);\n                }\n            }\n            this._isFirstFrame = !1;\n        }, HCameraElement.prototype.prepareFrame = function(t) {\n            this.prepareProperties(t, !0);\n        }, HCameraElement.prototype.destroy = function() {}, HCameraElement.prototype.getBaseElement = function() {\n            return null;\n        }, extendPrototype([\n            BaseElement,\n            TransformElement,\n            HBaseElement,\n            HSolidElement,\n            HierarchyElement,\n            FrameElement,\n            RenderableElement\n        ], HImageElement), HImageElement.prototype.createContent = function() {\n            var t = this.globalData.getAssetsPath(this.assetData), e = new Image;\n            this.data.hasMask ? (this.imageElem = createNS(\"image\"), this.imageElem.setAttribute(\"width\", this.assetData.w + \"px\"), this.imageElem.setAttribute(\"height\", this.assetData.h + \"px\"), this.imageElem.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", t), this.layerElement.appendChild(this.imageElem), this.baseElement.setAttribute(\"width\", this.assetData.w), this.baseElement.setAttribute(\"height\", this.assetData.h)) : this.layerElement.appendChild(e), e.crossOrigin = \"anonymous\", e.src = t, this.data.ln && this.baseElement.setAttribute(\"id\", this.data.ln);\n        }, extendPrototype([\n            BaseRenderer\n        ], HybridRendererBase), HybridRendererBase.prototype.buildItem = SVGRenderer.prototype.buildItem, HybridRendererBase.prototype.checkPendingElements = function() {\n            for(; this.pendingElements.length;){\n                this.pendingElements.pop().checkParenting();\n            }\n        }, HybridRendererBase.prototype.appendElementInPos = function(t, e) {\n            var r = t.getBaseElement();\n            if (r) {\n                var i = this.layers[e];\n                if (i.ddd && this.supports3d) this.addTo3dContainer(r, e);\n                else if (this.threeDElements) this.addTo3dContainer(r, e);\n                else {\n                    for(var a, s, n = 0; n < e;)this.elements[n] && !0 !== this.elements[n] && this.elements[n].getBaseElement && (s = this.elements[n], a = (this.layers[n].ddd ? this.getThreeDContainerByPos(n) : s.getBaseElement()) || a), n += 1;\n                    a ? i.ddd && this.supports3d || this.layerElement.insertBefore(r, a) : i.ddd && this.supports3d || this.layerElement.appendChild(r);\n                }\n            }\n        }, HybridRendererBase.prototype.createShape = function(t) {\n            return this.supports3d ? new HShapeElement(t, this.globalData, this) : new SVGShapeElement(t, this.globalData, this);\n        }, HybridRendererBase.prototype.createText = function(t) {\n            return this.supports3d ? new HTextElement(t, this.globalData, this) : new SVGTextLottieElement(t, this.globalData, this);\n        }, HybridRendererBase.prototype.createCamera = function(t) {\n            return this.camera = new HCameraElement(t, this.globalData, this), this.camera;\n        }, HybridRendererBase.prototype.createImage = function(t) {\n            return this.supports3d ? new HImageElement(t, this.globalData, this) : new IImageElement(t, this.globalData, this);\n        }, HybridRendererBase.prototype.createSolid = function(t) {\n            return this.supports3d ? new HSolidElement(t, this.globalData, this) : new ISolidElement(t, this.globalData, this);\n        }, HybridRendererBase.prototype.createNull = SVGRenderer.prototype.createNull, HybridRendererBase.prototype.getThreeDContainerByPos = function(t) {\n            for(var e = 0, r = this.threeDElements.length; e < r;){\n                if (this.threeDElements[e].startPos <= t && this.threeDElements[e].endPos >= t) return this.threeDElements[e].perspectiveElem;\n                e += 1;\n            }\n            return null;\n        }, HybridRendererBase.prototype.createThreeDContainer = function(t, e) {\n            var r, i, a = createTag(\"div\");\n            styleDiv(a);\n            var s = createTag(\"div\");\n            if (styleDiv(s), \"3d\" === e) {\n                (r = a.style).width = this.globalData.compSize.w + \"px\", r.height = this.globalData.compSize.h + \"px\";\n                r.webkitTransformOrigin = \"50% 50%\", r.mozTransformOrigin = \"50% 50%\", r.transformOrigin = \"50% 50%\";\n                var n = \"matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)\";\n                (i = s.style).transform = n, i.webkitTransform = n;\n            }\n            a.appendChild(s);\n            var o = {\n                container: s,\n                perspectiveElem: a,\n                startPos: t,\n                endPos: t,\n                type: e\n            };\n            return this.threeDElements.push(o), o;\n        }, HybridRendererBase.prototype.build3dContainers = function() {\n            var t, e, r = this.layers.length, i = \"\";\n            for(t = 0; t < r; t += 1)this.layers[t].ddd && 3 !== this.layers[t].ty ? (\"3d\" !== i && (i = \"3d\", e = this.createThreeDContainer(t, \"3d\")), e.endPos = Math.max(e.endPos, t)) : (\"2d\" !== i && (i = \"2d\", e = this.createThreeDContainer(t, \"2d\")), e.endPos = Math.max(e.endPos, t));\n            for(t = (r = this.threeDElements.length) - 1; t >= 0; t -= 1)this.resizerElem.appendChild(this.threeDElements[t].perspectiveElem);\n        }, HybridRendererBase.prototype.addTo3dContainer = function(t, e) {\n            for(var r = 0, i = this.threeDElements.length; r < i;){\n                if (e <= this.threeDElements[r].endPos) {\n                    for(var a, s = this.threeDElements[r].startPos; s < e;)this.elements[s] && this.elements[s].getBaseElement && (a = this.elements[s].getBaseElement()), s += 1;\n                    a ? this.threeDElements[r].container.insertBefore(t, a) : this.threeDElements[r].container.appendChild(t);\n                    break;\n                }\n                r += 1;\n            }\n        }, HybridRendererBase.prototype.configAnimation = function(t) {\n            var e = createTag(\"div\"), r = this.animationItem.wrapper, i = e.style;\n            i.width = t.w + \"px\", i.height = t.h + \"px\", this.resizerElem = e, styleDiv(e), i.transformStyle = \"flat\", i.mozTransformStyle = \"flat\", i.webkitTransformStyle = \"flat\", this.renderConfig.className && e.setAttribute(\"class\", this.renderConfig.className), r.appendChild(e), i.overflow = \"hidden\";\n            var a = createNS(\"svg\");\n            a.setAttribute(\"width\", \"1\"), a.setAttribute(\"height\", \"1\"), styleDiv(a), this.resizerElem.appendChild(a);\n            var s = createNS(\"defs\");\n            a.appendChild(s), this.data = t, this.setupGlobalData(t, a), this.globalData.defs = s, this.layers = t.layers, this.layerElement = this.resizerElem, this.build3dContainers(), this.updateContainerSize();\n        }, HybridRendererBase.prototype.destroy = function() {\n            var t;\n            this.animationItem.wrapper && (this.animationItem.wrapper.innerText = \"\"), this.animationItem.container = null, this.globalData.defs = null;\n            var e = this.layers ? this.layers.length : 0;\n            for(t = 0; t < e; t += 1)this.elements[t].destroy();\n            this.elements.length = 0, this.destroyed = !0, this.animationItem = null;\n        }, HybridRendererBase.prototype.updateContainerSize = function() {\n            var t, e, r, i, a = this.animationItem.wrapper.offsetWidth, s = this.animationItem.wrapper.offsetHeight, n = a / s;\n            this.globalData.compSize.w / this.globalData.compSize.h > n ? (t = a / this.globalData.compSize.w, e = a / this.globalData.compSize.w, r = 0, i = (s - this.globalData.compSize.h * (a / this.globalData.compSize.w)) / 2) : (t = s / this.globalData.compSize.h, e = s / this.globalData.compSize.h, r = (a - this.globalData.compSize.w * (s / this.globalData.compSize.h)) / 2, i = 0);\n            var o = this.resizerElem.style;\n            o.webkitTransform = \"matrix3d(\" + t + \",0,0,0,0,\" + e + \",0,0,0,0,1,0,\" + r + \",\" + i + \",0,1)\", o.transform = o.webkitTransform;\n        }, HybridRendererBase.prototype.renderFrame = SVGRenderer.prototype.renderFrame, HybridRendererBase.prototype.hide = function() {\n            this.resizerElem.style.display = \"none\";\n        }, HybridRendererBase.prototype.show = function() {\n            this.resizerElem.style.display = \"block\";\n        }, HybridRendererBase.prototype.initItems = function() {\n            if (this.buildAllItems(), this.camera) this.camera.setup();\n            else {\n                var t, e = this.globalData.compSize.w, r = this.globalData.compSize.h, i = this.threeDElements.length;\n                for(t = 0; t < i; t += 1){\n                    var a = this.threeDElements[t].perspectiveElem.style;\n                    a.webkitPerspective = Math.sqrt(Math.pow(e, 2) + Math.pow(r, 2)) + \"px\", a.perspective = a.webkitPerspective;\n                }\n            }\n        }, HybridRendererBase.prototype.searchExtraCompositions = function(t) {\n            var e, r = t.length, i = createTag(\"div\");\n            for(e = 0; e < r; e += 1)if (t[e].xt) {\n                var a = this.createComp(t[e], i, this.globalData.comp, null);\n                a.initExpressions(), this.globalData.projectInterface.registerComposition(a);\n            }\n        }, extendPrototype([\n            HybridRendererBase,\n            ICompElement,\n            HBaseElement\n        ], HCompElement), HCompElement.prototype._createBaseContainerElements = HCompElement.prototype.createContainerElements, HCompElement.prototype.createContainerElements = function() {\n            this._createBaseContainerElements(), this.data.hasMask ? (this.svgElement.setAttribute(\"width\", this.data.w), this.svgElement.setAttribute(\"height\", this.data.h), this.transformedElement = this.baseElement) : this.transformedElement = this.layerElement;\n        }, HCompElement.prototype.addTo3dContainer = function(t, e) {\n            for(var r, i = 0; i < e;)this.elements[i] && this.elements[i].getBaseElement && (r = this.elements[i].getBaseElement()), i += 1;\n            r ? this.layerElement.insertBefore(t, r) : this.layerElement.appendChild(t);\n        }, HCompElement.prototype.createComp = function(t) {\n            return this.supports3d ? new HCompElement(t, this.globalData, this) : new SVGCompElement(t, this.globalData, this);\n        }, extendPrototype([\n            HybridRendererBase\n        ], HybridRenderer), HybridRenderer.prototype.createComp = function(t) {\n            return this.supports3d ? new HCompElement(t, this.globalData, this) : new SVGCompElement(t, this.globalData, this);\n        };\n        var CompExpressionInterface = function(t) {\n            function e(e) {\n                for(var r = 0, i = t.layers.length; r < i;){\n                    if (t.layers[r].nm === e || t.layers[r].ind === e) return t.elements[r].layerInterface;\n                    r += 1;\n                }\n                return null;\n            }\n            return Object.defineProperty(e, \"_name\", {\n                value: t.data.nm\n            }), e.layer = e, e.pixelAspect = 1, e.height = t.data.h || t.globalData.compSize.h, e.width = t.data.w || t.globalData.compSize.w, e.pixelAspect = 1, e.frameDuration = 1 / t.globalData.frameRate, e.displayStartTime = 0, e.numLayers = t.layers.length, e;\n        }, Expressions = function() {\n            var t = {};\n            return t.initExpressions = function(t) {\n                var e = 0, r = [];\n                t.renderer.compInterface = CompExpressionInterface(t.renderer), t.renderer.globalData.projectInterface.registerComposition(t.renderer), t.renderer.globalData.pushExpression = function() {\n                    e += 1;\n                }, t.renderer.globalData.popExpression = function() {\n                    0 === (e -= 1) && function() {\n                        var t, e = r.length;\n                        for(t = 0; t < e; t += 1)r[t].release();\n                        r.length = 0;\n                    }();\n                }, t.renderer.globalData.registerExpressionProperty = function(t) {\n                    -1 === r.indexOf(t) && r.push(t);\n                };\n            }, t;\n        }(), MaskManagerInterface = function() {\n            function t(t, e) {\n                this._mask = t, this._data = e;\n            }\n            Object.defineProperty(t.prototype, \"maskPath\", {\n                get: function() {\n                    return this._mask.prop.k && this._mask.prop.getValue(), this._mask.prop;\n                }\n            }), Object.defineProperty(t.prototype, \"maskOpacity\", {\n                get: function() {\n                    return this._mask.op.k && this._mask.op.getValue(), 100 * this._mask.op.v;\n                }\n            });\n            return function(e) {\n                var r, i = createSizedArray(e.viewData.length), a = e.viewData.length;\n                for(r = 0; r < a; r += 1)i[r] = new t(e.viewData[r], e.masksProperties[r]);\n                return function(t) {\n                    for(r = 0; r < a;){\n                        if (e.masksProperties[r].nm === t) return i[r];\n                        r += 1;\n                    }\n                    return null;\n                };\n            };\n        }(), ExpressionPropertyInterface = function() {\n            var t = {\n                pv: 0,\n                v: 0,\n                mult: 1\n            }, e = {\n                pv: [\n                    0,\n                    0,\n                    0\n                ],\n                v: [\n                    0,\n                    0,\n                    0\n                ],\n                mult: 1\n            };\n            function r(t, e, r) {\n                Object.defineProperty(t, \"velocity\", {\n                    get: function() {\n                        return e.getVelocityAtTime(e.comp.currentFrame);\n                    }\n                }), t.numKeys = e.keyframes ? e.keyframes.length : 0, t.key = function(i) {\n                    if (!t.numKeys) return 0;\n                    var a = \"\";\n                    a = \"s\" in e.keyframes[i - 1] ? e.keyframes[i - 1].s : \"e\" in e.keyframes[i - 2] ? e.keyframes[i - 2].e : e.keyframes[i - 2].s;\n                    var s = \"unidimensional\" === r ? new Number(a) : Object.assign({}, a);\n                    return s.time = e.keyframes[i - 1].t / e.elem.comp.globalData.frameRate, s.value = \"unidimensional\" === r ? a[0] : a, s;\n                }, t.valueAtTime = e.getValueAtTime, t.speedAtTime = e.getSpeedAtTime, t.velocityAtTime = e.getVelocityAtTime, t.propertyGroup = e.propertyGroup;\n            }\n            function i() {\n                return t;\n            }\n            return function(a) {\n                return a ? \"unidimensional\" === a.propType ? function(e) {\n                    e && \"pv\" in e || (e = t);\n                    var i = 1 / e.mult, a = e.pv * i, s = new Number(a);\n                    return s.value = a, r(s, e, \"unidimensional\"), function() {\n                        return e.k && e.getValue(), a = e.v * i, s.value !== a && ((s = new Number(a)).value = a, r(s, e, \"unidimensional\")), s;\n                    };\n                }(a) : function(t) {\n                    t && \"pv\" in t || (t = e);\n                    var i = 1 / t.mult, a = t.data && t.data.l || t.pv.length, s = createTypedArray(\"float32\", a), n = createTypedArray(\"float32\", a);\n                    return s.value = n, r(s, t, \"multidimensional\"), function() {\n                        t.k && t.getValue();\n                        for(var e = 0; e < a; e += 1)n[e] = t.v[e] * i, s[e] = n[e];\n                        return s;\n                    };\n                }(a) : i;\n            };\n        }(), TransformExpressionInterface = function(t) {\n            function e(t) {\n                switch(t){\n                    case \"scale\":\n                    case \"Scale\":\n                    case \"ADBE Scale\":\n                    case 6:\n                        return e.scale;\n                    case \"rotation\":\n                    case \"Rotation\":\n                    case \"ADBE Rotation\":\n                    case \"ADBE Rotate Z\":\n                    case 10:\n                        return e.rotation;\n                    case \"ADBE Rotate X\":\n                        return e.xRotation;\n                    case \"ADBE Rotate Y\":\n                        return e.yRotation;\n                    case \"position\":\n                    case \"Position\":\n                    case \"ADBE Position\":\n                    case 2:\n                        return e.position;\n                    case \"ADBE Position_0\":\n                        return e.xPosition;\n                    case \"ADBE Position_1\":\n                        return e.yPosition;\n                    case \"ADBE Position_2\":\n                        return e.zPosition;\n                    case \"anchorPoint\":\n                    case \"AnchorPoint\":\n                    case \"Anchor Point\":\n                    case \"ADBE AnchorPoint\":\n                    case 1:\n                        return e.anchorPoint;\n                    case \"opacity\":\n                    case \"Opacity\":\n                    case 11:\n                        return e.opacity;\n                    default:\n                        return null;\n                }\n            }\n            var r, i, a, s;\n            return Object.defineProperty(e, \"rotation\", {\n                get: ExpressionPropertyInterface(t.r || t.rz)\n            }), Object.defineProperty(e, \"zRotation\", {\n                get: ExpressionPropertyInterface(t.rz || t.r)\n            }), Object.defineProperty(e, \"xRotation\", {\n                get: ExpressionPropertyInterface(t.rx)\n            }), Object.defineProperty(e, \"yRotation\", {\n                get: ExpressionPropertyInterface(t.ry)\n            }), Object.defineProperty(e, \"scale\", {\n                get: ExpressionPropertyInterface(t.s)\n            }), t.p ? s = ExpressionPropertyInterface(t.p) : (r = ExpressionPropertyInterface(t.px), i = ExpressionPropertyInterface(t.py), t.pz && (a = ExpressionPropertyInterface(t.pz))), Object.defineProperty(e, \"position\", {\n                get: function() {\n                    return t.p ? s() : [\n                        r(),\n                        i(),\n                        a ? a() : 0\n                    ];\n                }\n            }), Object.defineProperty(e, \"xPosition\", {\n                get: ExpressionPropertyInterface(t.px)\n            }), Object.defineProperty(e, \"yPosition\", {\n                get: ExpressionPropertyInterface(t.py)\n            }), Object.defineProperty(e, \"zPosition\", {\n                get: ExpressionPropertyInterface(t.pz)\n            }), Object.defineProperty(e, \"anchorPoint\", {\n                get: ExpressionPropertyInterface(t.a)\n            }), Object.defineProperty(e, \"opacity\", {\n                get: ExpressionPropertyInterface(t.o)\n            }), Object.defineProperty(e, \"skew\", {\n                get: ExpressionPropertyInterface(t.sk)\n            }), Object.defineProperty(e, \"skewAxis\", {\n                get: ExpressionPropertyInterface(t.sa)\n            }), Object.defineProperty(e, \"orientation\", {\n                get: ExpressionPropertyInterface(t.or)\n            }), e;\n        }, LayerExpressionInterface = function() {\n            function t(t) {\n                var e = new Matrix;\n                void 0 !== t ? this._elem.finalTransform.mProp.getValueAtTime(t).clone(e) : this._elem.finalTransform.mProp.applyToMatrix(e);\n                return e;\n            }\n            function e(t, e) {\n                var r = this.getMatrix(e);\n                return r.props[12] = 0, r.props[13] = 0, r.props[14] = 0, this.applyPoint(r, t);\n            }\n            function r(t, e) {\n                var r = this.getMatrix(e);\n                return this.applyPoint(r, t);\n            }\n            function i(t, e) {\n                var r = this.getMatrix(e);\n                return r.props[12] = 0, r.props[13] = 0, r.props[14] = 0, this.invertPoint(r, t);\n            }\n            function a(t, e) {\n                var r = this.getMatrix(e);\n                return this.invertPoint(r, t);\n            }\n            function s(t, e) {\n                if (this._elem.hierarchy && this._elem.hierarchy.length) {\n                    var r, i = this._elem.hierarchy.length;\n                    for(r = 0; r < i; r += 1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(t);\n                }\n                return t.applyToPointArray(e[0], e[1], e[2] || 0);\n            }\n            function n(t, e) {\n                if (this._elem.hierarchy && this._elem.hierarchy.length) {\n                    var r, i = this._elem.hierarchy.length;\n                    for(r = 0; r < i; r += 1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(t);\n                }\n                return t.inversePoint(e);\n            }\n            function o(t) {\n                var e = new Matrix;\n                if (e.reset(), this._elem.finalTransform.mProp.applyToMatrix(e), this._elem.hierarchy && this._elem.hierarchy.length) {\n                    var r, i = this._elem.hierarchy.length;\n                    for(r = 0; r < i; r += 1)this._elem.hierarchy[r].finalTransform.mProp.applyToMatrix(e);\n                    return e.inversePoint(t);\n                }\n                return e.inversePoint(t);\n            }\n            function h() {\n                return [\n                    1,\n                    1,\n                    1,\n                    1\n                ];\n            }\n            return function(l) {\n                var p;\n                function f(t) {\n                    switch(t){\n                        case \"ADBE Root Vectors Group\":\n                        case \"Contents\":\n                        case 2:\n                            return f.shapeInterface;\n                        case 1:\n                        case 6:\n                        case \"Transform\":\n                        case \"transform\":\n                        case \"ADBE Transform Group\":\n                            return p;\n                        case 4:\n                        case \"ADBE Effect Parade\":\n                        case \"effects\":\n                        case \"Effects\":\n                            return f.effect;\n                        case \"ADBE Text Properties\":\n                            return f.textInterface;\n                        default:\n                            return null;\n                    }\n                }\n                f.getMatrix = t, f.invertPoint = n, f.applyPoint = s, f.toWorld = r, f.toWorldVec = e, f.fromWorld = a, f.fromWorldVec = i, f.toComp = r, f.fromComp = o, f.sampleImage = h, f.sourceRectAtTime = l.sourceRectAtTime.bind(l), f._elem = l;\n                var c = getDescriptor(p = TransformExpressionInterface(l.finalTransform.mProp), \"anchorPoint\");\n                return Object.defineProperties(f, {\n                    hasParent: {\n                        get: function() {\n                            return l.hierarchy.length;\n                        }\n                    },\n                    parent: {\n                        get: function() {\n                            return l.hierarchy[0].layerInterface;\n                        }\n                    },\n                    rotation: getDescriptor(p, \"rotation\"),\n                    scale: getDescriptor(p, \"scale\"),\n                    position: getDescriptor(p, \"position\"),\n                    opacity: getDescriptor(p, \"opacity\"),\n                    anchorPoint: c,\n                    anchor_point: c,\n                    transform: {\n                        get: function() {\n                            return p;\n                        }\n                    },\n                    active: {\n                        get: function() {\n                            return l.isInRange;\n                        }\n                    }\n                }), f.startTime = l.data.st, f.index = l.data.ind, f.source = l.data.refId, f.height = 0 === l.data.ty ? l.data.h : 100, f.width = 0 === l.data.ty ? l.data.w : 100, f.inPoint = l.data.ip / l.comp.globalData.frameRate, f.outPoint = l.data.op / l.comp.globalData.frameRate, f._name = l.data.nm, f.registerMaskInterface = function(t) {\n                    f.mask = new MaskManagerInterface(t, l);\n                }, f.registerEffectsInterface = function(t) {\n                    f.effect = t;\n                }, f;\n            };\n        }(), propertyGroupFactory = function(t, e) {\n            return function(r) {\n                return (r = void 0 === r ? 1 : r) <= 0 ? t : e(r - 1);\n            };\n        }, PropertyInterface = function(t, e) {\n            var r = {\n                _name: t\n            };\n            return function(t) {\n                return (t = void 0 === t ? 1 : t) <= 0 ? r : e(t - 1);\n            };\n        }, EffectsExpressionInterface = function() {\n            function t(r, i, a, s) {\n                function n(t) {\n                    for(var e = r.ef, i = 0, a = e.length; i < a;){\n                        if (t === e[i].nm || t === e[i].mn || t === e[i].ix) return 5 === e[i].ty ? l[i] : l[i]();\n                        i += 1;\n                    }\n                    throw new Error;\n                }\n                var o, h = propertyGroupFactory(n, a), l = [], p = r.ef.length;\n                for(o = 0; o < p; o += 1)5 === r.ef[o].ty ? l.push(t(r.ef[o], i.effectElements[o], i.effectElements[o].propertyGroup, s)) : l.push(e(i.effectElements[o], r.ef[o].ty, s, h));\n                return \"ADBE Color Control\" === r.mn && Object.defineProperty(n, \"color\", {\n                    get: function() {\n                        return l[0]();\n                    }\n                }), Object.defineProperties(n, {\n                    numProperties: {\n                        get: function() {\n                            return r.np;\n                        }\n                    },\n                    _name: {\n                        value: r.nm\n                    },\n                    propertyGroup: {\n                        value: h\n                    }\n                }), n.enabled = 0 !== r.en, n.active = n.enabled, n;\n            }\n            function e(t, e, r, i) {\n                var a = ExpressionPropertyInterface(t.p);\n                return t.p.setGroupProperty && t.p.setGroupProperty(PropertyInterface(\"\", i)), function() {\n                    return 10 === e ? r.comp.compInterface(t.p.v) : a();\n                };\n            }\n            return {\n                createEffectsInterface: function(e, r) {\n                    if (e.effectsManager) {\n                        var i, a = [], s = e.data.ef, n = e.effectsManager.effectElements.length;\n                        for(i = 0; i < n; i += 1)a.push(t(s[i], e.effectsManager.effectElements[i], r, e));\n                        var o = e.data.ef || [], h = function(t) {\n                            for(i = 0, n = o.length; i < n;){\n                                if (t === o[i].nm || t === o[i].mn || t === o[i].ix) return a[i];\n                                i += 1;\n                            }\n                            return null;\n                        };\n                        return Object.defineProperty(h, \"numProperties\", {\n                            get: function() {\n                                return o.length;\n                            }\n                        }), h;\n                    }\n                    return null;\n                }\n            };\n        }(), ShapePathInterface = function(t, e, r) {\n            var i = e.sh;\n            function a(t) {\n                return \"Shape\" === t || \"shape\" === t || \"Path\" === t || \"path\" === t || \"ADBE Vector Shape\" === t || 2 === t ? a.path : null;\n            }\n            var s = propertyGroupFactory(a, r);\n            return i.setGroupProperty(PropertyInterface(\"Path\", s)), Object.defineProperties(a, {\n                path: {\n                    get: function() {\n                        return i.k && i.getValue(), i;\n                    }\n                },\n                shape: {\n                    get: function() {\n                        return i.k && i.getValue(), i;\n                    }\n                },\n                _name: {\n                    value: t.nm\n                },\n                ix: {\n                    value: t.ix\n                },\n                propertyIndex: {\n                    value: t.ix\n                },\n                mn: {\n                    value: t.mn\n                },\n                propertyGroup: {\n                    value: r\n                }\n            }), a;\n        }, ShapeExpressionInterface = function() {\n            function t(t, o, m) {\n                var d, u = [], y = t ? t.length : 0;\n                for(d = 0; d < y; d += 1)\"gr\" === t[d].ty ? u.push(e(t[d], o[d], m)) : \"fl\" === t[d].ty ? u.push(r(t[d], o[d], m)) : \"st\" === t[d].ty ? u.push(s(t[d], o[d], m)) : \"tm\" === t[d].ty ? u.push(n(t[d], o[d], m)) : \"tr\" === t[d].ty || (\"el\" === t[d].ty ? u.push(h(t[d], o[d], m)) : \"sr\" === t[d].ty ? u.push(l(t[d], o[d], m)) : \"sh\" === t[d].ty ? u.push(ShapePathInterface(t[d], o[d], m)) : \"rc\" === t[d].ty ? u.push(p(t[d], o[d], m)) : \"rd\" === t[d].ty ? u.push(f(t[d], o[d], m)) : \"rp\" === t[d].ty ? u.push(c(t[d], o[d], m)) : \"gf\" === t[d].ty ? u.push(i(t[d], o[d], m)) : u.push(a(t[d], o[d])));\n                return u;\n            }\n            function e(e, r, i) {\n                var a = function(t) {\n                    switch(t){\n                        case \"ADBE Vectors Group\":\n                        case \"Contents\":\n                        case 2:\n                            return a.content;\n                        default:\n                            return a.transform;\n                    }\n                };\n                a.propertyGroup = propertyGroupFactory(a, i);\n                var s = function(e, r, i) {\n                    var a, s = function(t) {\n                        for(var e = 0, r = a.length; e < r;){\n                            if (a[e]._name === t || a[e].mn === t || a[e].propertyIndex === t || a[e].ix === t || a[e].ind === t) return a[e];\n                            e += 1;\n                        }\n                        return \"number\" == typeof t ? a[t - 1] : null;\n                    };\n                    s.propertyGroup = propertyGroupFactory(s, i), a = t(e.it, r.it, s.propertyGroup), s.numProperties = a.length;\n                    var n = o(e.it[e.it.length - 1], r.it[r.it.length - 1], s.propertyGroup);\n                    return s.transform = n, s.propertyIndex = e.cix, s._name = e.nm, s;\n                }(e, r, a.propertyGroup), n = o(e.it[e.it.length - 1], r.it[r.it.length - 1], a.propertyGroup);\n                return a.content = s, a.transform = n, Object.defineProperty(a, \"_name\", {\n                    get: function() {\n                        return e.nm;\n                    }\n                }), a.numProperties = e.np, a.propertyIndex = e.ix, a.nm = e.nm, a.mn = e.mn, a;\n            }\n            function r(t, e, r) {\n                function i(t) {\n                    return \"Color\" === t || \"color\" === t ? i.color : \"Opacity\" === t || \"opacity\" === t ? i.opacity : null;\n                }\n                return Object.defineProperties(i, {\n                    color: {\n                        get: ExpressionPropertyInterface(e.c)\n                    },\n                    opacity: {\n                        get: ExpressionPropertyInterface(e.o)\n                    },\n                    _name: {\n                        value: t.nm\n                    },\n                    mn: {\n                        value: t.mn\n                    }\n                }), e.c.setGroupProperty(PropertyInterface(\"Color\", r)), e.o.setGroupProperty(PropertyInterface(\"Opacity\", r)), i;\n            }\n            function i(t, e, r) {\n                function i(t) {\n                    return \"Start Point\" === t || \"start point\" === t ? i.startPoint : \"End Point\" === t || \"end point\" === t ? i.endPoint : \"Opacity\" === t || \"opacity\" === t ? i.opacity : null;\n                }\n                return Object.defineProperties(i, {\n                    startPoint: {\n                        get: ExpressionPropertyInterface(e.s)\n                    },\n                    endPoint: {\n                        get: ExpressionPropertyInterface(e.e)\n                    },\n                    opacity: {\n                        get: ExpressionPropertyInterface(e.o)\n                    },\n                    type: {\n                        get: function() {\n                            return \"a\";\n                        }\n                    },\n                    _name: {\n                        value: t.nm\n                    },\n                    mn: {\n                        value: t.mn\n                    }\n                }), e.s.setGroupProperty(PropertyInterface(\"Start Point\", r)), e.e.setGroupProperty(PropertyInterface(\"End Point\", r)), e.o.setGroupProperty(PropertyInterface(\"Opacity\", r)), i;\n            }\n            function a() {\n                return function() {\n                    return null;\n                };\n            }\n            function s(t, e, r) {\n                var i, a = propertyGroupFactory(l, r), s = propertyGroupFactory(h, a);\n                function n(r) {\n                    Object.defineProperty(h, t.d[r].nm, {\n                        get: ExpressionPropertyInterface(e.d.dataProps[r].p)\n                    });\n                }\n                var o = t.d ? t.d.length : 0, h = {};\n                for(i = 0; i < o; i += 1)n(i), e.d.dataProps[i].p.setGroupProperty(s);\n                function l(t) {\n                    return \"Color\" === t || \"color\" === t ? l.color : \"Opacity\" === t || \"opacity\" === t ? l.opacity : \"Stroke Width\" === t || \"stroke width\" === t ? l.strokeWidth : null;\n                }\n                return Object.defineProperties(l, {\n                    color: {\n                        get: ExpressionPropertyInterface(e.c)\n                    },\n                    opacity: {\n                        get: ExpressionPropertyInterface(e.o)\n                    },\n                    strokeWidth: {\n                        get: ExpressionPropertyInterface(e.w)\n                    },\n                    dash: {\n                        get: function() {\n                            return h;\n                        }\n                    },\n                    _name: {\n                        value: t.nm\n                    },\n                    mn: {\n                        value: t.mn\n                    }\n                }), e.c.setGroupProperty(PropertyInterface(\"Color\", a)), e.o.setGroupProperty(PropertyInterface(\"Opacity\", a)), e.w.setGroupProperty(PropertyInterface(\"Stroke Width\", a)), l;\n            }\n            function n(t, e, r) {\n                function i(e) {\n                    return e === t.e.ix || \"End\" === e || \"end\" === e ? i.end : e === t.s.ix ? i.start : e === t.o.ix ? i.offset : null;\n                }\n                var a = propertyGroupFactory(i, r);\n                return i.propertyIndex = t.ix, e.s.setGroupProperty(PropertyInterface(\"Start\", a)), e.e.setGroupProperty(PropertyInterface(\"End\", a)), e.o.setGroupProperty(PropertyInterface(\"Offset\", a)), i.propertyIndex = t.ix, i.propertyGroup = r, Object.defineProperties(i, {\n                    start: {\n                        get: ExpressionPropertyInterface(e.s)\n                    },\n                    end: {\n                        get: ExpressionPropertyInterface(e.e)\n                    },\n                    offset: {\n                        get: ExpressionPropertyInterface(e.o)\n                    },\n                    _name: {\n                        value: t.nm\n                    }\n                }), i.mn = t.mn, i;\n            }\n            function o(t, e, r) {\n                function i(e) {\n                    return t.a.ix === e || \"Anchor Point\" === e ? i.anchorPoint : t.o.ix === e || \"Opacity\" === e ? i.opacity : t.p.ix === e || \"Position\" === e ? i.position : t.r.ix === e || \"Rotation\" === e || \"ADBE Vector Rotation\" === e ? i.rotation : t.s.ix === e || \"Scale\" === e ? i.scale : t.sk && t.sk.ix === e || \"Skew\" === e ? i.skew : t.sa && t.sa.ix === e || \"Skew Axis\" === e ? i.skewAxis : null;\n                }\n                var a = propertyGroupFactory(i, r);\n                return e.transform.mProps.o.setGroupProperty(PropertyInterface(\"Opacity\", a)), e.transform.mProps.p.setGroupProperty(PropertyInterface(\"Position\", a)), e.transform.mProps.a.setGroupProperty(PropertyInterface(\"Anchor Point\", a)), e.transform.mProps.s.setGroupProperty(PropertyInterface(\"Scale\", a)), e.transform.mProps.r.setGroupProperty(PropertyInterface(\"Rotation\", a)), e.transform.mProps.sk && (e.transform.mProps.sk.setGroupProperty(PropertyInterface(\"Skew\", a)), e.transform.mProps.sa.setGroupProperty(PropertyInterface(\"Skew Angle\", a))), e.transform.op.setGroupProperty(PropertyInterface(\"Opacity\", a)), Object.defineProperties(i, {\n                    opacity: {\n                        get: ExpressionPropertyInterface(e.transform.mProps.o)\n                    },\n                    position: {\n                        get: ExpressionPropertyInterface(e.transform.mProps.p)\n                    },\n                    anchorPoint: {\n                        get: ExpressionPropertyInterface(e.transform.mProps.a)\n                    },\n                    scale: {\n                        get: ExpressionPropertyInterface(e.transform.mProps.s)\n                    },\n                    rotation: {\n                        get: ExpressionPropertyInterface(e.transform.mProps.r)\n                    },\n                    skew: {\n                        get: ExpressionPropertyInterface(e.transform.mProps.sk)\n                    },\n                    skewAxis: {\n                        get: ExpressionPropertyInterface(e.transform.mProps.sa)\n                    },\n                    _name: {\n                        value: t.nm\n                    }\n                }), i.ty = \"tr\", i.mn = t.mn, i.propertyGroup = r, i;\n            }\n            function h(t, e, r) {\n                function i(e) {\n                    return t.p.ix === e ? i.position : t.s.ix === e ? i.size : null;\n                }\n                var a = propertyGroupFactory(i, r);\n                i.propertyIndex = t.ix;\n                var s = \"tm\" === e.sh.ty ? e.sh.prop : e.sh;\n                return s.s.setGroupProperty(PropertyInterface(\"Size\", a)), s.p.setGroupProperty(PropertyInterface(\"Position\", a)), Object.defineProperties(i, {\n                    size: {\n                        get: ExpressionPropertyInterface(s.s)\n                    },\n                    position: {\n                        get: ExpressionPropertyInterface(s.p)\n                    },\n                    _name: {\n                        value: t.nm\n                    }\n                }), i.mn = t.mn, i;\n            }\n            function l(t, e, r) {\n                function i(e) {\n                    return t.p.ix === e ? i.position : t.r.ix === e ? i.rotation : t.pt.ix === e ? i.points : t.or.ix === e || \"ADBE Vector Star Outer Radius\" === e ? i.outerRadius : t.os.ix === e ? i.outerRoundness : !t.ir || t.ir.ix !== e && \"ADBE Vector Star Inner Radius\" !== e ? t.is && t.is.ix === e ? i.innerRoundness : null : i.innerRadius;\n                }\n                var a = propertyGroupFactory(i, r), s = \"tm\" === e.sh.ty ? e.sh.prop : e.sh;\n                return i.propertyIndex = t.ix, s.or.setGroupProperty(PropertyInterface(\"Outer Radius\", a)), s.os.setGroupProperty(PropertyInterface(\"Outer Roundness\", a)), s.pt.setGroupProperty(PropertyInterface(\"Points\", a)), s.p.setGroupProperty(PropertyInterface(\"Position\", a)), s.r.setGroupProperty(PropertyInterface(\"Rotation\", a)), t.ir && (s.ir.setGroupProperty(PropertyInterface(\"Inner Radius\", a)), s.is.setGroupProperty(PropertyInterface(\"Inner Roundness\", a))), Object.defineProperties(i, {\n                    position: {\n                        get: ExpressionPropertyInterface(s.p)\n                    },\n                    rotation: {\n                        get: ExpressionPropertyInterface(s.r)\n                    },\n                    points: {\n                        get: ExpressionPropertyInterface(s.pt)\n                    },\n                    outerRadius: {\n                        get: ExpressionPropertyInterface(s.or)\n                    },\n                    outerRoundness: {\n                        get: ExpressionPropertyInterface(s.os)\n                    },\n                    innerRadius: {\n                        get: ExpressionPropertyInterface(s.ir)\n                    },\n                    innerRoundness: {\n                        get: ExpressionPropertyInterface(s.is)\n                    },\n                    _name: {\n                        value: t.nm\n                    }\n                }), i.mn = t.mn, i;\n            }\n            function p(t, e, r) {\n                function i(e) {\n                    return t.p.ix === e ? i.position : t.r.ix === e ? i.roundness : t.s.ix === e || \"Size\" === e || \"ADBE Vector Rect Size\" === e ? i.size : null;\n                }\n                var a = propertyGroupFactory(i, r), s = \"tm\" === e.sh.ty ? e.sh.prop : e.sh;\n                return i.propertyIndex = t.ix, s.p.setGroupProperty(PropertyInterface(\"Position\", a)), s.s.setGroupProperty(PropertyInterface(\"Size\", a)), s.r.setGroupProperty(PropertyInterface(\"Rotation\", a)), Object.defineProperties(i, {\n                    position: {\n                        get: ExpressionPropertyInterface(s.p)\n                    },\n                    roundness: {\n                        get: ExpressionPropertyInterface(s.r)\n                    },\n                    size: {\n                        get: ExpressionPropertyInterface(s.s)\n                    },\n                    _name: {\n                        value: t.nm\n                    }\n                }), i.mn = t.mn, i;\n            }\n            function f(t, e, r) {\n                function i(e) {\n                    return t.r.ix === e || \"Round Corners 1\" === e ? i.radius : null;\n                }\n                var a = propertyGroupFactory(i, r), s = e;\n                return i.propertyIndex = t.ix, s.rd.setGroupProperty(PropertyInterface(\"Radius\", a)), Object.defineProperties(i, {\n                    radius: {\n                        get: ExpressionPropertyInterface(s.rd)\n                    },\n                    _name: {\n                        value: t.nm\n                    }\n                }), i.mn = t.mn, i;\n            }\n            function c(t, e, r) {\n                function i(e) {\n                    return t.c.ix === e || \"Copies\" === e ? i.copies : t.o.ix === e || \"Offset\" === e ? i.offset : null;\n                }\n                var a = propertyGroupFactory(i, r), s = e;\n                return i.propertyIndex = t.ix, s.c.setGroupProperty(PropertyInterface(\"Copies\", a)), s.o.setGroupProperty(PropertyInterface(\"Offset\", a)), Object.defineProperties(i, {\n                    copies: {\n                        get: ExpressionPropertyInterface(s.c)\n                    },\n                    offset: {\n                        get: ExpressionPropertyInterface(s.o)\n                    },\n                    _name: {\n                        value: t.nm\n                    }\n                }), i.mn = t.mn, i;\n            }\n            return function(e, r, i) {\n                var a;\n                function s(t) {\n                    if (\"number\" == typeof t) return 0 === (t = void 0 === t ? 1 : t) ? i : a[t - 1];\n                    for(var e = 0, r = a.length; e < r;){\n                        if (a[e]._name === t) return a[e];\n                        e += 1;\n                    }\n                    return null;\n                }\n                return s.propertyGroup = propertyGroupFactory(s, function() {\n                    return i;\n                }), a = t(e, r, s.propertyGroup), s.numProperties = a.length, s._name = \"Contents\", s;\n            };\n        }(), TextExpressionInterface = function(t) {\n            var e, r;\n            function i(t) {\n                switch(t){\n                    case \"ADBE Text Document\":\n                        return i.sourceText;\n                    default:\n                        return null;\n                }\n            }\n            return Object.defineProperty(i, \"sourceText\", {\n                get: function() {\n                    t.textProperty.getValue();\n                    var i = t.textProperty.currentData.t;\n                    return i !== e && (e = t.textProperty.currentData.t, (r = new String(i)).value = i || new String(i), Object.defineProperty(r, \"style\", {\n                        get: function() {\n                            return {\n                                fillColor: t.textProperty.currentData.fc\n                            };\n                        }\n                    })), r;\n                }\n            }), i;\n        };\n        function _typeof$2(t) {\n            return (_typeof$2 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(t) {\n                return typeof t;\n            } : function(t) {\n                return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n            })(t);\n        }\n        var FootageInterface = (dataInterfaceFactory = function(t) {\n            function e(t) {\n                return \"Outline\" === t ? e.outlineInterface() : null;\n            }\n            return e._name = \"Outline\", e.outlineInterface = function(t) {\n                var e = \"\", r = t.getFootageData();\n                function i(t) {\n                    if (r[t]) return e = t, \"object\" === _typeof$2(r = r[t]) ? i : r;\n                    var a = t.indexOf(e);\n                    if (-1 !== a) {\n                        var s = parseInt(t.substr(a + e.length), 10);\n                        return \"object\" === _typeof$2(r = r[s]) ? i : r;\n                    }\n                    return \"\";\n                }\n                return function() {\n                    return e = \"\", r = t.getFootageData(), i;\n                };\n            }(t), e;\n        }, function(t) {\n            function e(t) {\n                return \"Data\" === t ? e.dataInterface : null;\n            }\n            return e._name = \"Data\", e.dataInterface = dataInterfaceFactory(t), e;\n        }), dataInterfaceFactory, interfaces = {\n            layer: LayerExpressionInterface,\n            effects: EffectsExpressionInterface,\n            comp: CompExpressionInterface,\n            shape: ShapeExpressionInterface,\n            text: TextExpressionInterface,\n            footage: FootageInterface\n        };\n        function getInterface(t) {\n            return interfaces[t] || null;\n        }\n        function _typeof$1(t) {\n            return (_typeof$1 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(t) {\n                return typeof t;\n            } : function(t) {\n                return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n            })(t);\n        }\n        function seedRandom(t, e) {\n            var r = this, i = e.pow(256, 6), a = e.pow(2, 52), s = 2 * a;\n            function n(t) {\n                var e, r = t.length, i = this, a = 0, s = i.i = i.j = 0, n = i.S = [];\n                for(r || (t = [\n                    r++\n                ]); a < 256;)n[a] = a++;\n                for(a = 0; a < 256; a++)n[a] = n[s = 255 & s + t[a % r] + (e = n[a])], n[s] = e;\n                i.g = function(t) {\n                    for(var e, r = 0, a = i.i, s = i.j, n = i.S; t--;)e = n[a = 255 & a + 1], r = 256 * r + n[255 & (n[a] = n[s = 255 & s + e]) + (n[s] = e)];\n                    return i.i = a, i.j = s, r;\n                };\n            }\n            function o(t, e) {\n                return e.i = t.i, e.j = t.j, e.S = t.S.slice(), e;\n            }\n            function h(t, e) {\n                for(var r, i = t + \"\", a = 0; a < i.length;)e[255 & a] = 255 & (r ^= 19 * e[255 & a]) + i.charCodeAt(a++);\n                return l(e);\n            }\n            function l(t) {\n                return String.fromCharCode.apply(0, t);\n            }\n            e.seedrandom = function(p, f, c) {\n                var m = [], d = h(function t(e, r) {\n                    var i, a = [], s = _typeof$1(e);\n                    if (r && \"object\" == s) for(i in e)try {\n                        a.push(t(e[i], r - 1));\n                    } catch (t) {}\n                    return a.length ? a : \"string\" == s ? e : e + \"\\x00\";\n                }((f = !0 === f ? {\n                    entropy: !0\n                } : f || {}).entropy ? [\n                    p,\n                    l(t)\n                ] : null === p ? function() {\n                    try {\n                        void 0;\n                        var e = new Uint8Array(256);\n                        return (r.crypto || r.msCrypto).getRandomValues(e), l(e);\n                    } catch (e) {\n                        var i = r.navigator, a = i && i.plugins;\n                        return [\n                            +new Date,\n                            r,\n                            a,\n                            r.screen,\n                            l(t)\n                        ];\n                    }\n                }() : p, 3), m), u = new n(m), y = function() {\n                    for(var t = u.g(6), e = i, r = 0; t < a;)t = 256 * (t + r), e *= 256, r = u.g(1);\n                    for(; t >= s;)t /= 2, e /= 2, r >>>= 1;\n                    return (t + r) / e;\n                };\n                return y.int32 = function() {\n                    return 0 | u.g(4);\n                }, y.quick = function() {\n                    return u.g(4) / 4294967296;\n                }, y.double = y, h(l(u.S), t), (f.pass || c || function(t, r, i, a) {\n                    return a && (a.S && o(a, u), t.state = function() {\n                        return o(u, {});\n                    }), i ? (e.random = t, r) : t;\n                })(y, d, \"global\" in f ? f.global : this == e, f.state);\n            }, h(e.random(), t);\n        }\n        function initialize$2(t) {\n            seedRandom([], t);\n        }\n        var propTypes = {\n            SHAPE: \"shape\"\n        };\n        function _typeof(t) {\n            return (_typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(t) {\n                return typeof t;\n            } : function(t) {\n                return t && \"function\" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? \"symbol\" : typeof t;\n            })(t);\n        }\n        var ExpressionManager = function() {\n            var ob = {}, Math = BMMath, window = null, document = null, XMLHttpRequest = null, fetch = null, frames = null;\n            function $bm_isInstanceOfArray(t) {\n                return t.constructor === Array || t.constructor === Float32Array;\n            }\n            function isNumerable(t, e) {\n                return \"number\" === t || \"boolean\" === t || \"string\" === t || e instanceof Number;\n            }\n            function $bm_neg(t) {\n                var e = _typeof(t);\n                if (\"number\" === e || \"boolean\" === e || t instanceof Number) return -t;\n                if ($bm_isInstanceOfArray(t)) {\n                    var r, i = t.length, a = [];\n                    for(r = 0; r < i; r += 1)a[r] = -t[r];\n                    return a;\n                }\n                return t.propType ? t.v : -t;\n            }\n            initialize$2(BMMath);\n            var easeInBez = BezierFactory.getBezierEasing(.333, 0, .833, .833, \"easeIn\").get, easeOutBez = BezierFactory.getBezierEasing(.167, .167, .667, 1, \"easeOut\").get, easeInOutBez = BezierFactory.getBezierEasing(.33, 0, .667, 1, \"easeInOut\").get;\n            function sum(t, e) {\n                var r = _typeof(t), i = _typeof(e);\n                if (\"string\" === r || \"string\" === i) return t + e;\n                if (isNumerable(r, t) && isNumerable(i, e)) return t + e;\n                if ($bm_isInstanceOfArray(t) && isNumerable(i, e)) return (t = t.slice(0))[0] += e, t;\n                if (isNumerable(r, t) && $bm_isInstanceOfArray(e)) return (e = e.slice(0))[0] = t + e[0], e;\n                if ($bm_isInstanceOfArray(t) && $bm_isInstanceOfArray(e)) {\n                    for(var a = 0, s = t.length, n = e.length, o = []; a < s || a < n;)(\"number\" == typeof t[a] || t[a] instanceof Number) && (\"number\" == typeof e[a] || e[a] instanceof Number) ? o[a] = t[a] + e[a] : o[a] = void 0 === e[a] ? t[a] : t[a] || e[a], a += 1;\n                    return o;\n                }\n                return 0;\n            }\n            var add = sum;\n            function sub(t, e) {\n                var r = _typeof(t), i = _typeof(e);\n                if (isNumerable(r, t) && isNumerable(i, e)) return \"string\" === r && (t = parseInt(t, 10)), \"string\" === i && (e = parseInt(e, 10)), t - e;\n                if ($bm_isInstanceOfArray(t) && isNumerable(i, e)) return (t = t.slice(0))[0] -= e, t;\n                if (isNumerable(r, t) && $bm_isInstanceOfArray(e)) return (e = e.slice(0))[0] = t - e[0], e;\n                if ($bm_isInstanceOfArray(t) && $bm_isInstanceOfArray(e)) {\n                    for(var a = 0, s = t.length, n = e.length, o = []; a < s || a < n;)(\"number\" == typeof t[a] || t[a] instanceof Number) && (\"number\" == typeof e[a] || e[a] instanceof Number) ? o[a] = t[a] - e[a] : o[a] = void 0 === e[a] ? t[a] : t[a] || e[a], a += 1;\n                    return o;\n                }\n                return 0;\n            }\n            function mul(t, e) {\n                var r, i, a, s = _typeof(t), n = _typeof(e);\n                if (isNumerable(s, t) && isNumerable(n, e)) return t * e;\n                if ($bm_isInstanceOfArray(t) && isNumerable(n, e)) {\n                    for(a = t.length, r = createTypedArray(\"float32\", a), i = 0; i < a; i += 1)r[i] = t[i] * e;\n                    return r;\n                }\n                if (isNumerable(s, t) && $bm_isInstanceOfArray(e)) {\n                    for(a = e.length, r = createTypedArray(\"float32\", a), i = 0; i < a; i += 1)r[i] = t * e[i];\n                    return r;\n                }\n                return 0;\n            }\n            function div(t, e) {\n                var r, i, a, s = _typeof(t), n = _typeof(e);\n                if (isNumerable(s, t) && isNumerable(n, e)) return t / e;\n                if ($bm_isInstanceOfArray(t) && isNumerable(n, e)) {\n                    for(a = t.length, r = createTypedArray(\"float32\", a), i = 0; i < a; i += 1)r[i] = t[i] / e;\n                    return r;\n                }\n                if (isNumerable(s, t) && $bm_isInstanceOfArray(e)) {\n                    for(a = e.length, r = createTypedArray(\"float32\", a), i = 0; i < a; i += 1)r[i] = t / e[i];\n                    return r;\n                }\n                return 0;\n            }\n            function mod(t, e) {\n                return \"string\" == typeof t && (t = parseInt(t, 10)), \"string\" == typeof e && (e = parseInt(e, 10)), t % e;\n            }\n            var $bm_sum = sum, $bm_sub = sub, $bm_mul = mul, $bm_div = div, $bm_mod = mod;\n            function clamp(t, e, r) {\n                if (e > r) {\n                    var i = r;\n                    r = e, e = i;\n                }\n                return Math.min(Math.max(t, e), r);\n            }\n            function radiansToDegrees(t) {\n                return t / degToRads;\n            }\n            var radians_to_degrees = radiansToDegrees;\n            function degreesToRadians(t) {\n                return t * degToRads;\n            }\n            var degrees_to_radians = radiansToDegrees, helperLengthArray = [\n                0,\n                0,\n                0,\n                0,\n                0,\n                0\n            ];\n            function length(t, e) {\n                if (\"number\" == typeof t || t instanceof Number) return e = e || 0, Math.abs(t - e);\n                var r;\n                e || (e = helperLengthArray);\n                var i = Math.min(t.length, e.length), a = 0;\n                for(r = 0; r < i; r += 1)a += Math.pow(e[r] - t[r], 2);\n                return Math.sqrt(a);\n            }\n            function normalize(t) {\n                return div(t, length(t));\n            }\n            function rgbToHsl(t) {\n                var e, r, i = t[0], a = t[1], s = t[2], n = Math.max(i, a, s), o = Math.min(i, a, s), h = (n + o) / 2;\n                if (n === o) e = 0, r = 0;\n                else {\n                    var l = n - o;\n                    switch(r = h > .5 ? l / (2 - n - o) : l / (n + o), n){\n                        case i:\n                            e = (a - s) / l + (a < s ? 6 : 0);\n                            break;\n                        case a:\n                            e = (s - i) / l + 2;\n                            break;\n                        case s:\n                            e = (i - a) / l + 4;\n                    }\n                    e /= 6;\n                }\n                return [\n                    e,\n                    r,\n                    h,\n                    t[3]\n                ];\n            }\n            function hue2rgb(t, e, r) {\n                return r < 0 && (r += 1), r > 1 && (r -= 1), r < 1 / 6 ? t + 6 * (e - t) * r : r < .5 ? e : r < 2 / 3 ? t + (e - t) * (2 / 3 - r) * 6 : t;\n            }\n            function hslToRgb(t) {\n                var e, r, i, a = t[0], s = t[1], n = t[2];\n                if (0 === s) e = n, i = n, r = n;\n                else {\n                    var o = n < .5 ? n * (1 + s) : n + s - n * s, h = 2 * n - o;\n                    e = hue2rgb(h, o, a + 1 / 3), r = hue2rgb(h, o, a), i = hue2rgb(h, o, a - 1 / 3);\n                }\n                return [\n                    e,\n                    r,\n                    i,\n                    t[3]\n                ];\n            }\n            function linear(t, e, r, i, a) {\n                if (void 0 !== i && void 0 !== a || (i = e, a = r, e = 0, r = 1), r < e) {\n                    var s = r;\n                    r = e, e = s;\n                }\n                if (t <= e) return i;\n                if (t >= r) return a;\n                var n, o = r === e ? 0 : (t - e) / (r - e);\n                if (!i.length) return i + (a - i) * o;\n                var h = i.length, l = createTypedArray(\"float32\", h);\n                for(n = 0; n < h; n += 1)l[n] = i[n] + (a[n] - i[n]) * o;\n                return l;\n            }\n            function random(t, e) {\n                if (void 0 === e && (void 0 === t ? (t = 0, e = 1) : (e = t, t = void 0)), e.length) {\n                    var r, i = e.length;\n                    t || (t = createTypedArray(\"float32\", i));\n                    var a = createTypedArray(\"float32\", i), s = BMMath.random();\n                    for(r = 0; r < i; r += 1)a[r] = t[r] + s * (e[r] - t[r]);\n                    return a;\n                }\n                return void 0 === t && (t = 0), t + BMMath.random() * (e - t);\n            }\n            function createPath(t, e, r, i) {\n                var a, s = t.length, n = shapePool.newElement();\n                n.setPathData(!!i, s);\n                var o, h, l = [\n                    0,\n                    0\n                ];\n                for(a = 0; a < s; a += 1)o = e && e[a] ? e[a] : l, h = r && r[a] ? r[a] : l, n.setTripleAt(t[a][0], t[a][1], h[0] + t[a][0], h[1] + t[a][1], o[0] + t[a][0], o[1] + t[a][1], a, !0);\n                return n;\n            }\n            function initiateExpression(elem, data, property) {\n                function noOp(t) {\n                    return t;\n                }\n                if (!elem.globalData.renderConfig.runExpressions) return noOp;\n                var val = data.x, needsVelocity = /velocity(?![\\w\\d])/.test(val), _needsRandom = -1 !== val.indexOf(\"random\"), elemType = elem.data.ty, transform, $bm_transform, content, effect, thisProperty = property;\n                thisProperty.valueAtTime = thisProperty.getValueAtTime, Object.defineProperty(thisProperty, \"value\", {\n                    get: function() {\n                        return thisProperty.v;\n                    }\n                }), elem.comp.frameDuration = 1 / elem.comp.globalData.frameRate, elem.comp.displayStartTime = 0;\n                var inPoint = elem.data.ip / elem.comp.globalData.frameRate, outPoint = elem.data.op / elem.comp.globalData.frameRate, width = elem.data.sw ? elem.data.sw : 0, height = elem.data.sh ? elem.data.sh : 0, name = elem.data.nm, loopIn, loop_in, loopOut, loop_out, smooth, toWorld, fromWorld, fromComp, toComp, fromCompToSurface, position, rotation, anchorPoint, scale, thisLayer, thisComp, mask, valueAtTime, velocityAtTime, scoped_bm_rt, expression_function = eval(\"[function _expression_function(){\" + val + \";scoped_bm_rt=$bm_rt}]\")[0], numKeys = property.kf ? data.k.length : 0, active = !this.data || !0 !== this.data.hd, wiggle = (function(t, e) {\n                    var r, i, a = this.pv.length ? this.pv.length : 1, s = createTypedArray(\"float32\", a);\n                    var n = Math.floor(5 * time);\n                    for(r = 0, i = 0; r < n;){\n                        for(i = 0; i < a; i += 1)s[i] += -e + 2 * e * BMMath.random();\n                        r += 1;\n                    }\n                    var o = 5 * time, h = o - Math.floor(o), l = createTypedArray(\"float32\", a);\n                    if (a > 1) {\n                        for(i = 0; i < a; i += 1)l[i] = this.pv[i] + s[i] + (-e + 2 * e * BMMath.random()) * h;\n                        return l;\n                    }\n                    return this.pv + s[0] + (-e + 2 * e * BMMath.random()) * h;\n                }).bind(this);\n                function loopInDuration(t, e) {\n                    return loopIn(t, e, !0);\n                }\n                function loopOutDuration(t, e) {\n                    return loopOut(t, e, !0);\n                }\n                thisProperty.loopIn && (loopIn = thisProperty.loopIn.bind(thisProperty), loop_in = loopIn), thisProperty.loopOut && (loopOut = thisProperty.loopOut.bind(thisProperty), loop_out = loopOut), thisProperty.smooth && (smooth = thisProperty.smooth.bind(thisProperty)), this.getValueAtTime && (valueAtTime = this.getValueAtTime.bind(this)), this.getVelocityAtTime && (velocityAtTime = this.getVelocityAtTime.bind(this));\n                var comp = elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface), time, velocity, value, text, textIndex, textTotal, selectorValue;\n                function lookAt(t, e) {\n                    var r = [\n                        e[0] - t[0],\n                        e[1] - t[1],\n                        e[2] - t[2]\n                    ], i = Math.atan2(r[0], Math.sqrt(r[1] * r[1] + r[2] * r[2])) / degToRads;\n                    return [\n                        -Math.atan2(r[1], r[2]) / degToRads,\n                        i,\n                        0\n                    ];\n                }\n                function easeOut(t, e, r, i, a) {\n                    return applyEase(easeOutBez, t, e, r, i, a);\n                }\n                function easeIn(t, e, r, i, a) {\n                    return applyEase(easeInBez, t, e, r, i, a);\n                }\n                function ease(t, e, r, i, a) {\n                    return applyEase(easeInOutBez, t, e, r, i, a);\n                }\n                function applyEase(t, e, r, i, a, s) {\n                    void 0 === a ? (a = r, s = i) : e = (e - r) / (i - r), e > 1 ? e = 1 : e < 0 && (e = 0);\n                    var n = t(e);\n                    if ($bm_isInstanceOfArray(a)) {\n                        var o, h = a.length, l = createTypedArray(\"float32\", h);\n                        for(o = 0; o < h; o += 1)l[o] = (s[o] - a[o]) * n + a[o];\n                        return l;\n                    }\n                    return (s - a) * n + a;\n                }\n                function nearestKey(t) {\n                    var e, r, i, a = data.k.length;\n                    if (data.k.length && \"number\" != typeof data.k[0]) if (r = -1, (t *= elem.comp.globalData.frameRate) < data.k[0].t) r = 1, i = data.k[0].t;\n                    else {\n                        for(e = 0; e < a - 1; e += 1){\n                            if (t === data.k[e].t) {\n                                r = e + 1, i = data.k[e].t;\n                                break;\n                            }\n                            if (t > data.k[e].t && t < data.k[e + 1].t) {\n                                t - data.k[e].t > data.k[e + 1].t - t ? (r = e + 2, i = data.k[e + 1].t) : (r = e + 1, i = data.k[e].t);\n                                break;\n                            }\n                        }\n                        -1 === r && (r = e + 1, i = data.k[e].t);\n                    }\n                    else r = 0, i = 0;\n                    var s = {};\n                    return s.index = r, s.time = i / elem.comp.globalData.frameRate, s;\n                }\n                function key(t) {\n                    var e, r, i;\n                    if (!data.k.length || \"number\" == typeof data.k[0]) throw new Error(\"The property has no keyframe at index \" + t);\n                    t -= 1, e = {\n                        time: data.k[t].t / elem.comp.globalData.frameRate,\n                        value: []\n                    };\n                    var a = Object.prototype.hasOwnProperty.call(data.k[t], \"s\") ? data.k[t].s : data.k[t - 1].e;\n                    for(i = a.length, r = 0; r < i; r += 1)e[r] = a[r], e.value[r] = a[r];\n                    return e;\n                }\n                function framesToTime(t, e) {\n                    return e || (e = elem.comp.globalData.frameRate), t / e;\n                }\n                function timeToFrames(t, e) {\n                    return t || 0 === t || (t = time), e || (e = elem.comp.globalData.frameRate), t * e;\n                }\n                function seedRandom(t) {\n                    BMMath.seedrandom(randSeed + t);\n                }\n                function sourceRectAtTime() {\n                    return elem.sourceRectAtTime();\n                }\n                function substring(t, e) {\n                    return \"string\" == typeof value ? void 0 === e ? value.substring(t) : value.substring(t, e) : \"\";\n                }\n                function substr(t, e) {\n                    return \"string\" == typeof value ? void 0 === e ? value.substr(t) : value.substr(t, e) : \"\";\n                }\n                function posterizeTime(t) {\n                    time = 0 === t ? 0 : Math.floor(time * t) / t, value = valueAtTime(time);\n                }\n                var index = elem.data.ind, hasParent = !(!elem.hierarchy || !elem.hierarchy.length), parent, randSeed = Math.floor(1e6 * Math.random()), globalData = elem.globalData;\n                function executeExpression(t) {\n                    return value = t, this.frameExpressionId === elem.globalData.frameId && \"textSelector\" !== this.propType ? value : (\"textSelector\" === this.propType && (textIndex = this.textIndex, textTotal = this.textTotal, selectorValue = this.selectorValue), thisLayer || (text = elem.layerInterface.text, thisLayer = elem.layerInterface, thisComp = elem.comp.compInterface, toWorld = thisLayer.toWorld.bind(thisLayer), fromWorld = thisLayer.fromWorld.bind(thisLayer), fromComp = thisLayer.fromComp.bind(thisLayer), toComp = thisLayer.toComp.bind(thisLayer), mask = thisLayer.mask ? thisLayer.mask.bind(thisLayer) : null, fromCompToSurface = fromComp), transform || (transform = elem.layerInterface(\"ADBE Transform Group\"), $bm_transform = transform, transform && (anchorPoint = transform.anchorPoint)), 4 !== elemType || content || (content = thisLayer(\"ADBE Root Vectors Group\")), effect || (effect = thisLayer(4)), (hasParent = !(!elem.hierarchy || !elem.hierarchy.length)) && !parent && (parent = elem.hierarchy[0].layerInterface), time = this.comp.renderedFrame / this.comp.globalData.frameRate, _needsRandom && seedRandom(randSeed + time), needsVelocity && (velocity = velocityAtTime(time)), expression_function(), this.frameExpressionId = elem.globalData.frameId, scoped_bm_rt = scoped_bm_rt.propType === propTypes.SHAPE ? scoped_bm_rt.v : scoped_bm_rt);\n                }\n                return executeExpression.__preventDeadCodeRemoval = [\n                    $bm_transform,\n                    anchorPoint,\n                    time,\n                    velocity,\n                    inPoint,\n                    outPoint,\n                    width,\n                    height,\n                    name,\n                    loop_in,\n                    loop_out,\n                    smooth,\n                    toComp,\n                    fromCompToSurface,\n                    toWorld,\n                    fromWorld,\n                    mask,\n                    position,\n                    rotation,\n                    scale,\n                    thisComp,\n                    numKeys,\n                    active,\n                    wiggle,\n                    loopInDuration,\n                    loopOutDuration,\n                    comp,\n                    lookAt,\n                    easeOut,\n                    easeIn,\n                    ease,\n                    nearestKey,\n                    key,\n                    text,\n                    textIndex,\n                    textTotal,\n                    selectorValue,\n                    framesToTime,\n                    timeToFrames,\n                    sourceRectAtTime,\n                    substring,\n                    substr,\n                    posterizeTime,\n                    index,\n                    globalData\n                ], executeExpression;\n            }\n            return ob.initiateExpression = initiateExpression, ob.__preventDeadCodeRemoval = [\n                window,\n                document,\n                XMLHttpRequest,\n                fetch,\n                frames,\n                $bm_neg,\n                add,\n                $bm_sum,\n                $bm_sub,\n                $bm_mul,\n                $bm_div,\n                $bm_mod,\n                clamp,\n                radians_to_degrees,\n                degreesToRadians,\n                degrees_to_radians,\n                normalize,\n                rgbToHsl,\n                hslToRgb,\n                linear,\n                random,\n                createPath\n            ], ob;\n        }(), expressionHelpers = {\n            searchExpressions: function(t, e, r) {\n                e.x && (r.k = !0, r.x = !0, r.initiateExpression = ExpressionManager.initiateExpression, r.effectsSequence.push(r.initiateExpression(t, e, r).bind(r)));\n            },\n            getSpeedAtTime: function(t) {\n                var e = this.getValueAtTime(t), r = this.getValueAtTime(t + -.01), i = 0;\n                if (e.length) {\n                    var a;\n                    for(a = 0; a < e.length; a += 1)i += Math.pow(r[a] - e[a], 2);\n                    i = 100 * Math.sqrt(i);\n                } else i = 0;\n                return i;\n            },\n            getVelocityAtTime: function(t) {\n                if (void 0 !== this.vel) return this.vel;\n                var e, r, i = this.getValueAtTime(t), a = this.getValueAtTime(t + -.001);\n                if (i.length) for(e = createTypedArray(\"float32\", i.length), r = 0; r < i.length; r += 1)e[r] = (a[r] - i[r]) / -.001;\n                else e = (a - i) / -.001;\n                return e;\n            },\n            getValueAtTime: function(t) {\n                return t *= this.elem.globalData.frameRate, (t -= this.offsetTime) !== this._cachingAtTime.lastFrame && (this._cachingAtTime.lastIndex = this._cachingAtTime.lastFrame < t ? this._cachingAtTime.lastIndex : 0, this._cachingAtTime.value = this.interpolateValue(t, this._cachingAtTime), this._cachingAtTime.lastFrame = t), this._cachingAtTime.value;\n            },\n            getStaticValueAtTime: function() {\n                return this.pv;\n            },\n            setGroupProperty: function(t) {\n                this.propertyGroup = t;\n            }\n        };\n        function addPropertyDecorator() {\n            function t(t, e, r) {\n                if (!this.k || !this.keyframes) return this.pv;\n                t = t ? t.toLowerCase() : \"\";\n                var i, a, s, n, o, h = this.comp.renderedFrame, l = this.keyframes, p = l[l.length - 1].t;\n                if (h <= p) return this.pv;\n                if (r ? a = p - (i = e ? Math.abs(p - this.elem.comp.globalData.frameRate * e) : Math.max(0, p - this.elem.data.ip)) : ((!e || e > l.length - 1) && (e = l.length - 1), i = p - (a = l[l.length - 1 - e].t)), \"pingpong\" === t) {\n                    if (Math.floor((h - a) / i) % 2 != 0) return this.getValueAtTime((i - (h - a) % i + a) / this.comp.globalData.frameRate, 0);\n                } else {\n                    if (\"offset\" === t) {\n                        var f = this.getValueAtTime(a / this.comp.globalData.frameRate, 0), c = this.getValueAtTime(p / this.comp.globalData.frameRate, 0), m = this.getValueAtTime(((h - a) % i + a) / this.comp.globalData.frameRate, 0), d = Math.floor((h - a) / i);\n                        if (this.pv.length) {\n                            for(n = (o = new Array(f.length)).length, s = 0; s < n; s += 1)o[s] = (c[s] - f[s]) * d + m[s];\n                            return o;\n                        }\n                        return (c - f) * d + m;\n                    }\n                    if (\"continue\" === t) {\n                        var u = this.getValueAtTime(p / this.comp.globalData.frameRate, 0), y = this.getValueAtTime((p - .001) / this.comp.globalData.frameRate, 0);\n                        if (this.pv.length) {\n                            for(n = (o = new Array(u.length)).length, s = 0; s < n; s += 1)o[s] = u[s] + (u[s] - y[s]) * ((h - p) / this.comp.globalData.frameRate) / 5e-4;\n                            return o;\n                        }\n                        return u + (h - p) / .001 * (u - y);\n                    }\n                }\n                return this.getValueAtTime(((h - a) % i + a) / this.comp.globalData.frameRate, 0);\n            }\n            function e(t, e, r) {\n                if (!this.k) return this.pv;\n                t = t ? t.toLowerCase() : \"\";\n                var i, a, s, n, o, h = this.comp.renderedFrame, l = this.keyframes, p = l[0].t;\n                if (h >= p) return this.pv;\n                if (r ? a = p + (i = e ? Math.abs(this.elem.comp.globalData.frameRate * e) : Math.max(0, this.elem.data.op - p)) : ((!e || e > l.length - 1) && (e = l.length - 1), i = (a = l[e].t) - p), \"pingpong\" === t) {\n                    if (Math.floor((p - h) / i) % 2 == 0) return this.getValueAtTime(((p - h) % i + p) / this.comp.globalData.frameRate, 0);\n                } else {\n                    if (\"offset\" === t) {\n                        var f = this.getValueAtTime(p / this.comp.globalData.frameRate, 0), c = this.getValueAtTime(a / this.comp.globalData.frameRate, 0), m = this.getValueAtTime((i - (p - h) % i + p) / this.comp.globalData.frameRate, 0), d = Math.floor((p - h) / i) + 1;\n                        if (this.pv.length) {\n                            for(n = (o = new Array(f.length)).length, s = 0; s < n; s += 1)o[s] = m[s] - (c[s] - f[s]) * d;\n                            return o;\n                        }\n                        return m - (c - f) * d;\n                    }\n                    if (\"continue\" === t) {\n                        var u = this.getValueAtTime(p / this.comp.globalData.frameRate, 0), y = this.getValueAtTime((p + .001) / this.comp.globalData.frameRate, 0);\n                        if (this.pv.length) {\n                            for(n = (o = new Array(u.length)).length, s = 0; s < n; s += 1)o[s] = u[s] + (u[s] - y[s]) * (p - h) / .001;\n                            return o;\n                        }\n                        return u + (u - y) * (p - h) / .001;\n                    }\n                }\n                return this.getValueAtTime((i - ((p - h) % i + p)) / this.comp.globalData.frameRate, 0);\n            }\n            function r(t, e) {\n                if (!this.k) return this.pv;\n                if (t = .5 * (t || .4), (e = Math.floor(e || 5)) <= 1) return this.pv;\n                var r, i, a = this.comp.renderedFrame / this.comp.globalData.frameRate, s = a - t, n = e > 1 ? (a + t - s) / (e - 1) : 1, o = 0, h = 0;\n                for(r = this.pv.length ? createTypedArray(\"float32\", this.pv.length) : 0; o < e;){\n                    if (i = this.getValueAtTime(s + o * n), this.pv.length) for(h = 0; h < this.pv.length; h += 1)r[h] += i[h];\n                    else r += i;\n                    o += 1;\n                }\n                if (this.pv.length) for(h = 0; h < this.pv.length; h += 1)r[h] /= e;\n                else r /= e;\n                return r;\n            }\n            function i(t) {\n                this._transformCachingAtTime || (this._transformCachingAtTime = {\n                    v: new Matrix\n                });\n                var e = this._transformCachingAtTime.v;\n                if (e.cloneFromProps(this.pre.props), this.appliedTransformations < 1) {\n                    var r = this.a.getValueAtTime(t);\n                    e.translate(-r[0] * this.a.mult, -r[1] * this.a.mult, r[2] * this.a.mult);\n                }\n                if (this.appliedTransformations < 2) {\n                    var i = this.s.getValueAtTime(t);\n                    e.scale(i[0] * this.s.mult, i[1] * this.s.mult, i[2] * this.s.mult);\n                }\n                if (this.sk && this.appliedTransformations < 3) {\n                    var a = this.sk.getValueAtTime(t), s = this.sa.getValueAtTime(t);\n                    e.skewFromAxis(-a * this.sk.mult, s * this.sa.mult);\n                }\n                if (this.r && this.appliedTransformations < 4) {\n                    var n = this.r.getValueAtTime(t);\n                    e.rotate(-n * this.r.mult);\n                } else if (!this.r && this.appliedTransformations < 4) {\n                    var o = this.rz.getValueAtTime(t), h = this.ry.getValueAtTime(t), l = this.rx.getValueAtTime(t), p = this.or.getValueAtTime(t);\n                    e.rotateZ(-o * this.rz.mult).rotateY(h * this.ry.mult).rotateX(l * this.rx.mult).rotateZ(-p[2] * this.or.mult).rotateY(p[1] * this.or.mult).rotateX(p[0] * this.or.mult);\n                }\n                if (this.data.p && this.data.p.s) {\n                    var f = this.px.getValueAtTime(t), c = this.py.getValueAtTime(t);\n                    if (this.data.p.z) {\n                        var m = this.pz.getValueAtTime(t);\n                        e.translate(f * this.px.mult, c * this.py.mult, -m * this.pz.mult);\n                    } else e.translate(f * this.px.mult, c * this.py.mult, 0);\n                } else {\n                    var d = this.p.getValueAtTime(t);\n                    e.translate(d[0] * this.p.mult, d[1] * this.p.mult, -d[2] * this.p.mult);\n                }\n                return e;\n            }\n            function a() {\n                return this.v.clone(new Matrix);\n            }\n            var s = TransformPropertyFactory.getTransformProperty;\n            TransformPropertyFactory.getTransformProperty = function(t, e, r) {\n                var n = s(t, e, r);\n                return n.dynamicProperties.length ? n.getValueAtTime = i.bind(n) : n.getValueAtTime = a.bind(n), n.setGroupProperty = expressionHelpers.setGroupProperty, n;\n            };\n            var n = PropertyFactory.getProp;\n            PropertyFactory.getProp = function(i, a, s, o, h) {\n                var l = n(i, a, s, o, h);\n                l.kf ? l.getValueAtTime = expressionHelpers.getValueAtTime.bind(l) : l.getValueAtTime = expressionHelpers.getStaticValueAtTime.bind(l), l.setGroupProperty = expressionHelpers.setGroupProperty, l.loopOut = t, l.loopIn = e, l.smooth = r, l.getVelocityAtTime = expressionHelpers.getVelocityAtTime.bind(l), l.getSpeedAtTime = expressionHelpers.getSpeedAtTime.bind(l), l.numKeys = 1 === a.a ? a.k.length : 0, l.propertyIndex = a.ix;\n                var p = 0;\n                return 0 !== s && (p = createTypedArray(\"float32\", 1 === a.a ? a.k[0].s.length : a.k.length)), l._cachingAtTime = {\n                    lastFrame: initialDefaultFrame,\n                    lastIndex: 0,\n                    value: p\n                }, expressionHelpers.searchExpressions(i, a, l), l.k && h.addDynamicProperty(l), l;\n            };\n            var o = ShapePropertyFactory.getConstructorFunction(), h = ShapePropertyFactory.getKeyframedConstructorFunction();\n            function l() {}\n            l.prototype = {\n                vertices: function(t, e) {\n                    this.k && this.getValue();\n                    var r, i = this.v;\n                    void 0 !== e && (i = this.getValueAtTime(e, 0));\n                    var a = i._length, s = i[t], n = i.v, o = createSizedArray(a);\n                    for(r = 0; r < a; r += 1)o[r] = \"i\" === t || \"o\" === t ? [\n                        s[r][0] - n[r][0],\n                        s[r][1] - n[r][1]\n                    ] : [\n                        s[r][0],\n                        s[r][1]\n                    ];\n                    return o;\n                },\n                points: function(t) {\n                    return this.vertices(\"v\", t);\n                },\n                inTangents: function(t) {\n                    return this.vertices(\"i\", t);\n                },\n                outTangents: function(t) {\n                    return this.vertices(\"o\", t);\n                },\n                isClosed: function() {\n                    return this.v.c;\n                },\n                pointOnPath: function(t, e) {\n                    var r = this.v;\n                    void 0 !== e && (r = this.getValueAtTime(e, 0)), this._segmentsLength || (this._segmentsLength = bez.getSegmentsLength(r));\n                    for(var i, a = this._segmentsLength, s = a.lengths, n = a.totalLength * t, o = 0, h = s.length, l = 0; o < h;){\n                        if (l + s[o].addedLength > n) {\n                            var p = o, f = r.c && o === h - 1 ? 0 : o + 1, c = (n - l) / s[o].addedLength;\n                            i = bez.getPointInSegment(r.v[p], r.v[f], r.o[p], r.i[f], c, s[o]);\n                            break;\n                        }\n                        l += s[o].addedLength, o += 1;\n                    }\n                    return i || (i = r.c ? [\n                        r.v[0][0],\n                        r.v[0][1]\n                    ] : [\n                        r.v[r._length - 1][0],\n                        r.v[r._length - 1][1]\n                    ]), i;\n                },\n                vectorOnPath: function(t, e, r) {\n                    1 == t ? t = this.v.c : 0 == t && (t = .999);\n                    var i = this.pointOnPath(t, e), a = this.pointOnPath(t + .001, e), s = a[0] - i[0], n = a[1] - i[1], o = Math.sqrt(Math.pow(s, 2) + Math.pow(n, 2));\n                    return 0 === o ? [\n                        0,\n                        0\n                    ] : \"tangent\" === r ? [\n                        s / o,\n                        n / o\n                    ] : [\n                        -n / o,\n                        s / o\n                    ];\n                },\n                tangentOnPath: function(t, e) {\n                    return this.vectorOnPath(t, e, \"tangent\");\n                },\n                normalOnPath: function(t, e) {\n                    return this.vectorOnPath(t, e, \"normal\");\n                },\n                setGroupProperty: expressionHelpers.setGroupProperty,\n                getValueAtTime: expressionHelpers.getStaticValueAtTime\n            }, extendPrototype([\n                l\n            ], o), extendPrototype([\n                l\n            ], h), h.prototype.getValueAtTime = function(t) {\n                return this._cachingAtTime || (this._cachingAtTime = {\n                    shapeValue: shapePool.clone(this.pv),\n                    lastIndex: 0,\n                    lastTime: initialDefaultFrame\n                }), t *= this.elem.globalData.frameRate, (t -= this.offsetTime) !== this._cachingAtTime.lastTime && (this._cachingAtTime.lastIndex = this._cachingAtTime.lastTime < t ? this._caching.lastIndex : 0, this._cachingAtTime.lastTime = t, this.interpolateShape(t, this._cachingAtTime.shapeValue, this._cachingAtTime)), this._cachingAtTime.shapeValue;\n            }, h.prototype.initiateExpression = ExpressionManager.initiateExpression;\n            var p = ShapePropertyFactory.getShapeProp;\n            ShapePropertyFactory.getShapeProp = function(t, e, r, i, a) {\n                var s = p(t, e, r, i, a);\n                return s.propertyIndex = e.ix, s.lock = !1, 3 === r ? expressionHelpers.searchExpressions(t, e.pt, s) : 4 === r && expressionHelpers.searchExpressions(t, e.ks, s), s.k && t.addDynamicProperty(s), s;\n            };\n        }\n        function initialize$1() {\n            addPropertyDecorator();\n        }\n        function addDecorator() {\n            TextProperty.prototype.getExpressionValue = function(t, e) {\n                var r = this.calculateExpression(e);\n                if (t.t !== r) {\n                    var i = {};\n                    return this.copyData(i, t), i.t = r.toString(), i.__complete = !1, i;\n                }\n                return t;\n            }, TextProperty.prototype.searchProperty = function() {\n                var t = this.searchKeyframes(), e = this.searchExpressions();\n                return this.kf = t || e, this.kf;\n            }, TextProperty.prototype.searchExpressions = function() {\n                return this.data.d.x ? (this.calculateExpression = ExpressionManager.initiateExpression.bind(this)(this.elem, this.data.d, this), this.addEffect(this.getExpressionValue.bind(this)), !0) : null;\n            };\n        }\n        function initialize() {\n            addDecorator();\n        }\n        function SVGComposableEffect() {}\n        SVGComposableEffect.prototype = {\n            createMergeNode: function(t, e) {\n                var r, i, a = createNS(\"feMerge\");\n                for(a.setAttribute(\"result\", t), i = 0; i < e.length; i += 1)(r = createNS(\"feMergeNode\")).setAttribute(\"in\", e[i]), a.appendChild(r), a.appendChild(r);\n                return a;\n            }\n        };\n        var linearFilterValue = \"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0\";\n        function SVGTintFilter(t, e, r, i, a) {\n            this.filterManager = e;\n            var s = createNS(\"feColorMatrix\");\n            s.setAttribute(\"type\", \"matrix\"), s.setAttribute(\"color-interpolation-filters\", \"linearRGB\"), s.setAttribute(\"values\", linearFilterValue + \" 1 0\"), this.linearFilter = s, s.setAttribute(\"result\", i + \"_tint_1\"), t.appendChild(s), (s = createNS(\"feColorMatrix\")).setAttribute(\"type\", \"matrix\"), s.setAttribute(\"color-interpolation-filters\", \"sRGB\"), s.setAttribute(\"values\", \"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0\"), s.setAttribute(\"result\", i + \"_tint_2\"), t.appendChild(s), this.matrixFilter = s;\n            var n = this.createMergeNode(i, [\n                a,\n                i + \"_tint_1\",\n                i + \"_tint_2\"\n            ]);\n            t.appendChild(n);\n        }\n        function SVGFillFilter(t, e, r, i) {\n            this.filterManager = e;\n            var a = createNS(\"feColorMatrix\");\n            a.setAttribute(\"type\", \"matrix\"), a.setAttribute(\"color-interpolation-filters\", \"sRGB\"), a.setAttribute(\"values\", \"1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0\"), a.setAttribute(\"result\", i), t.appendChild(a), this.matrixFilter = a;\n        }\n        function SVGStrokeEffect(t, e, r) {\n            this.initialized = !1, this.filterManager = e, this.elem = r, this.paths = [];\n        }\n        function SVGTritoneFilter(t, e, r, i) {\n            this.filterManager = e;\n            var a = createNS(\"feColorMatrix\");\n            a.setAttribute(\"type\", \"matrix\"), a.setAttribute(\"color-interpolation-filters\", \"linearRGB\"), a.setAttribute(\"values\", \"0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0\"), t.appendChild(a);\n            var s = createNS(\"feComponentTransfer\");\n            s.setAttribute(\"color-interpolation-filters\", \"sRGB\"), s.setAttribute(\"result\", i), this.matrixFilter = s;\n            var n = createNS(\"feFuncR\");\n            n.setAttribute(\"type\", \"table\"), s.appendChild(n), this.feFuncR = n;\n            var o = createNS(\"feFuncG\");\n            o.setAttribute(\"type\", \"table\"), s.appendChild(o), this.feFuncG = o;\n            var h = createNS(\"feFuncB\");\n            h.setAttribute(\"type\", \"table\"), s.appendChild(h), this.feFuncB = h, t.appendChild(s);\n        }\n        function SVGProLevelsFilter(t, e, r, i) {\n            this.filterManager = e;\n            var a = this.filterManager.effectElements, s = createNS(\"feComponentTransfer\");\n            (a[10].p.k || 0 !== a[10].p.v || a[11].p.k || 1 !== a[11].p.v || a[12].p.k || 1 !== a[12].p.v || a[13].p.k || 0 !== a[13].p.v || a[14].p.k || 1 !== a[14].p.v) && (this.feFuncR = this.createFeFunc(\"feFuncR\", s)), (a[17].p.k || 0 !== a[17].p.v || a[18].p.k || 1 !== a[18].p.v || a[19].p.k || 1 !== a[19].p.v || a[20].p.k || 0 !== a[20].p.v || a[21].p.k || 1 !== a[21].p.v) && (this.feFuncG = this.createFeFunc(\"feFuncG\", s)), (a[24].p.k || 0 !== a[24].p.v || a[25].p.k || 1 !== a[25].p.v || a[26].p.k || 1 !== a[26].p.v || a[27].p.k || 0 !== a[27].p.v || a[28].p.k || 1 !== a[28].p.v) && (this.feFuncB = this.createFeFunc(\"feFuncB\", s)), (a[31].p.k || 0 !== a[31].p.v || a[32].p.k || 1 !== a[32].p.v || a[33].p.k || 1 !== a[33].p.v || a[34].p.k || 0 !== a[34].p.v || a[35].p.k || 1 !== a[35].p.v) && (this.feFuncA = this.createFeFunc(\"feFuncA\", s)), (this.feFuncR || this.feFuncG || this.feFuncB || this.feFuncA) && (s.setAttribute(\"color-interpolation-filters\", \"sRGB\"), t.appendChild(s)), (a[3].p.k || 0 !== a[3].p.v || a[4].p.k || 1 !== a[4].p.v || a[5].p.k || 1 !== a[5].p.v || a[6].p.k || 0 !== a[6].p.v || a[7].p.k || 1 !== a[7].p.v) && ((s = createNS(\"feComponentTransfer\")).setAttribute(\"color-interpolation-filters\", \"sRGB\"), s.setAttribute(\"result\", i), t.appendChild(s), this.feFuncRComposed = this.createFeFunc(\"feFuncR\", s), this.feFuncGComposed = this.createFeFunc(\"feFuncG\", s), this.feFuncBComposed = this.createFeFunc(\"feFuncB\", s));\n        }\n        function SVGDropShadowEffect(t, e, r, i, a) {\n            var s = e.container.globalData.renderConfig.filterSize, n = e.data.fs || s;\n            t.setAttribute(\"x\", n.x || s.x), t.setAttribute(\"y\", n.y || s.y), t.setAttribute(\"width\", n.width || s.width), t.setAttribute(\"height\", n.height || s.height), this.filterManager = e;\n            var o = createNS(\"feGaussianBlur\");\n            o.setAttribute(\"in\", \"SourceAlpha\"), o.setAttribute(\"result\", i + \"_drop_shadow_1\"), o.setAttribute(\"stdDeviation\", \"0\"), this.feGaussianBlur = o, t.appendChild(o);\n            var h = createNS(\"feOffset\");\n            h.setAttribute(\"dx\", \"25\"), h.setAttribute(\"dy\", \"0\"), h.setAttribute(\"in\", i + \"_drop_shadow_1\"), h.setAttribute(\"result\", i + \"_drop_shadow_2\"), this.feOffset = h, t.appendChild(h);\n            var l = createNS(\"feFlood\");\n            l.setAttribute(\"flood-color\", \"#00ff00\"), l.setAttribute(\"flood-opacity\", \"1\"), l.setAttribute(\"result\", i + \"_drop_shadow_3\"), this.feFlood = l, t.appendChild(l);\n            var p = createNS(\"feComposite\");\n            p.setAttribute(\"in\", i + \"_drop_shadow_3\"), p.setAttribute(\"in2\", i + \"_drop_shadow_2\"), p.setAttribute(\"operator\", \"in\"), p.setAttribute(\"result\", i + \"_drop_shadow_4\"), t.appendChild(p);\n            var f = this.createMergeNode(i, [\n                i + \"_drop_shadow_4\",\n                a\n            ]);\n            t.appendChild(f);\n        }\n        extendPrototype([\n            SVGComposableEffect\n        ], SVGTintFilter), SVGTintFilter.prototype.renderFrame = function(t) {\n            if (t || this.filterManager._mdf) {\n                var e = this.filterManager.effectElements[0].p.v, r = this.filterManager.effectElements[1].p.v, i = this.filterManager.effectElements[2].p.v / 100;\n                this.linearFilter.setAttribute(\"values\", linearFilterValue + \" \" + i + \" 0\"), this.matrixFilter.setAttribute(\"values\", r[0] - e[0] + \" 0 0 0 \" + e[0] + \" \" + (r[1] - e[1]) + \" 0 0 0 \" + e[1] + \" \" + (r[2] - e[2]) + \" 0 0 0 \" + e[2] + \" 0 0 0 1 0\");\n            }\n        }, SVGFillFilter.prototype.renderFrame = function(t) {\n            if (t || this.filterManager._mdf) {\n                var e = this.filterManager.effectElements[2].p.v, r = this.filterManager.effectElements[6].p.v;\n                this.matrixFilter.setAttribute(\"values\", \"0 0 0 0 \" + e[0] + \" 0 0 0 0 \" + e[1] + \" 0 0 0 0 \" + e[2] + \" 0 0 0 \" + r + \" 0\");\n            }\n        }, SVGStrokeEffect.prototype.initialize = function() {\n            var t, e, r, i, a = this.elem.layerElement.children || this.elem.layerElement.childNodes;\n            for(1 === this.filterManager.effectElements[1].p.v ? (i = this.elem.maskManager.masksProperties.length, r = 0) : i = (r = this.filterManager.effectElements[0].p.v - 1) + 1, (e = createNS(\"g\")).setAttribute(\"fill\", \"none\"), e.setAttribute(\"stroke-linecap\", \"round\"), e.setAttribute(\"stroke-dashoffset\", 1); r < i; r += 1)t = createNS(\"path\"), e.appendChild(t), this.paths.push({\n                p: t,\n                m: r\n            });\n            if (3 === this.filterManager.effectElements[10].p.v) {\n                var s = createNS(\"mask\"), n = createElementID();\n                s.setAttribute(\"id\", n), s.setAttribute(\"mask-type\", \"alpha\"), s.appendChild(e), this.elem.globalData.defs.appendChild(s);\n                var o = createNS(\"g\");\n                for(o.setAttribute(\"mask\", \"url(\" + getLocationHref() + \"#\" + n + \")\"); a[0];)o.appendChild(a[0]);\n                this.elem.layerElement.appendChild(o), this.masker = s, e.setAttribute(\"stroke\", \"#fff\");\n            } else if (1 === this.filterManager.effectElements[10].p.v || 2 === this.filterManager.effectElements[10].p.v) {\n                if (2 === this.filterManager.effectElements[10].p.v) for(a = this.elem.layerElement.children || this.elem.layerElement.childNodes; a.length;)this.elem.layerElement.removeChild(a[0]);\n                this.elem.layerElement.appendChild(e), this.elem.layerElement.removeAttribute(\"mask\"), e.setAttribute(\"stroke\", \"#fff\");\n            }\n            this.initialized = !0, this.pathMasker = e;\n        }, SVGStrokeEffect.prototype.renderFrame = function(t) {\n            var e;\n            this.initialized || this.initialize();\n            var r, i, a = this.paths.length;\n            for(e = 0; e < a; e += 1)if (-1 !== this.paths[e].m && (r = this.elem.maskManager.viewData[this.paths[e].m], i = this.paths[e].p, (t || this.filterManager._mdf || r.prop._mdf) && i.setAttribute(\"d\", r.lastPath), t || this.filterManager.effectElements[9].p._mdf || this.filterManager.effectElements[4].p._mdf || this.filterManager.effectElements[7].p._mdf || this.filterManager.effectElements[8].p._mdf || r.prop._mdf)) {\n                var s;\n                if (0 !== this.filterManager.effectElements[7].p.v || 100 !== this.filterManager.effectElements[8].p.v) {\n                    var n = .01 * Math.min(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v), o = .01 * Math.max(this.filterManager.effectElements[7].p.v, this.filterManager.effectElements[8].p.v), h = i.getTotalLength();\n                    s = \"0 0 0 \" + h * n + \" \";\n                    var l, p = h * (o - n), f = 1 + 2 * this.filterManager.effectElements[4].p.v * this.filterManager.effectElements[9].p.v * .01, c = Math.floor(p / f);\n                    for(l = 0; l < c; l += 1)s += \"1 \" + 2 * this.filterManager.effectElements[4].p.v * this.filterManager.effectElements[9].p.v * .01 + \" \";\n                    s += \"0 \" + 10 * h + \" 0 0\";\n                } else s = \"1 \" + 2 * this.filterManager.effectElements[4].p.v * this.filterManager.effectElements[9].p.v * .01;\n                i.setAttribute(\"stroke-dasharray\", s);\n            }\n            if ((t || this.filterManager.effectElements[4].p._mdf) && this.pathMasker.setAttribute(\"stroke-width\", 2 * this.filterManager.effectElements[4].p.v), (t || this.filterManager.effectElements[6].p._mdf) && this.pathMasker.setAttribute(\"opacity\", this.filterManager.effectElements[6].p.v), (1 === this.filterManager.effectElements[10].p.v || 2 === this.filterManager.effectElements[10].p.v) && (t || this.filterManager.effectElements[3].p._mdf)) {\n                var m = this.filterManager.effectElements[3].p.v;\n                this.pathMasker.setAttribute(\"stroke\", \"rgb(\" + bmFloor(255 * m[0]) + \",\" + bmFloor(255 * m[1]) + \",\" + bmFloor(255 * m[2]) + \")\");\n            }\n        }, SVGTritoneFilter.prototype.renderFrame = function(t) {\n            if (t || this.filterManager._mdf) {\n                var e = this.filterManager.effectElements[0].p.v, r = this.filterManager.effectElements[1].p.v, i = this.filterManager.effectElements[2].p.v, a = i[0] + \" \" + r[0] + \" \" + e[0], s = i[1] + \" \" + r[1] + \" \" + e[1], n = i[2] + \" \" + r[2] + \" \" + e[2];\n                this.feFuncR.setAttribute(\"tableValues\", a), this.feFuncG.setAttribute(\"tableValues\", s), this.feFuncB.setAttribute(\"tableValues\", n);\n            }\n        }, SVGProLevelsFilter.prototype.createFeFunc = function(t, e) {\n            var r = createNS(t);\n            return r.setAttribute(\"type\", \"table\"), e.appendChild(r), r;\n        }, SVGProLevelsFilter.prototype.getTableValue = function(t, e, r, i, a) {\n            for(var s, n, o = 0, h = Math.min(t, e), l = Math.max(t, e), p = Array.call(null, {\n                length: 256\n            }), f = 0, c = a - i, m = e - t; o <= 256;)n = (s = o / 256) <= h ? m < 0 ? a : i : s >= l ? m < 0 ? i : a : i + c * Math.pow((s - t) / m, 1 / r), p[f] = n, f += 1, o += 256 / 255;\n            return p.join(\" \");\n        }, SVGProLevelsFilter.prototype.renderFrame = function(t) {\n            if (t || this.filterManager._mdf) {\n                var e, r = this.filterManager.effectElements;\n                this.feFuncRComposed && (t || r[3].p._mdf || r[4].p._mdf || r[5].p._mdf || r[6].p._mdf || r[7].p._mdf) && (e = this.getTableValue(r[3].p.v, r[4].p.v, r[5].p.v, r[6].p.v, r[7].p.v), this.feFuncRComposed.setAttribute(\"tableValues\", e), this.feFuncGComposed.setAttribute(\"tableValues\", e), this.feFuncBComposed.setAttribute(\"tableValues\", e)), this.feFuncR && (t || r[10].p._mdf || r[11].p._mdf || r[12].p._mdf || r[13].p._mdf || r[14].p._mdf) && (e = this.getTableValue(r[10].p.v, r[11].p.v, r[12].p.v, r[13].p.v, r[14].p.v), this.feFuncR.setAttribute(\"tableValues\", e)), this.feFuncG && (t || r[17].p._mdf || r[18].p._mdf || r[19].p._mdf || r[20].p._mdf || r[21].p._mdf) && (e = this.getTableValue(r[17].p.v, r[18].p.v, r[19].p.v, r[20].p.v, r[21].p.v), this.feFuncG.setAttribute(\"tableValues\", e)), this.feFuncB && (t || r[24].p._mdf || r[25].p._mdf || r[26].p._mdf || r[27].p._mdf || r[28].p._mdf) && (e = this.getTableValue(r[24].p.v, r[25].p.v, r[26].p.v, r[27].p.v, r[28].p.v), this.feFuncB.setAttribute(\"tableValues\", e)), this.feFuncA && (t || r[31].p._mdf || r[32].p._mdf || r[33].p._mdf || r[34].p._mdf || r[35].p._mdf) && (e = this.getTableValue(r[31].p.v, r[32].p.v, r[33].p.v, r[34].p.v, r[35].p.v), this.feFuncA.setAttribute(\"tableValues\", e));\n            }\n        }, extendPrototype([\n            SVGComposableEffect\n        ], SVGDropShadowEffect), SVGDropShadowEffect.prototype.renderFrame = function(t) {\n            if (t || this.filterManager._mdf) {\n                if ((t || this.filterManager.effectElements[4].p._mdf) && this.feGaussianBlur.setAttribute(\"stdDeviation\", this.filterManager.effectElements[4].p.v / 4), t || this.filterManager.effectElements[0].p._mdf) {\n                    var e = this.filterManager.effectElements[0].p.v;\n                    this.feFlood.setAttribute(\"flood-color\", rgbToHex(Math.round(255 * e[0]), Math.round(255 * e[1]), Math.round(255 * e[2])));\n                }\n                if ((t || this.filterManager.effectElements[1].p._mdf) && this.feFlood.setAttribute(\"flood-opacity\", this.filterManager.effectElements[1].p.v / 255), t || this.filterManager.effectElements[2].p._mdf || this.filterManager.effectElements[3].p._mdf) {\n                    var r = this.filterManager.effectElements[3].p.v, i = (this.filterManager.effectElements[2].p.v - 90) * degToRads, a = r * Math.cos(i), s = r * Math.sin(i);\n                    this.feOffset.setAttribute(\"dx\", a), this.feOffset.setAttribute(\"dy\", s);\n                }\n            }\n        };\n        var _svgMatteSymbols = [];\n        function SVGMatte3Effect(t, e, r) {\n            this.initialized = !1, this.filterManager = e, this.filterElem = t, this.elem = r, r.matteElement = createNS(\"g\"), r.matteElement.appendChild(r.layerElement), r.matteElement.appendChild(r.transformedElement), r.baseElement = r.matteElement;\n        }\n        function SVGGaussianBlurEffect(t, e, r, i) {\n            t.setAttribute(\"x\", \"-100%\"), t.setAttribute(\"y\", \"-100%\"), t.setAttribute(\"width\", \"300%\"), t.setAttribute(\"height\", \"300%\"), this.filterManager = e;\n            var a = createNS(\"feGaussianBlur\");\n            a.setAttribute(\"result\", i), t.appendChild(a), this.feGaussianBlur = a;\n        }\n        return SVGMatte3Effect.prototype.findSymbol = function(t) {\n            for(var e = 0, r = _svgMatteSymbols.length; e < r;){\n                if (_svgMatteSymbols[e] === t) return _svgMatteSymbols[e];\n                e += 1;\n            }\n            return null;\n        }, SVGMatte3Effect.prototype.replaceInParent = function(t, e) {\n            var r = t.layerElement.parentNode;\n            if (r) {\n                for(var i, a = r.children, s = 0, n = a.length; s < n && a[s] !== t.layerElement;)s += 1;\n                s <= n - 2 && (i = a[s + 1]);\n                var o = createNS(\"use\");\n                o.setAttribute(\"href\", \"#\" + e), i ? r.insertBefore(o, i) : r.appendChild(o);\n            }\n        }, SVGMatte3Effect.prototype.setElementAsMask = function(t, e) {\n            if (!this.findSymbol(e)) {\n                var r = createElementID(), i = createNS(\"mask\");\n                i.setAttribute(\"id\", e.layerId), i.setAttribute(\"mask-type\", \"alpha\"), _svgMatteSymbols.push(e);\n                var a = t.globalData.defs;\n                a.appendChild(i);\n                var s = createNS(\"symbol\");\n                s.setAttribute(\"id\", r), this.replaceInParent(e, r), s.appendChild(e.layerElement), a.appendChild(s);\n                var n = createNS(\"use\");\n                n.setAttribute(\"href\", \"#\" + r), i.appendChild(n), e.data.hd = !1, e.show();\n            }\n            t.setMatte(e.layerId);\n        }, SVGMatte3Effect.prototype.initialize = function() {\n            for(var t = this.filterManager.effectElements[0].p.v, e = this.elem.comp.elements, r = 0, i = e.length; r < i;)e[r] && e[r].data.ind === t && this.setElementAsMask(this.elem, e[r]), r += 1;\n            this.initialized = !0;\n        }, SVGMatte3Effect.prototype.renderFrame = function() {\n            this.initialized || this.initialize();\n        }, SVGGaussianBlurEffect.prototype.renderFrame = function(t) {\n            if (t || this.filterManager._mdf) {\n                var e = .3 * this.filterManager.effectElements[0].p.v, r = this.filterManager.effectElements[1].p.v, i = 3 == r ? 0 : e, a = 2 == r ? 0 : e;\n                this.feGaussianBlur.setAttribute(\"stdDeviation\", i + \" \" + a);\n                var s = 1 == this.filterManager.effectElements[2].p.v ? \"wrap\" : \"duplicate\";\n                this.feGaussianBlur.setAttribute(\"edgeMode\", s);\n            }\n        }, registerRenderer(\"canvas\", CanvasRenderer), registerRenderer(\"html\", HybridRenderer), registerRenderer(\"svg\", SVGRenderer), ShapeModifiers.registerModifier(\"tm\", TrimModifier), ShapeModifiers.registerModifier(\"pb\", PuckerAndBloatModifier), ShapeModifiers.registerModifier(\"rp\", RepeaterModifier), ShapeModifiers.registerModifier(\"rd\", RoundCornersModifier), ShapeModifiers.registerModifier(\"zz\", ZigZagModifier), ShapeModifiers.registerModifier(\"op\", OffsetPathModifier), setExpressionsPlugin(Expressions), setExpressionInterfaces(getInterface), initialize$1(), initialize(), registerEffect(20, SVGTintFilter, !0), registerEffect(21, SVGFillFilter, !0), registerEffect(22, SVGStrokeEffect, !1), registerEffect(23, SVGTritoneFilter, !0), registerEffect(24, SVGProLevelsFilter, !0), registerEffect(25, SVGDropShadowEffect, !0), registerEffect(28, SVGMatte3Effect, !1), registerEffect(29, SVGGaussianBlurEffect, !0), lottie;\n    });\n}), REACT_LOTTIE_PLAYER_VERSION = \"3.5.3\", LOTTIE_WEB_VERSION = \"^5.10.2\", PlayerState, PlayerEvent;\nfunction parseSrc(t) {\n    if (\"object\" == typeof t) return t;\n    try {\n        return JSON.parse(t);\n    } catch (t) {}\n    try {\n        return new URL(t).toString();\n    } catch (t) {}\n    return t;\n}\n!function(t) {\n    t.Loading = \"loading\", t.Playing = \"playing\", t.Paused = \"paused\", t.Stopped = \"stopped\", t.Frozen = \"frozen\", t.Error = \"error\";\n}(PlayerState || (PlayerState = {})), function(t) {\n    t.Load = \"load\", t.InstanceSaved = \"instanceSaved\", t.Error = \"error\", t.Ready = \"ready\", t.Play = \"play\", t.Pause = \"pause\", t.Stop = \"stop\", t.Freeze = \"freeze\", t.Loop = \"loop\", t.Complete = \"complete\", t.Frame = \"frame\";\n}(PlayerEvent || (PlayerEvent = {}));\nvar defaultOptions = {\n    clearCanvas: !1,\n    hideOnTransparent: !0,\n    progressiveLoad: !0\n}, Player = function(t) {\n    function e(e) {\n        var r = t.call(this, e) || this;\n        return r.container = null, r.unmounted = !1, r.handleBgChange = function(t) {\n            r.setState({\n                background: t\n            });\n        }, r.triggerDownload = function(t, e) {\n            var r = document.createElement(\"a\");\n            r.href = t, r.download = e, document.body.appendChild(r), r.click(), document.body.removeChild(r);\n        }, r.snapshot = function(t) {\n            var e;\n            void 0 === t && (t = !0);\n            var i = r.props.id ? r.props.id : \"lottie\", a = document.getElementById(i);\n            if (\"svg\" === r.props.renderer) {\n                if (a) {\n                    var s = a.querySelector(\"svg\");\n                    if (s) {\n                        var n = (new XMLSerializer).serializeToString(s);\n                        e = \"data:image/svg+xml;charset=utf-8,\" + encodeURIComponent(n);\n                    }\n                }\n                t && r.triggerDownload(e, \"snapshot.svg\");\n            } else if (\"canvas\" === r.props.renderer) {\n                if (a) {\n                    var o = a.querySelector(\"canvas\");\n                    o && (e = o.toDataURL(\"image/png\"));\n                }\n                t && r.triggerDownload(e, \"snapshot.png\");\n            }\n            return e;\n        },  false && (0), r.state = {\n            animationData: null,\n            background: \"transparent\",\n            containerRef: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef(),\n            debug: !0,\n            instance: null,\n            playerState: PlayerState.Loading,\n            seeker: 0\n        }, r;\n    }\n    return __extends(e, t), e.getDerivedStateFromProps = function(t, e) {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(r) {\n                return t.background !== e.background ? [\n                    2,\n                    {\n                        background: t.background\n                    }\n                ] : [\n                    2,\n                    null\n                ];\n            });\n        });\n    }, e.prototype.getVersions = function() {\n        return {\n            lottieWebVersion: LOTTIE_WEB_VERSION,\n            lottiePlayerVersion: REACT_LOTTIE_PLAYER_VERSION\n        };\n    }, e.prototype.componentDidMount = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(t) {\n                switch(t.label){\n                    case 0:\n                        return this.unmounted ? [\n                            3,\n                            2\n                        ] : [\n                            4,\n                            this.createLottie()\n                        ];\n                    case 1:\n                        t.sent(), t.label = 2;\n                    case 2:\n                        return [\n                            2\n                        ];\n                }\n            });\n        });\n    }, e.prototype.componentWillUnmount = function() {\n        this.unmounted = !0, this.state.instance && this.state.instance.destroy();\n    }, e.prototype.componentDidUpdate = function(t) {\n        return __awaiter(this, void 0, void 0, function() {\n            return __generator(this, function(e) {\n                switch(e.label){\n                    case 0:\n                        return this.props.src === t.src ? [\n                            3,\n                            2\n                        ] : (this.state.instance && this.state.instance.destroy(), [\n                            4,\n                            this.createLottie()\n                        ]);\n                    case 1:\n                        e.sent(), e.label = 2;\n                    case 2:\n                        return [\n                            2\n                        ];\n                }\n            });\n        });\n    }, e.prototype.render = function() {\n        var t = this, e = this.props, r = e.children, i = e.loop, a = e.style, s = e.onBackgroundChange, n = e.className, o = this.state, h = o.animationData, l = o.instance, p = o.playerState, f = o.seeker, c = o.debug, m = o.background;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"lf-player-container\"\n        }, this.state.playerState === PlayerState.Error ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"lf-error\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"span\", {\n            \"aria-label\": \"error-symbol\",\n            role: \"img\"\n        }, \"⚠️\")) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            id: this.props.id ? this.props.id : \"lottie\",\n            ref: function(e) {\n                return t.container = e;\n            },\n            style: __assign({\n                background: m,\n                margin: \"0 auto\",\n                outline: \"none\",\n                overflow: \"hidden\"\n            }, a),\n            className: n\n        }), react__WEBPACK_IMPORTED_MODULE_0__.Children.map(r, function(e) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.isValidElement(e) ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.cloneElement(e, {\n                animationData: h,\n                background: m,\n                debug: c,\n                instance: l,\n                loop: i,\n                pause: function() {\n                    return t.pause();\n                },\n                play: function() {\n                    return t.play();\n                },\n                playerState: p,\n                seeker: f,\n                setBackground: function(e) {\n                    t.setState({\n                        background: e\n                    }), \"function\" == typeof s && s(e);\n                },\n                setSeeker: function(e, r) {\n                    return t.setSeeker(e, r);\n                },\n                stop: function() {\n                    return t.stop();\n                },\n                toggleDebug: function() {\n                    return t.toggleDebug();\n                },\n                setLoop: function(e) {\n                    return t.setLoop(e);\n                },\n                colorChangedEvent: function(e) {\n                    t.handleBgChange(e);\n                },\n                snapshot: function() {\n                    t.snapshot();\n                }\n            }) : null;\n        }));\n    }, e.prototype.toggleDebug = function() {\n        this.setState({\n            debug: !this.state.debug\n        });\n    }, e.prototype.createLottie = function() {\n        return __awaiter(this, void 0, void 0, function() {\n            var t, e, r, i, a, s, n, o, h, l, p, f, c, m, d = this;\n            return __generator(this, function(u) {\n                switch(u.label){\n                    case 0:\n                        if (t = this.props, e = t.autoplay, r = t.direction, i = t.loop, a = t.lottieRef, s = t.renderer, n = t.speed, o = t.src, h = t.background, l = t.rendererSettings, p = t.hover, f = this.state.instance, !o || !this.container) return [\n                            2\n                        ];\n                        u.label = 1;\n                    case 1:\n                        return u.trys.push([\n                            1,\n                            5,\n                            ,\n                            6\n                        ]), \"string\" != typeof (c = parseSrc(o)) ? [\n                            3,\n                            4\n                        ] : [\n                            4,\n                            fetch(c).catch(function() {\n                                throw d.setState({\n                                    playerState: PlayerState.Error\n                                }), d.triggerEvent(PlayerEvent.Error), new Error(\"@LottieFiles/lottie-react: Animation data could not be fetched.\");\n                            })\n                        ];\n                    case 2:\n                        return [\n                            4,\n                            u.sent().json().catch(function() {\n                                throw d.setState({\n                                    playerState: PlayerState.Error\n                                }), d.triggerEvent(PlayerEvent.Error), new Error(\"@LottieFiles/lottie-react: Animation data could not be fetched.\");\n                            })\n                        ];\n                    case 3:\n                        c = u.sent(), u.label = 4;\n                    case 4:\n                        return f && f.destroy(), m = lottie.loadAnimation({\n                            rendererSettings: l || defaultOptions,\n                            animationData: c,\n                            autoplay: e || !1,\n                            container: this.container,\n                            loop: i || !1,\n                            renderer: s\n                        }), n && m.setSpeed(n), this.setState({\n                            animationData: c\n                        }), this.setState({\n                            instance: m\n                        }, function() {\n                            d.triggerEvent(PlayerEvent.InstanceSaved), \"function\" == typeof a && a(m), e && d.play();\n                        }), m.addEventListener(\"enterFrame\", function() {\n                            d.triggerEvent(PlayerEvent.Frame), d.setState({\n                                seeker: Math.floor(m.currentFrame)\n                            });\n                        }), m.addEventListener(\"DOMLoaded\", function() {\n                            d.triggerEvent(PlayerEvent.Load);\n                        }), m.addEventListener(\"data_ready\", function() {\n                            d.triggerEvent(PlayerEvent.Ready);\n                        }), m.addEventListener(\"data_failed\", function() {\n                            d.setState({\n                                playerState: PlayerState.Error\n                            }), d.triggerEvent(PlayerEvent.Error);\n                        }), m.addEventListener(\"loopComplete\", function() {\n                            d.triggerEvent(PlayerEvent.Loop);\n                        }), m.addEventListener(\"complete\", function() {\n                            d.triggerEvent(PlayerEvent.Complete), d.setState({\n                                playerState: PlayerState.Paused\n                            }), d.props.keepLastFrame && !d.props.loop || d.setSeeker(0);\n                        }), this.container && (this.container.addEventListener(\"mouseenter\", function() {\n                            p && d.state.playerState !== PlayerState.Playing && (d.props.keepLastFrame && d.stop(), d.play());\n                        }), this.container.addEventListener(\"mouseleave\", function() {\n                            p && d.state.playerState === PlayerState.Playing && d.stop();\n                        })), n && this.setPlayerSpeed(n), r && this.setPlayerDirection(r), h && this.setState({\n                            background: h\n                        }), [\n                            3,\n                            6\n                        ];\n                    case 5:\n                        return u.sent(), this.setState({\n                            playerState: PlayerState.Error\n                        }), this.triggerEvent(PlayerEvent.Error), [\n                            3,\n                            6\n                        ];\n                    case 6:\n                        return [\n                            2\n                        ];\n                }\n            });\n        });\n    }, e.prototype.play = function() {\n        var t = this.state.instance;\n        t && (this.triggerEvent(PlayerEvent.Play), t.play(), this.setState({\n            playerState: PlayerState.Playing\n        }));\n    }, e.prototype.pause = function() {\n        var t = this.state.instance;\n        t && (this.triggerEvent(PlayerEvent.Pause), t.pause(), this.setState({\n            playerState: PlayerState.Paused\n        }));\n    }, e.prototype.stop = function() {\n        var t = this.state.instance;\n        t && (this.triggerEvent(PlayerEvent.Stop), t.stop(), this.setState({\n            playerState: PlayerState.Stopped\n        }));\n    }, e.prototype.setPlayerSpeed = function(t) {\n        var e = this.state.instance;\n        e && e.setSpeed(t);\n    }, e.prototype.setPlayerDirection = function(t) {\n        var e = this.state.instance;\n        e && e.setDirection(t);\n    }, e.prototype.setSeeker = function(t, e) {\n        void 0 === e && (e = !1);\n        var r = this.state, i = r.instance, a = r.playerState;\n        i && (e && a === PlayerState.Playing ? i.goToAndPlay(t, !0) : (i.goToAndStop(t, !0), this.triggerEvent(PlayerEvent.Pause), this.setState({\n            playerState: PlayerState.Paused\n        })));\n    }, e.prototype.setLoop = function(t) {\n        var e = this.state.instance;\n        e && (e.loop = t, this.setState({\n            instance: e\n        }));\n    }, e.prototype.triggerEvent = function(t) {\n        var e = this.props.onEvent;\n        e && e(t);\n    }, e.defaultProps = {\n        loop: !1\n    }, e;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\nfunction styleInject(t, e) {\n    void 0 === e && (e = {});\n    var r = e.insertAt;\n    if (t && \"undefined\" != typeof document) {\n        var i = document.head || document.getElementsByTagName(\"head\")[0], a = document.createElement(\"style\");\n        a.type = \"text/css\", \"top\" === r && i.firstChild ? i.insertBefore(a, i.firstChild) : i.appendChild(a), a.styleSheet ? a.styleSheet.cssText = t : a.appendChild(document.createTextNode(t));\n    }\n}\nvar css_248z = \".lf-progress {\\n  -webkit-appearance: none;\\n  -moz-apperance: none;\\n  width: 100%;\\n  /* margin: 0 10px; */\\n  height: 4px;\\n  border-radius: 3px;\\n  cursor: pointer;\\n}\\n.lf-progress:focus {\\n  outline: none;\\n  border: none;\\n}\\n.lf-progress::-moz-range-track {\\n  cursor: pointer;\\n  background: none;\\n  border: none;\\n  outline: none;\\n}\\n.lf-progress::-webkit-slider-thumb {\\n  -webkit-appearance: none !important;\\n  height: 13px;\\n  width: 13px;\\n  border: 0;\\n  border-radius: 50%;\\n  background: #0fccce;\\n  cursor: pointer;\\n}\\n.lf-progress::-moz-range-thumb {\\n  -moz-appearance: none !important;\\n  height: 13px;\\n  width: 13px;\\n  border: 0;\\n  border-radius: 50%;\\n  background: #0fccce;\\n  cursor: pointer;\\n}\\n.lf-progress::-ms-track {\\n  width: 100%;\\n  height: 3px;\\n  cursor: pointer;\\n  background: transparent;\\n  border-color: transparent;\\n  color: transparent;\\n}\\n.lf-progress::-ms-fill-lower {\\n  background: #ccc;\\n  border-radius: 3px;\\n}\\n.lf-progress::-ms-fill-upper {\\n  background: #ccc;\\n  border-radius: 3px;\\n}\\n.lf-progress::-ms-thumb {\\n  border: 0;\\n  height: 15px;\\n  width: 15px;\\n  border-radius: 50%;\\n  background: #0fccce;\\n  cursor: pointer;\\n}\\n.lf-progress:focus::-ms-fill-lower {\\n  background: #ccc;\\n}\\n.lf-progress:focus::-ms-fill-upper {\\n  background: #ccc;\\n}\\n.lf-player-container :focus {\\n  outline: 0;\\n}\\n.lf-popover {\\n  position: relative;\\n}\\n\\n.lf-popover-content {\\n  display: inline-block;\\n  position: absolute;\\n  opacity: 1;\\n  visibility: visible;\\n  transform: translate(0, -10px);\\n  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\\n  transition: all 0.3s cubic-bezier(0.75, -0.02, 0.2, 0.97);\\n}\\n\\n.lf-popover-content.hidden {\\n  opacity: 0;\\n  visibility: hidden;\\n  transform: translate(0, 0px);\\n}\\n\\n.lf-player-btn-container {\\n  display: flex;\\n  align-items: center;\\n}\\n.lf-player-btn {\\n  cursor: pointer;\\n  fill: #999;\\n  width: 14px;\\n}\\n\\n.lf-player-btn.active {\\n  fill: #555;\\n}\\n\\n.lf-popover {\\n  position: relative;\\n}\\n\\n.lf-popover-content {\\n  display: inline-block;\\n  position: absolute;\\n  background-color: #ffffff;\\n  opacity: 1;\\n\\n  transform: translate(0, -10px);\\n  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\\n  transition: all 0.3s cubic-bezier(0.75, -0.02, 0.2, 0.97);\\n  padding: 10px;\\n}\\n\\n.lf-popover-content.hidden {\\n  opacity: 0;\\n  visibility: hidden;\\n  transform: translate(0, 0px);\\n}\\n\\n.lf-arrow {\\n  position: absolute;\\n  z-index: -1;\\n  content: '';\\n  bottom: -9px;\\n  border-style: solid;\\n  border-width: 10px 10px 0px 10px;\\n}\\n\\n.lf-left-align,\\n.lf-left-align .lfarrow {\\n  left: 0;\\n  right: unset;\\n}\\n\\n.lf-right-align,\\n.lf-right-align .lf-arrow {\\n  right: 0;\\n  left: unset;\\n}\\n\\n.lf-text-input {\\n  border: 1px #ccc solid;\\n  border-radius: 5px;\\n  padding: 3px;\\n  width: 60px;\\n  margin: 0;\\n}\\n\\n.lf-color-picker {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  height: 90px;\\n}\\n\\n.lf-color-selectors {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: space-between;\\n}\\n\\n.lf-color-component {\\n  display: flex;\\n  flex-direction: row;\\n  font-size: 12px;\\n  align-items: center;\\n  justify-content: center;\\n}\\n\\n.lf-color-component strong {\\n  width: 40px;\\n}\\n\\n.lf-color-component input[type='range'] {\\n  margin: 0 0 0 10px;\\n}\\n\\n.lf-color-component input[type='number'] {\\n  width: 50px;\\n  margin: 0 0 0 10px;\\n}\\n\\n.lf-color-preview {\\n  font-size: 12px;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: space-between;\\n  padding-left: 5px;\\n}\\n\\n.lf-preview {\\n  height: 60px;\\n  width: 60px;\\n}\\n\\n.lf-popover-snapshot {\\n  width: 150px;\\n}\\n.lf-popover-snapshot h5 {\\n  margin: 5px 0 10px 0;\\n  font-size: 0.75rem;\\n}\\n.lf-popover-snapshot a {\\n  display: block;\\n  text-decoration: none;\\n}\\n.lf-popover-snapshot a:before {\\n  content: '⥼';\\n  margin-right: 5px;\\n}\\n.lf-popover-snapshot .lf-note {\\n  display: block;\\n  margin-top: 10px;\\n  color: #999;\\n}\\n.lf-player-controls > div {\\n  margin-right: 5px;\\n  margin-left: 5px;\\n}\\n.lf-player-controls > div:first-child {\\n  margin-left: 0px;\\n}\\n.lf-player-controls > div:last-child {\\n  margin-right: 0px;\\n}\\n\", stylesheet = \".lf-progress {\\n  -webkit-appearance: none;\\n  -moz-apperance: none;\\n  width: 100%;\\n  /* margin: 0 10px; */\\n  height: 4px;\\n  border-radius: 3px;\\n  cursor: pointer;\\n}\\n.lf-progress:focus {\\n  outline: none;\\n  border: none;\\n}\\n.lf-progress::-moz-range-track {\\n  cursor: pointer;\\n  background: none;\\n  border: none;\\n  outline: none;\\n}\\n.lf-progress::-webkit-slider-thumb {\\n  -webkit-appearance: none !important;\\n  height: 13px;\\n  width: 13px;\\n  border: 0;\\n  border-radius: 50%;\\n  background: #0fccce;\\n  cursor: pointer;\\n}\\n.lf-progress::-moz-range-thumb {\\n  -moz-appearance: none !important;\\n  height: 13px;\\n  width: 13px;\\n  border: 0;\\n  border-radius: 50%;\\n  background: #0fccce;\\n  cursor: pointer;\\n}\\n.lf-progress::-ms-track {\\n  width: 100%;\\n  height: 3px;\\n  cursor: pointer;\\n  background: transparent;\\n  border-color: transparent;\\n  color: transparent;\\n}\\n.lf-progress::-ms-fill-lower {\\n  background: #ccc;\\n  border-radius: 3px;\\n}\\n.lf-progress::-ms-fill-upper {\\n  background: #ccc;\\n  border-radius: 3px;\\n}\\n.lf-progress::-ms-thumb {\\n  border: 0;\\n  height: 15px;\\n  width: 15px;\\n  border-radius: 50%;\\n  background: #0fccce;\\n  cursor: pointer;\\n}\\n.lf-progress:focus::-ms-fill-lower {\\n  background: #ccc;\\n}\\n.lf-progress:focus::-ms-fill-upper {\\n  background: #ccc;\\n}\\n.lf-player-container :focus {\\n  outline: 0;\\n}\\n.lf-popover {\\n  position: relative;\\n}\\n\\n.lf-popover-content {\\n  display: inline-block;\\n  position: absolute;\\n  opacity: 1;\\n  visibility: visible;\\n  transform: translate(0, -10px);\\n  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\\n  transition: all 0.3s cubic-bezier(0.75, -0.02, 0.2, 0.97);\\n}\\n\\n.lf-popover-content.hidden {\\n  opacity: 0;\\n  visibility: hidden;\\n  transform: translate(0, 0px);\\n}\\n\\n.lf-player-btn-container {\\n  display: flex;\\n  align-items: center;\\n}\\n.lf-player-btn {\\n  cursor: pointer;\\n  fill: #999;\\n  width: 14px;\\n}\\n\\n.lf-player-btn.active {\\n  fill: #555;\\n}\\n\\n.lf-popover {\\n  position: relative;\\n}\\n\\n.lf-popover-content {\\n  display: inline-block;\\n  position: absolute;\\n  background-color: #ffffff;\\n  opacity: 1;\\n\\n  transform: translate(0, -10px);\\n  box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\\n  transition: all 0.3s cubic-bezier(0.75, -0.02, 0.2, 0.97);\\n  padding: 10px;\\n}\\n\\n.lf-popover-content.hidden {\\n  opacity: 0;\\n  visibility: hidden;\\n  transform: translate(0, 0px);\\n}\\n\\n.lf-arrow {\\n  position: absolute;\\n  z-index: -1;\\n  content: '';\\n  bottom: -9px;\\n  border-style: solid;\\n  border-width: 10px 10px 0px 10px;\\n}\\n\\n.lf-left-align,\\n.lf-left-align .lfarrow {\\n  left: 0;\\n  right: unset;\\n}\\n\\n.lf-right-align,\\n.lf-right-align .lf-arrow {\\n  right: 0;\\n  left: unset;\\n}\\n\\n.lf-text-input {\\n  border: 1px #ccc solid;\\n  border-radius: 5px;\\n  padding: 3px;\\n  width: 60px;\\n  margin: 0;\\n}\\n\\n.lf-color-picker {\\n  display: flex;\\n  flex-direction: row;\\n  justify-content: space-between;\\n  height: 90px;\\n}\\n\\n.lf-color-selectors {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: space-between;\\n}\\n\\n.lf-color-component {\\n  display: flex;\\n  flex-direction: row;\\n  font-size: 12px;\\n  align-items: center;\\n  justify-content: center;\\n}\\n\\n.lf-color-component strong {\\n  width: 40px;\\n}\\n\\n.lf-color-component input[type='range'] {\\n  margin: 0 0 0 10px;\\n}\\n\\n.lf-color-component input[type='number'] {\\n  width: 50px;\\n  margin: 0 0 0 10px;\\n}\\n\\n.lf-color-preview {\\n  font-size: 12px;\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: space-between;\\n  padding-left: 5px;\\n}\\n\\n.lf-preview {\\n  height: 60px;\\n  width: 60px;\\n}\\n\\n.lf-popover-snapshot {\\n  width: 150px;\\n}\\n.lf-popover-snapshot h5 {\\n  margin: 5px 0 10px 0;\\n  font-size: 0.75rem;\\n}\\n.lf-popover-snapshot a {\\n  display: block;\\n  text-decoration: none;\\n}\\n.lf-popover-snapshot a:before {\\n  content: '⥼';\\n  margin-right: 5px;\\n}\\n.lf-popover-snapshot .lf-note {\\n  display: block;\\n  margin-top: 10px;\\n  color: #999;\\n}\\n.lf-player-controls > div {\\n  margin-right: 5px;\\n  margin-left: 5px;\\n}\\n.lf-player-controls > div:first-child {\\n  margin-left: 0px;\\n}\\n.lf-player-controls > div:last-child {\\n  margin-right: 0px;\\n}\\n\";\nstyleInject(css_248z);\nvar ColorPicker = function(t) {\n    function e() {\n        var e = null !== t && t.apply(this, arguments) || this;\n        return e.state = {\n            red: 0,\n            green: 0,\n            blue: 0,\n            rgba: null,\n            hex: \"#000000\",\n            colorComponents: []\n        }, e.handleChange = function(t, r) {\n            if (\"r\" === t) {\n                var i = \"#\" + (256 | r).toString(16).slice(1) + (256 | e.state.green).toString(16).slice(1) + (256 | e.state.blue).toString(16).slice(1);\n                e.setState({\n                    hex: i\n                });\n            } else if (\"g\" === t) {\n                i = \"#\" + (256 | e.state.red).toString(16).slice(1) + (256 | r).toString(16).slice(1) + (256 | e.state.blue).toString(16).slice(1);\n                e.setState({\n                    hex: i\n                });\n            } else if (\"b\" === t) {\n                i = \"#\" + (256 | e.state.red).toString(16).slice(1) + (256 | e.state.green).toString(16).slice(1) + (256 | r).toString(16).slice(1);\n                e.setState({\n                    hex: i\n                });\n            }\n        }, e.parseColor = function(t) {\n            var r;\n            if (\"string\" == typeof t) {\n                if (\"#\" === t[0]) {\n                    var i = 4 === t.length ? [\n                        t.slice(1, 2),\n                        t.slice(2, 3),\n                        t.slice(3, 4)\n                    ].map(function(t) {\n                        return parseInt(\"\" + t + t, 16);\n                    }) : [\n                        t.slice(1, 3),\n                        t.slice(3, 5),\n                        t.slice(5, 7)\n                    ].map(function(t) {\n                        return parseInt(t, 16);\n                    });\n                    e.setState({\n                        colorComponents: i\n                    });\n                } else if (t.startsWith(\"rgb\")) {\n                    void 0 !== (i = null === (r = t.match(/\\d+/g)) || void 0 === r ? void 0 : r.map(function(t) {\n                        return parseInt(t);\n                    })) && e.setState({\n                        colorComponents: i\n                    });\n                }\n                e.state.colorComponents.length && (e.setState({\n                    red: e.state.colorComponents[0]\n                }), e.setState({\n                    green: e.state.colorComponents[1]\n                }), e.setState({\n                    blue: e.state.colorComponents[2]\n                }));\n            }\n        }, e;\n    }\n    return __extends(e, t), e.prototype.componentDidUpdate = function(t, e) {\n        return this.props.colorChangedEvent && this.state.hex !== e.hex && this.props.colorChangedEvent(this.state.hex), !0;\n    }, e.prototype.render = function() {\n        var t = this;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"lf-color-picker\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"lf-color-selectors\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"lf-color-component\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"strong\", null, \"Red\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n            type: \"range\",\n            min: \"0\",\n            max: \"255\",\n            value: this.state.red,\n            onChange: function(e) {\n                t.setState({\n                    red: e.target.value\n                }), t.handleChange(\"r\", e.target.value);\n            }\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n            className: \"lf-text-input\",\n            type: \"number\",\n            min: \"0\",\n            max: \"255\",\n            value: this.state.red,\n            onChange: function(e) {\n                t.setState({\n                    red: e.target.value\n                }), t.handleChange(\"r\", e.target.value);\n            }\n        })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"lf-color-component\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"strong\", null, \"Green\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n            type: \"range\",\n            min: \"0\",\n            max: \"255\",\n            value: this.state.green,\n            onChange: function(e) {\n                t.setState({\n                    green: e.target.value\n                }), t.handleChange(\"g\", e.target.value);\n            }\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n            className: \"lf-text-input\",\n            type: \"number\",\n            min: \"0\",\n            max: \"255\",\n            value: this.state.green,\n            onChange: function(e) {\n                t.setState({\n                    green: e.target.value\n                }), t.handleChange(\"g\", e.target.value);\n            }\n        })), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"lf-color-component\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"strong\", null, \"Blue\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n            type: \"range\",\n            min: \"0\",\n            max: \"255\",\n            value: this.state.blue,\n            onChange: function(e) {\n                t.setState({\n                    blue: e.target.value\n                }), t.handleChange(\"b\", e.target.value);\n            }\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n            className: \"lf-text-input\",\n            type: \"number\",\n            min: \"0\",\n            max: \"255\",\n            value: this.state.blue,\n            onChange: function(e) {\n                t.setState({\n                    blue: e.target.value\n                }), t.handleChange(\"b\", e.target.value);\n            }\n        }))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"lf-color-preview\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"lf-preview\",\n            style: {\n                background: \"rgb(\" + this.state.red + \", \" + this.state.green + \", \" + this.state.blue + \")\"\n            }\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n            className: \"lf-text-input\",\n            type: \"text\",\n            value: this.state.hex,\n            onChange: function(e) {\n                t.setState({\n                    hex: e.target.value\n                }), t.parseColor(e.target.value);\n            }\n        }))));\n    }, e;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component), Popover = function(t) {\n    var e = t.children, r = t.icon, i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), a = i[0], s = i[1], n = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), o = n[0], h = n[1], l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null), p = l[0], f = l[1], c = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), m = c[0], d = c[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        if (a && o) {\n            var t = a.getBoundingClientRect(), e = o.getBoundingClientRect(), r = t.left + e.width > window.innerWidth ? -1 : 0;\n            f(r);\n        }\n    }, [\n        p,\n        o,\n        a\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lf-popover\",\n        onMouseOver: function() {\n            d(!0);\n        },\n        onMouseLeave: function() {\n            d(!1);\n        },\n        ref: function(t) {\n            s(t);\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \" lf-player-btn\"\n    }, r), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: \"lf-popover-content\",\n        ref: function(t) {\n            h(t);\n        },\n        style: {\n            bottom: \"22px\",\n            right: \"0px\",\n            zIndex: 2,\n            visibility: m ? \"visible\" : \"hidden\"\n        }\n    }, e));\n}, Seeker = function(t) {\n    function e(e) {\n        var r = t.call(this, e) || this;\n        return r.inputRef = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef(), r.handleChange = function() {\n            return function(t) {\n                var e = t.target.value, i = Math.floor(e / 100 * r.props.max);\n                r.props.onChange(i);\n            };\n        }, r.state = {\n            value: 0\n        }, r;\n    }\n    return __extends(e, t), e.prototype.render = function() {\n        var t = this.props.value / this.props.max * 100, e = {\n            backgroundImage: \"-webkit-gradient(linear, left top, right top, color-stop(\" + t + \"%, rgba(15, 204, 206, 0.4)), color-stop(\" + t + \"%, #DAE1E7))\"\n        }, r = {\n            position: \"absolute\",\n            left: 0,\n            marginTop: \"8px\",\n            width: \"20px\",\n            display: \"block\",\n            border: \"0px\",\n            backgroundColor: this.props.darkTheme ? \"#505050\" : \"rgb(218, 225, 231)\",\n            color: this.props.darkTheme ? \"#B9B9B9\" : \"#555\",\n            padding: \"2px\",\n            textAlign: \"center\",\n            borderRadius: \"3px\",\n            fontSize: \"8px\",\n            fontWeight: \"bold\"\n        }, i = {\n            position: \"absolute\",\n            right: 0,\n            marginTop: \"8px\",\n            width: \"20px\",\n            display: \"block\",\n            border: \"0px\",\n            backgroundColor: this.props.darkTheme ? \"#505050\" : \"rgb(218, 225, 231)\",\n            color: this.props.darkTheme ? \"#B9B9B9\" : \"#555\",\n            padding: \"2px\",\n            textAlign: \"center\",\n            borderRadius: \"3px\",\n            fontSize: \"8px\",\n            fontWeight: \"bold\"\n        };\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            style: {\n                display: \"flex\",\n                flexDirection: \"column\",\n                alignItems: \"center\",\n                width: \"100%\",\n                marginRight: \"5px\",\n                marginLeft: \"5px\",\n                position: \"relative\"\n            }\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n            ref: this.inputRef,\n            id: \"track\",\n            className: \"lf-progress\",\n            name: \"progress\",\n            \"aria-label\": \"progress\",\n            type: \"range\",\n            min: \"0\",\n            max: \"100\",\n            step: \"0.1\",\n            value: t,\n            onInput: this.handleChange(),\n            onChange: this.handleChange(),\n            style: e\n        }), this.props.showLabels && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            style: {\n                display: \"flex\",\n                justifyContent: \"space-between\"\n            }\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            style: r\n        }, this.props.min), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            style: i\n        }, this.props.max)));\n    }, e;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component), ControlButtonStyle = {\n    display: \"inline-flex\",\n    cursor: \"pointer\"\n}, Controls = function(t) {\n    function e(e) {\n        var r = t.call(this, e) || this;\n        return r.state = {\n            activeFrame: 0,\n            mouseDown: !1\n        }, r;\n    }\n    return __extends(e, t), e.prototype.render = function() {\n        var t = this, e = this.props, r = e.instance, i = e.playerState, a = e.seeker, s = e.setLoop, n = e.setSeeker, o = e.play, h = e.pause, l = e.stop, p = e.visible, f = e.buttons;\n        if (!r) return null;\n        if (!p) return null;\n        var c = !f || f.includes(\"play\"), m = !f || f.includes(\"stop\"), d = !f || f.includes(\"repeat\"), u = !f || f.includes(\"frame\"), y = !f || f.includes(\"background\"), g = !f || f.includes(\"snapshot\"), v = {\n            width: 14,\n            height: 14,\n            viewBox: \"0 0 24 24\"\n        }, b = Math.round(r.currentFrame);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            className: \"lf-player-controls\",\n            style: {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                height: \"60px\",\n                alignItems: \"center\",\n                backgroundColor: this.props.transparentTheme ? \"transparent\" : this.props.darkTheme ? \"#3C3C3C\" : \"#ffffff\",\n                paddingLeft: \"10px\",\n                paddingRight: \"10px\"\n            }\n        }, c && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            role: \"button\",\n            \"aria-label\": i === PlayerState.Playing ? PlayerEvent.Pause : PlayerEvent.Play,\n            tabIndex: 0,\n            onClick: function() {\n                i === PlayerState.Playing ? \"function\" == typeof h && h() : \"function\" == typeof o && o();\n            },\n            onKeyDown: function() {\n                i === PlayerState.Playing ? \"function\" == typeof h && h() : \"function\" == typeof o && o();\n            },\n            className: \"lf-player-btn\",\n            style: ControlButtonStyle\n        }, i === PlayerState.Playing ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __assign({}, v), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", {\n            height: \"22.9\",\n            rx: \"1.9\",\n            width: \"7.6\",\n            x: \"14\",\n            y: \".5\"\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"rect\", {\n            height: \"22.9\",\n            rx: \"1.9\",\n            width: \"7.6\",\n            x: \"2\",\n            y: \".5\"\n        })) : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __assign({}, v), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n            d: \"M2 3.4C2 1.9 3.5 1 4.8 1.8l16.5 9.6c1.2.7 1.2 2.5 0 3.2L4.8 24.2C3.5 25 2 24.1 2 22.6V3.4z\"\n        }))), m && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            tabIndex: 0,\n            role: \"button\",\n            \"aria-label\": PlayerEvent.Stop,\n            onClick: function() {\n                return l && l();\n            },\n            onKeyDown: function() {\n                return l && l();\n            },\n            className: i === PlayerState.Stopped ? \"lf-player-btn active\" : \"lf-player-btn\",\n            style: ControlButtonStyle\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __assign({}, v), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n            d: \"M2 3.667A1.67 1.67 0 0 1 3.667 2h16.666A1.67 1.67 0 0 1 22 3.667v16.666A1.67 1.67 0 0 1 20.333\\n            22H3.667A1.67 1.67 0 0 1 2 20.333z\"\n        }))), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Seeker, {\n            min: 0,\n            step: 1,\n            max: r ? r.totalFrames : 1,\n            value: a || 0,\n            onChange: function(e) {\n                n && t.setState({\n                    activeFrame: e\n                }, function() {\n                    n(e, !1);\n                });\n            },\n            onChangeEnd: function(e) {\n                n && t.setState({\n                    activeFrame: e\n                }, function() {\n                    n(e, !1);\n                });\n            },\n            showLabels: this.props.showLabels,\n            darkTheme: this.props.darkTheme\n        }), u && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            role: \"button\",\n            className: \"lf-player-btn-container\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"input\", {\n            style: {\n                outline: \"none\",\n                border: this.props.darkTheme ? \"1px #505050 solid\" : \"1px #ccc solid\",\n                borderRadius: \"3px\",\n                width: \"40px\",\n                textAlign: \"center\",\n                backgroundColor: this.props.darkTheme ? \"#505050\" : \"#ffffff\",\n                color: this.props.darkTheme ? \"#B9B9B9\" : \"#999\",\n                fontSize: \"0.7rem\",\n                padding: \"0\",\n                fontFamily: \"inherit\"\n            },\n            type: \"text\",\n            value: b,\n            readOnly: !0\n        })), d && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            role: \"button\",\n            \"aria-label\": PlayerEvent.Loop,\n            tabIndex: 0,\n            onClick: function() {\n                r && s && s(!r.loop);\n            },\n            onKeyDown: function() {\n                r && s && s(!r.loop);\n            },\n            className: r.loop ? \"lf-player-btn active\" : \"lf-player-btn\",\n            style: ControlButtonStyle\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __assign({}, v), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n            d: \"M12.5 16.8137h-.13v1.8939h4.9696c3.6455 0 6.6113-2.9658 6.6113-6.6116\\n            0-3.64549-2.9658-6.61131-6.6113-6.61131-.5231 0-.947.42391-.947.94696 0 .52304.4239.94696.947.94696 2.6011 0\\n            4.7174 2.11634 4.7174 4.71739 0 2.6014-2.1166 4.7177-4.7174 4.7177H12.5zM13.6025\\n            5.61469v-.13H7.48137C3.83582 5.48469.87 8.45051.87 12.096c0 3.6509 3.17269 6.6117 6.81304 6.6117.52304 0\\n            .94696-.424.94696-.947 0-.5231-.42392-.947-.94696-.947-2.60804 0-4.91907-2.1231-4.91907-4.7176 0-2.60115\\n            2.11634-4.71744 4.7174-4.71744h6.12113V5.61469z\",\n            stroke: \"#8795A1\",\n            strokeWidth: \".26\"\n        }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n            d: \"M11.1482\\n            2.20355h0l-.001-.00116c-.3412-.40061-.9405-.44558-1.33668-.0996h-.00001c-.39526.34519-.43936.94795-.09898\\n            1.34767l2.51487 3.03683-2.51894 3.06468c-.33872.40088-.29282 1.00363.10347\\n            1.34723l.08517-.0982-.08517.0982c.17853.1549.39807.2308.61647.2308.2671 0 .5328-.114.72-.3347h0l.0011-.0014\\n            3.0435-3.68655.0006-.00068c.3035-.35872.3025-.88754-.0019-1.24526l-3.0425-3.65786zM13.9453\\n            21.7965h0l.001.0011c.3413.4006.9407.4456 1.337.0996h0c.3953-.3452.4395-.9479.099-1.3477l-2.5154-3.0368\\n            2.5195-3.0647c.3388-.4008.2929-1.0036-.1035-1.3472l-.0852.0982.0852-.0982c-.1786-.1549-.3981-.2308-.6166-.2308-.2671\\n            0-.5329.114-.7202.3347h0l-.0011.0014-3.0442\\n            3.6865c-.0001.0003-.0003.0005-.0005.0007-.3036.3587-.3027.8876.0019 1.2453l3.0431 3.6579z\",\n            fill: \"#8795A1\",\n            stroke: \"#8795A1\",\n            strokeWidth: \".26\"\n        }))), y && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Popover, {\n            icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __assign({}, v), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n                d: \"M12 3.1L6.1 8.6a7.6 7.6 0 00-2.2 4 7.2 7.2 0 00.4 4.4 7.9 7.9 0 003 3.5 8.7 8.7 0 004.7 1.3c1.6 0\\n            3.2-.5 4.6-1.3s2.4-2 3-3.5a7.2 7.2 0 00.5-4.5 7.6 7.6 0 00-2.2-4L12 3.2zM12 0l7.5 7a9.8 9.8 0 013 5.1\\n            9.3 9.3 0 01-.6 5.8c-.9 1.8-2.2 3.3-4 4.4A11.2 11.2 0 0112 24a11.2 11.2 0\\n            01-6-1.7c-1.7-1-3-2.6-3.9-4.4a9.3 9.3 0 01-.6-5.8c.4-2 1.5-3.7 3-5L12 0zM6 14h12c0 1.5-.7 3-1.8 4s-2.6\\n            1.6-4.2 1.6S9 19 7.8 18s-1.7-2.5-1.7-4z\"\n            }))\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            slot: \"content\",\n            className: \"lf-popover popover-background\"\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(ColorPicker, {\n            colorChangedEvent: this.props.colorChangedEvent\n        }))), g && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Popover, {\n            icon: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"svg\", __assign({}, v), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n                clipRule: \"evenodd\",\n                d: \"M0 3.01A2.983 2.983 0 012.983.027H16.99a2.983 2.983 0 012.983 2.983v14.008a2.982 2.982 0 01-2.983\\n              2.983H2.983A2.983 2.983 0 010 17.018zm2.983-.941a.941.941 0 00-.942.94v14.01c0\\n              .52.422.94.942.94H16.99a.94.94 0 00.941-.94V3.008a.941.941 0 00-.94-.94H2.981z\",\n                fillRule: \"evenodd\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n                d: \"M12.229 7.945l-2.07 4.598-2.586-2.605-2.414 2.758v2.146h9.656V11.93z\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"circle\", {\n                cx: \"7.444\",\n                cy: \"6.513\",\n                r: \"2.032\"\n            }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"path\", {\n                d: \"M9.561 23.916h11.25a2.929 2.929 0 002.926-2.927V9.954a1.06 1.06 0 10-2.122 0v11.035a.805.805 0\\n              01-.803.804H9.562a1.061 1.061 0 100 2.123z\",\n                stroke: \"#8795a1\",\n                strokeWidth: \".215\"\n            }))\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            slot: \"content\",\n            className: \"lf-popover lf-popover-snapshot\",\n            onWheel: function(t) {\n                n && n(b + (t.deltaY > 0 ? -1 : 1), !1);\n            }\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"h5\", null, \"Frame \", b), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            style: {\n                cursor: \"pointer\",\n                color: \"#0FCCCE\"\n            },\n            onClick: this.props.snapshot\n        }, \"Download SVG\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n            style: {\n                cursor: \"pointer\",\n                color: \"#0FCCCE\"\n            },\n            onClick: this.props.snapshot\n        }, \"Download PNG\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"i\", {\n            className: \"lf-note\"\n        }, \"Scroll with mousewheel to find exact frame\"))));\n    }, e;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n //# sourceMappingURL=lottie-react.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@lottiefiles/react-lottie-player/dist/lottie-react.esm.js\n");

/***/ })

};
;